
APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  080402d0  080402d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08047774  08047774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08047854  08047854  00008854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08047858  08047858  00008858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  0804785c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a6c  24000014  08047870  00009014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004a80  08047870  00009a80  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d640  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b65  00000000  00000000  00026682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018c8  00000000  00000000  0002a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001311  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000537b  00000000  00000000  0002cdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cb75  00000000  00000000  0003213c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159f32  00000000  00000000  0004ecb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a8be3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000068d8  00000000  00000000  001a8c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  001af500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402d0 <__do_global_dtors_aux>:
 80402d0:	b510      	push	{r4, lr}
 80402d2:	4c05      	ldr	r4, [pc, #20]	@ (80402e8 <__do_global_dtors_aux+0x18>)
 80402d4:	7823      	ldrb	r3, [r4, #0]
 80402d6:	b933      	cbnz	r3, 80402e6 <__do_global_dtors_aux+0x16>
 80402d8:	4b04      	ldr	r3, [pc, #16]	@ (80402ec <__do_global_dtors_aux+0x1c>)
 80402da:	b113      	cbz	r3, 80402e2 <__do_global_dtors_aux+0x12>
 80402dc:	4804      	ldr	r0, [pc, #16]	@ (80402f0 <__do_global_dtors_aux+0x20>)
 80402de:	f3af 8000 	nop.w
 80402e2:	2301      	movs	r3, #1
 80402e4:	7023      	strb	r3, [r4, #0]
 80402e6:	bd10      	pop	{r4, pc}
 80402e8:	24000014 	.word	0x24000014
 80402ec:	00000000 	.word	0x00000000
 80402f0:	0804775c 	.word	0x0804775c

080402f4 <frame_dummy>:
 80402f4:	b508      	push	{r3, lr}
 80402f6:	4b03      	ldr	r3, [pc, #12]	@ (8040304 <frame_dummy+0x10>)
 80402f8:	b11b      	cbz	r3, 8040302 <frame_dummy+0xe>
 80402fa:	4903      	ldr	r1, [pc, #12]	@ (8040308 <frame_dummy+0x14>)
 80402fc:	4803      	ldr	r0, [pc, #12]	@ (804030c <frame_dummy+0x18>)
 80402fe:	f3af 8000 	nop.w
 8040302:	bd08      	pop	{r3, pc}
 8040304:	00000000 	.word	0x00000000
 8040308:	24000018 	.word	0x24000018
 804030c:	0804775c 	.word	0x0804775c

08040310 <fun>:
 *  Created on: Apr 4, 2025
 *      Author: Rishikesh
 */
#include "fdcan.h"
char TxData[8];
void fun(){
 8040310:	b580      	push	{r7, lr}
 8040312:	b08a      	sub	sp, #40	@ 0x28
 8040314:	af00      	add	r7, sp, #0

	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.DataLength=8;
 8040316:	2308      	movs	r3, #8
 8040318:	613b      	str	r3, [r7, #16]
	TxHeader.Identifier=101;
 804031a:	2365      	movs	r3, #101	@ 0x65
 804031c:	607b      	str	r3, [r7, #4]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,TxData);
 804031e:	1d3b      	adds	r3, r7, #4
 8040320:	4a04      	ldr	r2, [pc, #16]	@ (8040334 <fun+0x24>)
 8040322:	4619      	mov	r1, r3
 8040324:	4804      	ldr	r0, [pc, #16]	@ (8040338 <fun+0x28>)
 8040326:	f000 ff45 	bl	80411b4 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 804032a:	bf00      	nop
 804032c:	3728      	adds	r7, #40	@ 0x28
 804032e:	46bd      	mov	sp, r7
 8040330:	bd80      	pop	{r7, pc}
 8040332:	bf00      	nop
 8040334:	24000030 	.word	0x24000030
 8040338:	24000038 	.word	0x24000038

0804033c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 804033c:	b580      	push	{r7, lr}
 804033e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8040340:	4b2f      	ldr	r3, [pc, #188]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040342:	4a30      	ldr	r2, [pc, #192]	@ (8040404 <MX_FDCAN1_Init+0xc8>)
 8040344:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8040346:	4b2e      	ldr	r3, [pc, #184]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 804034c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 804034e:	4b2c      	ldr	r3, [pc, #176]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040350:	2200      	movs	r2, #0
 8040352:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8040354:	4b2a      	ldr	r3, [pc, #168]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040356:	2201      	movs	r2, #1
 8040358:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 804035a:	4b29      	ldr	r3, [pc, #164]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 804035c:	2200      	movs	r2, #0
 804035e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8040360:	4b27      	ldr	r3, [pc, #156]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040362:	2200      	movs	r2, #0
 8040364:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8040366:	4b26      	ldr	r3, [pc, #152]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040368:	2201      	movs	r2, #1
 804036a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 804036c:	4b24      	ldr	r3, [pc, #144]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 804036e:	2201      	movs	r2, #1
 8040370:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 27;
 8040372:	4b23      	ldr	r3, [pc, #140]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040374:	221b      	movs	r2, #27
 8040376:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8040378:	4b21      	ldr	r3, [pc, #132]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 804037a:	2214      	movs	r2, #20
 804037c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 804037e:	4b20      	ldr	r3, [pc, #128]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040380:	2201      	movs	r2, #1
 8040382:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8040384:	4b1e      	ldr	r3, [pc, #120]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040386:	2201      	movs	r2, #1
 8040388:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 27;
 804038a:	4b1d      	ldr	r3, [pc, #116]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 804038c:	221b      	movs	r2, #27
 804038e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 10;
 8040390:	4b1b      	ldr	r3, [pc, #108]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040392:	220a      	movs	r2, #10
 8040394:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8040396:	4b1a      	ldr	r3, [pc, #104]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 8040398:	2200      	movs	r2, #0
 804039a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 804039c:	4b18      	ldr	r3, [pc, #96]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 804039e:	2200      	movs	r2, #0
 80403a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80403a2:	4b17      	ldr	r3, [pc, #92]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403a4:	2200      	movs	r2, #0
 80403a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80403a8:	4b15      	ldr	r3, [pc, #84]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403aa:	2240      	movs	r2, #64	@ 0x40
 80403ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80403ae:	4b14      	ldr	r3, [pc, #80]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403b0:	2212      	movs	r2, #18
 80403b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80403b4:	4b12      	ldr	r3, [pc, #72]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403b6:	2200      	movs	r2, #0
 80403b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80403ba:	4b11      	ldr	r3, [pc, #68]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403bc:	2212      	movs	r2, #18
 80403be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80403c0:	4b0f      	ldr	r3, [pc, #60]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403c2:	2200      	movs	r2, #0
 80403c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 80403c6:	4b0e      	ldr	r3, [pc, #56]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403c8:	2212      	movs	r2, #18
 80403ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80403cc:	4b0c      	ldr	r3, [pc, #48]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403ce:	2200      	movs	r2, #0
 80403d0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80403d2:	4b0b      	ldr	r3, [pc, #44]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403d4:	2200      	movs	r2, #0
 80403d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80403d8:	4b09      	ldr	r3, [pc, #36]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403da:	2200      	movs	r2, #0
 80403dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80403de:	4b08      	ldr	r3, [pc, #32]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403e0:	2200      	movs	r2, #0
 80403e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80403e4:	4b06      	ldr	r3, [pc, #24]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403e6:	2212      	movs	r2, #18
 80403e8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80403ea:	4805      	ldr	r0, [pc, #20]	@ (8040400 <MX_FDCAN1_Init+0xc4>)
 80403ec:	f000 fd04 	bl	8040df8 <HAL_FDCAN_Init>
 80403f0:	4603      	mov	r3, r0
 80403f2:	2b00      	cmp	r3, #0
 80403f4:	d001      	beq.n	80403fa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80403f6:	f000 f9b9 	bl	804076c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80403fa:	bf00      	nop
 80403fc:	bd80      	pop	{r7, pc}
 80403fe:	bf00      	nop
 8040400:	24000038 	.word	0x24000038
 8040404:	4000a000 	.word	0x4000a000

08040408 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8040408:	b580      	push	{r7, lr}
 804040a:	b0b8      	sub	sp, #224	@ 0xe0
 804040c:	af00      	add	r7, sp, #0
 804040e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040410:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8040414:	2200      	movs	r2, #0
 8040416:	601a      	str	r2, [r3, #0]
 8040418:	605a      	str	r2, [r3, #4]
 804041a:	609a      	str	r2, [r3, #8]
 804041c:	60da      	str	r2, [r3, #12]
 804041e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040420:	f107 0310 	add.w	r3, r7, #16
 8040424:	22b8      	movs	r2, #184	@ 0xb8
 8040426:	2100      	movs	r1, #0
 8040428:	4618      	mov	r0, r3
 804042a:	f007 f95d 	bl	80476e8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 804042e:	687b      	ldr	r3, [r7, #4]
 8040430:	681b      	ldr	r3, [r3, #0]
 8040432:	4a2e      	ldr	r2, [pc, #184]	@ (80404ec <HAL_FDCAN_MspInit+0xe4>)
 8040434:	4293      	cmp	r3, r2
 8040436:	d155      	bne.n	80404e4 <HAL_FDCAN_MspInit+0xdc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8040438:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 804043c:	f04f 0300 	mov.w	r3, #0
 8040440:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8040444:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8040448:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804044a:	f107 0310 	add.w	r3, r7, #16
 804044e:	4618      	mov	r0, r3
 8040450:	f002 fda0 	bl	8042f94 <HAL_RCCEx_PeriphCLKConfig>
 8040454:	4603      	mov	r3, r0
 8040456:	2b00      	cmp	r3, #0
 8040458:	d001      	beq.n	804045e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 804045a:	f000 f987 	bl	804076c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 804045e:	4b24      	ldr	r3, [pc, #144]	@ (80404f0 <HAL_FDCAN_MspInit+0xe8>)
 8040460:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8040464:	4a22      	ldr	r2, [pc, #136]	@ (80404f0 <HAL_FDCAN_MspInit+0xe8>)
 8040466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 804046a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 804046e:	4b20      	ldr	r3, [pc, #128]	@ (80404f0 <HAL_FDCAN_MspInit+0xe8>)
 8040470:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8040474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040478:	60fb      	str	r3, [r7, #12]
 804047a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 804047c:	4b1c      	ldr	r3, [pc, #112]	@ (80404f0 <HAL_FDCAN_MspInit+0xe8>)
 804047e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040482:	4a1b      	ldr	r2, [pc, #108]	@ (80404f0 <HAL_FDCAN_MspInit+0xe8>)
 8040484:	f043 0308 	orr.w	r3, r3, #8
 8040488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804048c:	4b18      	ldr	r3, [pc, #96]	@ (80404f0 <HAL_FDCAN_MspInit+0xe8>)
 804048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040492:	f003 0308 	and.w	r3, r3, #8
 8040496:	60bb      	str	r3, [r7, #8]
 8040498:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 804049a:	2303      	movs	r3, #3
 804049c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80404a0:	2302      	movs	r3, #2
 80404a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80404a6:	2300      	movs	r3, #0
 80404a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80404ac:	2300      	movs	r3, #0
 80404ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80404b2:	2309      	movs	r3, #9
 80404b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80404b8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80404bc:	4619      	mov	r1, r3
 80404be:	480d      	ldr	r0, [pc, #52]	@ (80404f4 <HAL_FDCAN_MspInit+0xec>)
 80404c0:	f001 fbda 	bl	8041c78 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80404c4:	2200      	movs	r2, #0
 80404c6:	2105      	movs	r1, #5
 80404c8:	2013      	movs	r0, #19
 80404ca:	f000 fbf5 	bl	8040cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80404ce:	2013      	movs	r0, #19
 80404d0:	f000 fc0c 	bl	8040cec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80404d4:	2200      	movs	r2, #0
 80404d6:	2105      	movs	r1, #5
 80404d8:	2015      	movs	r0, #21
 80404da:	f000 fbed 	bl	8040cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80404de:	2015      	movs	r0, #21
 80404e0:	f000 fc04 	bl	8040cec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80404e4:	bf00      	nop
 80404e6:	37e0      	adds	r7, #224	@ 0xe0
 80404e8:	46bd      	mov	sp, r7
 80404ea:	bd80      	pop	{r7, pc}
 80404ec:	4000a000 	.word	0x4000a000
 80404f0:	58024400 	.word	0x58024400
 80404f4:	58020c00 	.word	0x58020c00

080404f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80404f8:	b580      	push	{r7, lr}
 80404fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80404fc:	4a08      	ldr	r2, [pc, #32]	@ (8040520 <MX_FREERTOS_Init+0x28>)
 80404fe:	2100      	movs	r1, #0
 8040500:	4808      	ldr	r0, [pc, #32]	@ (8040524 <MX_FREERTOS_Init+0x2c>)
 8040502:	f004 fbbb 	bl	8044c7c <osThreadNew>
 8040506:	4603      	mov	r3, r0
 8040508:	4a07      	ldr	r2, [pc, #28]	@ (8040528 <MX_FREERTOS_Init+0x30>)
 804050a:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(OTA_Task, NULL, &Task1_attributes);
 804050c:	4a07      	ldr	r2, [pc, #28]	@ (804052c <MX_FREERTOS_Init+0x34>)
 804050e:	2100      	movs	r1, #0
 8040510:	4807      	ldr	r0, [pc, #28]	@ (8040530 <MX_FREERTOS_Init+0x38>)
 8040512:	f004 fbb3 	bl	8044c7c <osThreadNew>
 8040516:	4603      	mov	r3, r0
 8040518:	4a06      	ldr	r2, [pc, #24]	@ (8040534 <MX_FREERTOS_Init+0x3c>)
 804051a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 804051c:	bf00      	nop
 804051e:	bd80      	pop	{r7, pc}
 8040520:	080477ec 	.word	0x080477ec
 8040524:	08040539 	.word	0x08040539
 8040528:	240000d8 	.word	0x240000d8
 804052c:	08047810 	.word	0x08047810
 8040530:	08040549 	.word	0x08040549
 8040534:	240000dc 	.word	0x240000dc

08040538 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8040538:	b580      	push	{r7, lr}
 804053a:	b082      	sub	sp, #8
 804053c:	af00      	add	r7, sp, #0
 804053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8040540:	2001      	movs	r0, #1
 8040542:	f004 fc2d 	bl	8044da0 <osDelay>
 8040546:	e7fb      	b.n	8040540 <StartDefaultTask+0x8>

08040548 <OTA_Task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void OTA_Task(void *argument)
{
 8040548:	b580      	push	{r7, lr}
 804054a:	b082      	sub	sp, #8
 804054c:	af00      	add	r7, sp, #0
 804054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  fun();
 8040550:	f7ff fede 	bl	8040310 <fun>
    osDelay(100);
 8040554:	2064      	movs	r0, #100	@ 0x64
 8040556:	f004 fc23 	bl	8044da0 <osDelay>
  {
 804055a:	bf00      	nop
 804055c:	e7f8      	b.n	8040550 <OTA_Task+0x8>
	...

08040560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8040560:	b580      	push	{r7, lr}
 8040562:	b088      	sub	sp, #32
 8040564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040566:	f107 030c 	add.w	r3, r7, #12
 804056a:	2200      	movs	r2, #0
 804056c:	601a      	str	r2, [r3, #0]
 804056e:	605a      	str	r2, [r3, #4]
 8040570:	609a      	str	r2, [r3, #8]
 8040572:	60da      	str	r2, [r3, #12]
 8040574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040576:	4b1a      	ldr	r3, [pc, #104]	@ (80405e0 <MX_GPIO_Init+0x80>)
 8040578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804057c:	4a18      	ldr	r2, [pc, #96]	@ (80405e0 <MX_GPIO_Init+0x80>)
 804057e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8040582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040586:	4b16      	ldr	r3, [pc, #88]	@ (80405e0 <MX_GPIO_Init+0x80>)
 8040588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804058c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040590:	60bb      	str	r3, [r7, #8]
 8040592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040594:	4b12      	ldr	r3, [pc, #72]	@ (80405e0 <MX_GPIO_Init+0x80>)
 8040596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804059a:	4a11      	ldr	r2, [pc, #68]	@ (80405e0 <MX_GPIO_Init+0x80>)
 804059c:	f043 0308 	orr.w	r3, r3, #8
 80405a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80405a4:	4b0e      	ldr	r3, [pc, #56]	@ (80405e0 <MX_GPIO_Init+0x80>)
 80405a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80405aa:	f003 0308 	and.w	r3, r3, #8
 80405ae:	607b      	str	r3, [r7, #4]
 80405b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80405b2:	2200      	movs	r2, #0
 80405b4:	2180      	movs	r1, #128	@ 0x80
 80405b6:	480b      	ldr	r0, [pc, #44]	@ (80405e4 <MX_GPIO_Init+0x84>)
 80405b8:	f001 fd06 	bl	8041fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80405bc:	2380      	movs	r3, #128	@ 0x80
 80405be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80405c0:	2301      	movs	r3, #1
 80405c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80405c4:	2300      	movs	r3, #0
 80405c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80405c8:	2300      	movs	r3, #0
 80405ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80405cc:	f107 030c 	add.w	r3, r7, #12
 80405d0:	4619      	mov	r1, r3
 80405d2:	4804      	ldr	r0, [pc, #16]	@ (80405e4 <MX_GPIO_Init+0x84>)
 80405d4:	f001 fb50 	bl	8041c78 <HAL_GPIO_Init>

}
 80405d8:	bf00      	nop
 80405da:	3720      	adds	r7, #32
 80405dc:	46bd      	mov	sp, r7
 80405de:	bd80      	pop	{r7, pc}
 80405e0:	58024400 	.word	0x58024400
 80405e4:	58020c00 	.word	0x58020c00

080405e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405e8:	b580      	push	{r7, lr}
 80405ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80405ec:	f000 f880 	bl	80406f0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405f0:	f000 fa4e 	bl	8040a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405f4:	f000 f80c 	bl	8040610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405f8:	f7ff ffb2 	bl	8040560 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80405fc:	f7ff fe9e 	bl	804033c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8040600:	f004 faf2 	bl	8044be8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8040604:	f7ff ff78 	bl	80404f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8040608:	f004 fb12 	bl	8044c30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 804060c:	bf00      	nop
 804060e:	e7fd      	b.n	804060c <main+0x24>

08040610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040610:	b580      	push	{r7, lr}
 8040612:	b09c      	sub	sp, #112	@ 0x70
 8040614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804061a:	224c      	movs	r2, #76	@ 0x4c
 804061c:	2100      	movs	r1, #0
 804061e:	4618      	mov	r0, r3
 8040620:	f007 f862 	bl	80476e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040624:	1d3b      	adds	r3, r7, #4
 8040626:	2220      	movs	r2, #32
 8040628:	2100      	movs	r1, #0
 804062a:	4618      	mov	r0, r3
 804062c:	f007 f85c 	bl	80476e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8040630:	2002      	movs	r0, #2
 8040632:	f001 fce3 	bl	8041ffc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040636:	2300      	movs	r3, #0
 8040638:	603b      	str	r3, [r7, #0]
 804063a:	4b2c      	ldr	r3, [pc, #176]	@ (80406ec <SystemClock_Config+0xdc>)
 804063c:	699b      	ldr	r3, [r3, #24]
 804063e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8040642:	4a2a      	ldr	r2, [pc, #168]	@ (80406ec <SystemClock_Config+0xdc>)
 8040644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040648:	6193      	str	r3, [r2, #24]
 804064a:	4b28      	ldr	r3, [pc, #160]	@ (80406ec <SystemClock_Config+0xdc>)
 804064c:	699b      	ldr	r3, [r3, #24]
 804064e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8040652:	603b      	str	r3, [r7, #0]
 8040654:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040656:	bf00      	nop
 8040658:	4b24      	ldr	r3, [pc, #144]	@ (80406ec <SystemClock_Config+0xdc>)
 804065a:	699b      	ldr	r3, [r3, #24]
 804065c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8040660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8040664:	d1f8      	bne.n	8040658 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040666:	2302      	movs	r3, #2
 8040668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 804066a:	2301      	movs	r3, #1
 804066c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 804066e:	2340      	movs	r3, #64	@ 0x40
 8040670:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040672:	2302      	movs	r3, #2
 8040674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8040676:	2300      	movs	r3, #0
 8040678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 804067a:	2304      	movs	r3, #4
 804067c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 804067e:	230c      	movs	r3, #12
 8040680:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8040682:	2302      	movs	r3, #2
 8040684:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8040686:	2304      	movs	r3, #4
 8040688:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 804068a:	2302      	movs	r3, #2
 804068c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 804068e:	230c      	movs	r3, #12
 8040690:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8040692:	2300      	movs	r3, #0
 8040694:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8040696:	2300      	movs	r3, #0
 8040698:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804069a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804069e:	4618      	mov	r0, r3
 80406a0:	f001 fce6 	bl	8042070 <HAL_RCC_OscConfig>
 80406a4:	4603      	mov	r3, r0
 80406a6:	2b00      	cmp	r3, #0
 80406a8:	d001      	beq.n	80406ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80406aa:	f000 f85f 	bl	804076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406ae:	233f      	movs	r3, #63	@ 0x3f
 80406b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80406b2:	2300      	movs	r3, #0
 80406b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80406b6:	2300      	movs	r3, #0
 80406b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80406ba:	2300      	movs	r3, #0
 80406bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80406be:	2300      	movs	r3, #0
 80406c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80406c2:	2300      	movs	r3, #0
 80406c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80406c6:	2300      	movs	r3, #0
 80406c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80406ca:	2300      	movs	r3, #0
 80406cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80406ce:	1d3b      	adds	r3, r7, #4
 80406d0:	2101      	movs	r1, #1
 80406d2:	4618      	mov	r0, r3
 80406d4:	f002 f8a6 	bl	8042824 <HAL_RCC_ClockConfig>
 80406d8:	4603      	mov	r3, r0
 80406da:	2b00      	cmp	r3, #0
 80406dc:	d001      	beq.n	80406e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80406de:	f000 f845 	bl	804076c <Error_Handler>
  }
}
 80406e2:	bf00      	nop
 80406e4:	3770      	adds	r7, #112	@ 0x70
 80406e6:	46bd      	mov	sp, r7
 80406e8:	bd80      	pop	{r7, pc}
 80406ea:	bf00      	nop
 80406ec:	58024800 	.word	0x58024800

080406f0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80406f0:	b580      	push	{r7, lr}
 80406f2:	b084      	sub	sp, #16
 80406f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80406f6:	463b      	mov	r3, r7
 80406f8:	2200      	movs	r2, #0
 80406fa:	601a      	str	r2, [r3, #0]
 80406fc:	605a      	str	r2, [r3, #4]
 80406fe:	609a      	str	r2, [r3, #8]
 8040700:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8040702:	f000 fb01 	bl	8040d08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8040706:	2301      	movs	r3, #1
 8040708:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 804070a:	2300      	movs	r3, #0
 804070c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 804070e:	2300      	movs	r3, #0
 8040710:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8040712:	231f      	movs	r3, #31
 8040714:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8040716:	2387      	movs	r3, #135	@ 0x87
 8040718:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 804071a:	2300      	movs	r3, #0
 804071c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 804071e:	2300      	movs	r3, #0
 8040720:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8040722:	2301      	movs	r3, #1
 8040724:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8040726:	2301      	movs	r3, #1
 8040728:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 804072a:	2300      	movs	r3, #0
 804072c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 804072e:	2300      	movs	r3, #0
 8040730:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8040732:	463b      	mov	r3, r7
 8040734:	4618      	mov	r0, r3
 8040736:	f000 fb1f 	bl	8040d78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 804073a:	2004      	movs	r0, #4
 804073c:	f000 fafc 	bl	8040d38 <HAL_MPU_Enable>

}
 8040740:	bf00      	nop
 8040742:	3710      	adds	r7, #16
 8040744:	46bd      	mov	sp, r7
 8040746:	bd80      	pop	{r7, pc}

08040748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040748:	b580      	push	{r7, lr}
 804074a:	b082      	sub	sp, #8
 804074c:	af00      	add	r7, sp, #0
 804074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8040750:	687b      	ldr	r3, [r7, #4]
 8040752:	681b      	ldr	r3, [r3, #0]
 8040754:	4a04      	ldr	r2, [pc, #16]	@ (8040768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040756:	4293      	cmp	r3, r2
 8040758:	d101      	bne.n	804075e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 804075a:	f000 f9d5 	bl	8040b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 804075e:	bf00      	nop
 8040760:	3708      	adds	r7, #8
 8040762:	46bd      	mov	sp, r7
 8040764:	bd80      	pop	{r7, pc}
 8040766:	bf00      	nop
 8040768:	40010000 	.word	0x40010000

0804076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804076c:	b480      	push	{r7}
 804076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040770:	b672      	cpsid	i
}
 8040772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8040774:	bf00      	nop
 8040776:	e7fd      	b.n	8040774 <Error_Handler+0x8>

08040778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040778:	b580      	push	{r7, lr}
 804077a:	b082      	sub	sp, #8
 804077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804077e:	4b0c      	ldr	r3, [pc, #48]	@ (80407b0 <HAL_MspInit+0x38>)
 8040780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040784:	4a0a      	ldr	r2, [pc, #40]	@ (80407b0 <HAL_MspInit+0x38>)
 8040786:	f043 0302 	orr.w	r3, r3, #2
 804078a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 804078e:	4b08      	ldr	r3, [pc, #32]	@ (80407b0 <HAL_MspInit+0x38>)
 8040790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040794:	f003 0302 	and.w	r3, r3, #2
 8040798:	607b      	str	r3, [r7, #4]
 804079a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 804079c:	2200      	movs	r2, #0
 804079e:	210f      	movs	r1, #15
 80407a0:	f06f 0001 	mvn.w	r0, #1
 80407a4:	f000 fa88 	bl	8040cb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80407a8:	bf00      	nop
 80407aa:	3708      	adds	r7, #8
 80407ac:	46bd      	mov	sp, r7
 80407ae:	bd80      	pop	{r7, pc}
 80407b0:	58024400 	.word	0x58024400

080407b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80407b4:	b580      	push	{r7, lr}
 80407b6:	b08e      	sub	sp, #56	@ 0x38
 80407b8:	af00      	add	r7, sp, #0
 80407ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80407bc:	687b      	ldr	r3, [r7, #4]
 80407be:	2b0f      	cmp	r3, #15
 80407c0:	d842      	bhi.n	8040848 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80407c2:	2200      	movs	r2, #0
 80407c4:	6879      	ldr	r1, [r7, #4]
 80407c6:	2019      	movs	r0, #25
 80407c8:	f000 fa76 	bl	8040cb8 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80407cc:	2019      	movs	r0, #25
 80407ce:	f000 fa8d 	bl	8040cec <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80407d2:	4a23      	ldr	r2, [pc, #140]	@ (8040860 <HAL_InitTick+0xac>)
 80407d4:	687b      	ldr	r3, [r7, #4]
 80407d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80407d8:	4b22      	ldr	r3, [pc, #136]	@ (8040864 <HAL_InitTick+0xb0>)
 80407da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80407de:	4a21      	ldr	r2, [pc, #132]	@ (8040864 <HAL_InitTick+0xb0>)
 80407e0:	f043 0301 	orr.w	r3, r3, #1
 80407e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80407e8:	4b1e      	ldr	r3, [pc, #120]	@ (8040864 <HAL_InitTick+0xb0>)
 80407ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80407ee:	f003 0301 	and.w	r3, r3, #1
 80407f2:	60bb      	str	r3, [r7, #8]
 80407f4:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80407f6:	f107 020c 	add.w	r2, r7, #12
 80407fa:	f107 0310 	add.w	r3, r7, #16
 80407fe:	4611      	mov	r1, r2
 8040800:	4618      	mov	r0, r3
 8040802:	f002 fb85 	bl	8042f10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8040806:	f002 fb6d 	bl	8042ee4 <HAL_RCC_GetPCLK2Freq>
 804080a:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 804080c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804080e:	4a16      	ldr	r2, [pc, #88]	@ (8040868 <HAL_InitTick+0xb4>)
 8040810:	fba2 2303 	umull	r2, r3, r2, r3
 8040814:	0c9b      	lsrs	r3, r3, #18
 8040816:	3b01      	subs	r3, #1
 8040818:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 804081a:	4b14      	ldr	r3, [pc, #80]	@ (804086c <HAL_InitTick+0xb8>)
 804081c:	4a14      	ldr	r2, [pc, #80]	@ (8040870 <HAL_InitTick+0xbc>)
 804081e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8040820:	4b12      	ldr	r3, [pc, #72]	@ (804086c <HAL_InitTick+0xb8>)
 8040822:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8040826:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8040828:	4a10      	ldr	r2, [pc, #64]	@ (804086c <HAL_InitTick+0xb8>)
 804082a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804082c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 804082e:	4b0f      	ldr	r3, [pc, #60]	@ (804086c <HAL_InitTick+0xb8>)
 8040830:	2200      	movs	r2, #0
 8040832:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040834:	4b0d      	ldr	r3, [pc, #52]	@ (804086c <HAL_InitTick+0xb8>)
 8040836:	2200      	movs	r2, #0
 8040838:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 804083a:	480c      	ldr	r0, [pc, #48]	@ (804086c <HAL_InitTick+0xb8>)
 804083c:	f003 feae 	bl	804459c <HAL_TIM_Base_Init>
 8040840:	4603      	mov	r3, r0
 8040842:	2b00      	cmp	r3, #0
 8040844:	d107      	bne.n	8040856 <HAL_InitTick+0xa2>
 8040846:	e001      	b.n	804084c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8040848:	2301      	movs	r3, #1
 804084a:	e005      	b.n	8040858 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 804084c:	4807      	ldr	r0, [pc, #28]	@ (804086c <HAL_InitTick+0xb8>)
 804084e:	f003 ff07 	bl	8044660 <HAL_TIM_Base_Start_IT>
 8040852:	4603      	mov	r3, r0
 8040854:	e000      	b.n	8040858 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8040856:	2301      	movs	r3, #1
}
 8040858:	4618      	mov	r0, r3
 804085a:	3738      	adds	r7, #56	@ 0x38
 804085c:	46bd      	mov	sp, r7
 804085e:	bd80      	pop	{r7, pc}
 8040860:	24000008 	.word	0x24000008
 8040864:	58024400 	.word	0x58024400
 8040868:	431bde83 	.word	0x431bde83
 804086c:	240000e0 	.word	0x240000e0
 8040870:	40010000 	.word	0x40010000

08040874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040874:	b480      	push	{r7}
 8040876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040878:	bf00      	nop
 804087a:	e7fd      	b.n	8040878 <NMI_Handler+0x4>

0804087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804087c:	b480      	push	{r7}
 804087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040880:	bf00      	nop
 8040882:	e7fd      	b.n	8040880 <HardFault_Handler+0x4>

08040884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040884:	b480      	push	{r7}
 8040886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040888:	bf00      	nop
 804088a:	e7fd      	b.n	8040888 <MemManage_Handler+0x4>

0804088c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804088c:	b480      	push	{r7}
 804088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040890:	bf00      	nop
 8040892:	e7fd      	b.n	8040890 <BusFault_Handler+0x4>

08040894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040894:	b480      	push	{r7}
 8040896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040898:	bf00      	nop
 804089a:	e7fd      	b.n	8040898 <UsageFault_Handler+0x4>

0804089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 804089c:	b480      	push	{r7}
 804089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80408a0:	bf00      	nop
 80408a2:	46bd      	mov	sp, r7
 80408a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408a8:	4770      	bx	lr
	...

080408ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80408ac:	b580      	push	{r7, lr}
 80408ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80408b0:	4802      	ldr	r0, [pc, #8]	@ (80408bc <FDCAN1_IT0_IRQHandler+0x10>)
 80408b2:	f000 fcdb 	bl	804126c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80408b6:	bf00      	nop
 80408b8:	bd80      	pop	{r7, pc}
 80408ba:	bf00      	nop
 80408bc:	24000038 	.word	0x24000038

080408c0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80408c0:	b580      	push	{r7, lr}
 80408c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80408c4:	4802      	ldr	r0, [pc, #8]	@ (80408d0 <FDCAN1_IT1_IRQHandler+0x10>)
 80408c6:	f000 fcd1 	bl	804126c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80408ca:	bf00      	nop
 80408cc:	bd80      	pop	{r7, pc}
 80408ce:	bf00      	nop
 80408d0:	24000038 	.word	0x24000038

080408d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80408d4:	b580      	push	{r7, lr}
 80408d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80408d8:	4802      	ldr	r0, [pc, #8]	@ (80408e4 <TIM1_UP_IRQHandler+0x10>)
 80408da:	f003 ff47 	bl	804476c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80408de:	bf00      	nop
 80408e0:	bd80      	pop	{r7, pc}
 80408e2:	bf00      	nop
 80408e4:	240000e0 	.word	0x240000e0

080408e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80408e8:	b480      	push	{r7}
 80408ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80408ec:	4b3e      	ldr	r3, [pc, #248]	@ (80409e8 <SystemInit+0x100>)
 80408ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80408f2:	4a3d      	ldr	r2, [pc, #244]	@ (80409e8 <SystemInit+0x100>)
 80408f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80408f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80408fc:	4b3b      	ldr	r3, [pc, #236]	@ (80409ec <SystemInit+0x104>)
 80408fe:	681b      	ldr	r3, [r3, #0]
 8040900:	f003 030f 	and.w	r3, r3, #15
 8040904:	2b06      	cmp	r3, #6
 8040906:	d807      	bhi.n	8040918 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040908:	4b38      	ldr	r3, [pc, #224]	@ (80409ec <SystemInit+0x104>)
 804090a:	681b      	ldr	r3, [r3, #0]
 804090c:	f023 030f 	bic.w	r3, r3, #15
 8040910:	4a36      	ldr	r2, [pc, #216]	@ (80409ec <SystemInit+0x104>)
 8040912:	f043 0307 	orr.w	r3, r3, #7
 8040916:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8040918:	4b35      	ldr	r3, [pc, #212]	@ (80409f0 <SystemInit+0x108>)
 804091a:	681b      	ldr	r3, [r3, #0]
 804091c:	4a34      	ldr	r2, [pc, #208]	@ (80409f0 <SystemInit+0x108>)
 804091e:	f043 0301 	orr.w	r3, r3, #1
 8040922:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8040924:	4b32      	ldr	r3, [pc, #200]	@ (80409f0 <SystemInit+0x108>)
 8040926:	2200      	movs	r2, #0
 8040928:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 804092a:	4b31      	ldr	r3, [pc, #196]	@ (80409f0 <SystemInit+0x108>)
 804092c:	681a      	ldr	r2, [r3, #0]
 804092e:	4930      	ldr	r1, [pc, #192]	@ (80409f0 <SystemInit+0x108>)
 8040930:	4b30      	ldr	r3, [pc, #192]	@ (80409f4 <SystemInit+0x10c>)
 8040932:	4013      	ands	r3, r2
 8040934:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8040936:	4b2d      	ldr	r3, [pc, #180]	@ (80409ec <SystemInit+0x104>)
 8040938:	681b      	ldr	r3, [r3, #0]
 804093a:	f003 0308 	and.w	r3, r3, #8
 804093e:	2b00      	cmp	r3, #0
 8040940:	d007      	beq.n	8040952 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040942:	4b2a      	ldr	r3, [pc, #168]	@ (80409ec <SystemInit+0x104>)
 8040944:	681b      	ldr	r3, [r3, #0]
 8040946:	f023 030f 	bic.w	r3, r3, #15
 804094a:	4a28      	ldr	r2, [pc, #160]	@ (80409ec <SystemInit+0x104>)
 804094c:	f043 0307 	orr.w	r3, r3, #7
 8040950:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040952:	4b27      	ldr	r3, [pc, #156]	@ (80409f0 <SystemInit+0x108>)
 8040954:	2200      	movs	r2, #0
 8040956:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040958:	4b25      	ldr	r3, [pc, #148]	@ (80409f0 <SystemInit+0x108>)
 804095a:	2200      	movs	r2, #0
 804095c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 804095e:	4b24      	ldr	r3, [pc, #144]	@ (80409f0 <SystemInit+0x108>)
 8040960:	2200      	movs	r2, #0
 8040962:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040964:	4b22      	ldr	r3, [pc, #136]	@ (80409f0 <SystemInit+0x108>)
 8040966:	4a24      	ldr	r2, [pc, #144]	@ (80409f8 <SystemInit+0x110>)
 8040968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804096a:	4b21      	ldr	r3, [pc, #132]	@ (80409f0 <SystemInit+0x108>)
 804096c:	4a23      	ldr	r2, [pc, #140]	@ (80409fc <SystemInit+0x114>)
 804096e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040970:	4b1f      	ldr	r3, [pc, #124]	@ (80409f0 <SystemInit+0x108>)
 8040972:	4a23      	ldr	r2, [pc, #140]	@ (8040a00 <SystemInit+0x118>)
 8040974:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8040976:	4b1e      	ldr	r3, [pc, #120]	@ (80409f0 <SystemInit+0x108>)
 8040978:	2200      	movs	r2, #0
 804097a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 804097c:	4b1c      	ldr	r3, [pc, #112]	@ (80409f0 <SystemInit+0x108>)
 804097e:	4a20      	ldr	r2, [pc, #128]	@ (8040a00 <SystemInit+0x118>)
 8040980:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040982:	4b1b      	ldr	r3, [pc, #108]	@ (80409f0 <SystemInit+0x108>)
 8040984:	2200      	movs	r2, #0
 8040986:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040988:	4b19      	ldr	r3, [pc, #100]	@ (80409f0 <SystemInit+0x108>)
 804098a:	4a1d      	ldr	r2, [pc, #116]	@ (8040a00 <SystemInit+0x118>)
 804098c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 804098e:	4b18      	ldr	r3, [pc, #96]	@ (80409f0 <SystemInit+0x108>)
 8040990:	2200      	movs	r2, #0
 8040992:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8040994:	4b16      	ldr	r3, [pc, #88]	@ (80409f0 <SystemInit+0x108>)
 8040996:	681b      	ldr	r3, [r3, #0]
 8040998:	4a15      	ldr	r2, [pc, #84]	@ (80409f0 <SystemInit+0x108>)
 804099a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804099e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80409a0:	4b13      	ldr	r3, [pc, #76]	@ (80409f0 <SystemInit+0x108>)
 80409a2:	2200      	movs	r2, #0
 80409a4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80409a6:	4b12      	ldr	r3, [pc, #72]	@ (80409f0 <SystemInit+0x108>)
 80409a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80409ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80409b0:	2b00      	cmp	r3, #0
 80409b2:	d113      	bne.n	80409dc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80409b4:	4b0e      	ldr	r3, [pc, #56]	@ (80409f0 <SystemInit+0x108>)
 80409b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80409ba:	4a0d      	ldr	r2, [pc, #52]	@ (80409f0 <SystemInit+0x108>)
 80409bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80409c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80409c4:	4b0f      	ldr	r3, [pc, #60]	@ (8040a04 <SystemInit+0x11c>)
 80409c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80409ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80409cc:	4b08      	ldr	r3, [pc, #32]	@ (80409f0 <SystemInit+0x108>)
 80409ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80409d2:	4a07      	ldr	r2, [pc, #28]	@ (80409f0 <SystemInit+0x108>)
 80409d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80409d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80409dc:	bf00      	nop
 80409de:	46bd      	mov	sp, r7
 80409e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409e4:	4770      	bx	lr
 80409e6:	bf00      	nop
 80409e8:	e000ed00 	.word	0xe000ed00
 80409ec:	52002000 	.word	0x52002000
 80409f0:	58024400 	.word	0x58024400
 80409f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80409f8:	02020200 	.word	0x02020200
 80409fc:	01ff0000 	.word	0x01ff0000
 8040a00:	01010280 	.word	0x01010280
 8040a04:	52004000 	.word	0x52004000

08040a08 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8040a08:	b480      	push	{r7}
 8040a0a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8040a0c:	4b09      	ldr	r3, [pc, #36]	@ (8040a34 <ExitRun0Mode+0x2c>)
 8040a0e:	68db      	ldr	r3, [r3, #12]
 8040a10:	4a08      	ldr	r2, [pc, #32]	@ (8040a34 <ExitRun0Mode+0x2c>)
 8040a12:	f043 0302 	orr.w	r3, r3, #2
 8040a16:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8040a18:	bf00      	nop
 8040a1a:	4b06      	ldr	r3, [pc, #24]	@ (8040a34 <ExitRun0Mode+0x2c>)
 8040a1c:	685b      	ldr	r3, [r3, #4]
 8040a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8040a22:	2b00      	cmp	r3, #0
 8040a24:	d0f9      	beq.n	8040a1a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8040a26:	bf00      	nop
 8040a28:	bf00      	nop
 8040a2a:	46bd      	mov	sp, r7
 8040a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a30:	4770      	bx	lr
 8040a32:	bf00      	nop
 8040a34:	58024800 	.word	0x58024800

08040a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040a38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8040a74 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8040a3c:	f7ff ffe4 	bl	8040a08 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8040a40:	f7ff ff52 	bl	80408e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040a44:	480c      	ldr	r0, [pc, #48]	@ (8040a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040a46:	490d      	ldr	r1, [pc, #52]	@ (8040a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040a48:	4a0d      	ldr	r2, [pc, #52]	@ (8040a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040a4c:	e002      	b.n	8040a54 <LoopCopyDataInit>

08040a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040a52:	3304      	adds	r3, #4

08040a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040a58:	d3f9      	bcc.n	8040a4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8040a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8040a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040a60:	e001      	b.n	8040a66 <LoopFillZerobss>

08040a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040a64:	3204      	adds	r2, #4

08040a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040a68:	d3fb      	bcc.n	8040a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040a6a:	f006 fe45 	bl	80476f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040a6e:	f7ff fdbb 	bl	80405e8 <main>
  bx  lr
 8040a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040a74:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8040a78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040a7c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8040a80:	0804785c 	.word	0x0804785c
  ldr r2, =_sbss
 8040a84:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8040a88:	24004a80 	.word	0x24004a80

08040a8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040a8c:	e7fe      	b.n	8040a8c <ADC3_IRQHandler>
	...

08040a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040a90:	b580      	push	{r7, lr}
 8040a92:	b082      	sub	sp, #8
 8040a94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040a96:	2003      	movs	r0, #3
 8040a98:	f000 f903 	bl	8040ca2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040a9c:	f002 f878 	bl	8042b90 <HAL_RCC_GetSysClockFreq>
 8040aa0:	4602      	mov	r2, r0
 8040aa2:	4b15      	ldr	r3, [pc, #84]	@ (8040af8 <HAL_Init+0x68>)
 8040aa4:	699b      	ldr	r3, [r3, #24]
 8040aa6:	0a1b      	lsrs	r3, r3, #8
 8040aa8:	f003 030f 	and.w	r3, r3, #15
 8040aac:	4913      	ldr	r1, [pc, #76]	@ (8040afc <HAL_Init+0x6c>)
 8040aae:	5ccb      	ldrb	r3, [r1, r3]
 8040ab0:	f003 031f 	and.w	r3, r3, #31
 8040ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8040ab8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040aba:	4b0f      	ldr	r3, [pc, #60]	@ (8040af8 <HAL_Init+0x68>)
 8040abc:	699b      	ldr	r3, [r3, #24]
 8040abe:	f003 030f 	and.w	r3, r3, #15
 8040ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8040afc <HAL_Init+0x6c>)
 8040ac4:	5cd3      	ldrb	r3, [r2, r3]
 8040ac6:	f003 031f 	and.w	r3, r3, #31
 8040aca:	687a      	ldr	r2, [r7, #4]
 8040acc:	fa22 f303 	lsr.w	r3, r2, r3
 8040ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8040b00 <HAL_Init+0x70>)
 8040ad2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8040ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8040b04 <HAL_Init+0x74>)
 8040ad6:	687b      	ldr	r3, [r7, #4]
 8040ad8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040ada:	200f      	movs	r0, #15
 8040adc:	f7ff fe6a 	bl	80407b4 <HAL_InitTick>
 8040ae0:	4603      	mov	r3, r0
 8040ae2:	2b00      	cmp	r3, #0
 8040ae4:	d001      	beq.n	8040aea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8040ae6:	2301      	movs	r3, #1
 8040ae8:	e002      	b.n	8040af0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8040aea:	f7ff fe45 	bl	8040778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040aee:	2300      	movs	r3, #0
}
 8040af0:	4618      	mov	r0, r3
 8040af2:	3708      	adds	r7, #8
 8040af4:	46bd      	mov	sp, r7
 8040af6:	bd80      	pop	{r7, pc}
 8040af8:	58024400 	.word	0x58024400
 8040afc:	08047834 	.word	0x08047834
 8040b00:	24000004 	.word	0x24000004
 8040b04:	24000000 	.word	0x24000000

08040b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b08:	b480      	push	{r7}
 8040b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040b0c:	4b06      	ldr	r3, [pc, #24]	@ (8040b28 <HAL_IncTick+0x20>)
 8040b0e:	781b      	ldrb	r3, [r3, #0]
 8040b10:	461a      	mov	r2, r3
 8040b12:	4b06      	ldr	r3, [pc, #24]	@ (8040b2c <HAL_IncTick+0x24>)
 8040b14:	681b      	ldr	r3, [r3, #0]
 8040b16:	4413      	add	r3, r2
 8040b18:	4a04      	ldr	r2, [pc, #16]	@ (8040b2c <HAL_IncTick+0x24>)
 8040b1a:	6013      	str	r3, [r2, #0]
}
 8040b1c:	bf00      	nop
 8040b1e:	46bd      	mov	sp, r7
 8040b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b24:	4770      	bx	lr
 8040b26:	bf00      	nop
 8040b28:	2400000c 	.word	0x2400000c
 8040b2c:	2400012c 	.word	0x2400012c

08040b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b30:	b480      	push	{r7}
 8040b32:	af00      	add	r7, sp, #0
  return uwTick;
 8040b34:	4b03      	ldr	r3, [pc, #12]	@ (8040b44 <HAL_GetTick+0x14>)
 8040b36:	681b      	ldr	r3, [r3, #0]
}
 8040b38:	4618      	mov	r0, r3
 8040b3a:	46bd      	mov	sp, r7
 8040b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b40:	4770      	bx	lr
 8040b42:	bf00      	nop
 8040b44:	2400012c 	.word	0x2400012c

08040b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040b48:	b480      	push	{r7}
 8040b4a:	b085      	sub	sp, #20
 8040b4c:	af00      	add	r7, sp, #0
 8040b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040b50:	687b      	ldr	r3, [r7, #4]
 8040b52:	f003 0307 	and.w	r3, r3, #7
 8040b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040b58:	4b0b      	ldr	r3, [pc, #44]	@ (8040b88 <__NVIC_SetPriorityGrouping+0x40>)
 8040b5a:	68db      	ldr	r3, [r3, #12]
 8040b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040b5e:	68ba      	ldr	r2, [r7, #8]
 8040b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040b64:	4013      	ands	r3, r2
 8040b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040b68:	68fb      	ldr	r3, [r7, #12]
 8040b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040b6c:	68bb      	ldr	r3, [r7, #8]
 8040b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040b70:	4b06      	ldr	r3, [pc, #24]	@ (8040b8c <__NVIC_SetPriorityGrouping+0x44>)
 8040b72:	4313      	orrs	r3, r2
 8040b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040b76:	4a04      	ldr	r2, [pc, #16]	@ (8040b88 <__NVIC_SetPriorityGrouping+0x40>)
 8040b78:	68bb      	ldr	r3, [r7, #8]
 8040b7a:	60d3      	str	r3, [r2, #12]
}
 8040b7c:	bf00      	nop
 8040b7e:	3714      	adds	r7, #20
 8040b80:	46bd      	mov	sp, r7
 8040b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b86:	4770      	bx	lr
 8040b88:	e000ed00 	.word	0xe000ed00
 8040b8c:	05fa0000 	.word	0x05fa0000

08040b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040b90:	b480      	push	{r7}
 8040b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040b94:	4b04      	ldr	r3, [pc, #16]	@ (8040ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8040b96:	68db      	ldr	r3, [r3, #12]
 8040b98:	0a1b      	lsrs	r3, r3, #8
 8040b9a:	f003 0307 	and.w	r3, r3, #7
}
 8040b9e:	4618      	mov	r0, r3
 8040ba0:	46bd      	mov	sp, r7
 8040ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ba6:	4770      	bx	lr
 8040ba8:	e000ed00 	.word	0xe000ed00

08040bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040bac:	b480      	push	{r7}
 8040bae:	b083      	sub	sp, #12
 8040bb0:	af00      	add	r7, sp, #0
 8040bb2:	4603      	mov	r3, r0
 8040bb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8040bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040bba:	2b00      	cmp	r3, #0
 8040bbc:	db0b      	blt.n	8040bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040bbe:	88fb      	ldrh	r3, [r7, #6]
 8040bc0:	f003 021f 	and.w	r2, r3, #31
 8040bc4:	4907      	ldr	r1, [pc, #28]	@ (8040be4 <__NVIC_EnableIRQ+0x38>)
 8040bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040bca:	095b      	lsrs	r3, r3, #5
 8040bcc:	2001      	movs	r0, #1
 8040bce:	fa00 f202 	lsl.w	r2, r0, r2
 8040bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040bd6:	bf00      	nop
 8040bd8:	370c      	adds	r7, #12
 8040bda:	46bd      	mov	sp, r7
 8040bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040be0:	4770      	bx	lr
 8040be2:	bf00      	nop
 8040be4:	e000e100 	.word	0xe000e100

08040be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040be8:	b480      	push	{r7}
 8040bea:	b083      	sub	sp, #12
 8040bec:	af00      	add	r7, sp, #0
 8040bee:	4603      	mov	r3, r0
 8040bf0:	6039      	str	r1, [r7, #0]
 8040bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8040bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040bf8:	2b00      	cmp	r3, #0
 8040bfa:	db0a      	blt.n	8040c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040bfc:	683b      	ldr	r3, [r7, #0]
 8040bfe:	b2da      	uxtb	r2, r3
 8040c00:	490c      	ldr	r1, [pc, #48]	@ (8040c34 <__NVIC_SetPriority+0x4c>)
 8040c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040c06:	0112      	lsls	r2, r2, #4
 8040c08:	b2d2      	uxtb	r2, r2
 8040c0a:	440b      	add	r3, r1
 8040c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c10:	e00a      	b.n	8040c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c12:	683b      	ldr	r3, [r7, #0]
 8040c14:	b2da      	uxtb	r2, r3
 8040c16:	4908      	ldr	r1, [pc, #32]	@ (8040c38 <__NVIC_SetPriority+0x50>)
 8040c18:	88fb      	ldrh	r3, [r7, #6]
 8040c1a:	f003 030f 	and.w	r3, r3, #15
 8040c1e:	3b04      	subs	r3, #4
 8040c20:	0112      	lsls	r2, r2, #4
 8040c22:	b2d2      	uxtb	r2, r2
 8040c24:	440b      	add	r3, r1
 8040c26:	761a      	strb	r2, [r3, #24]
}
 8040c28:	bf00      	nop
 8040c2a:	370c      	adds	r7, #12
 8040c2c:	46bd      	mov	sp, r7
 8040c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c32:	4770      	bx	lr
 8040c34:	e000e100 	.word	0xe000e100
 8040c38:	e000ed00 	.word	0xe000ed00

08040c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040c3c:	b480      	push	{r7}
 8040c3e:	b089      	sub	sp, #36	@ 0x24
 8040c40:	af00      	add	r7, sp, #0
 8040c42:	60f8      	str	r0, [r7, #12]
 8040c44:	60b9      	str	r1, [r7, #8]
 8040c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040c48:	68fb      	ldr	r3, [r7, #12]
 8040c4a:	f003 0307 	and.w	r3, r3, #7
 8040c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040c50:	69fb      	ldr	r3, [r7, #28]
 8040c52:	f1c3 0307 	rsb	r3, r3, #7
 8040c56:	2b04      	cmp	r3, #4
 8040c58:	bf28      	it	cs
 8040c5a:	2304      	movcs	r3, #4
 8040c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040c5e:	69fb      	ldr	r3, [r7, #28]
 8040c60:	3304      	adds	r3, #4
 8040c62:	2b06      	cmp	r3, #6
 8040c64:	d902      	bls.n	8040c6c <NVIC_EncodePriority+0x30>
 8040c66:	69fb      	ldr	r3, [r7, #28]
 8040c68:	3b03      	subs	r3, #3
 8040c6a:	e000      	b.n	8040c6e <NVIC_EncodePriority+0x32>
 8040c6c:	2300      	movs	r3, #0
 8040c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c70:	f04f 32ff 	mov.w	r2, #4294967295
 8040c74:	69bb      	ldr	r3, [r7, #24]
 8040c76:	fa02 f303 	lsl.w	r3, r2, r3
 8040c7a:	43da      	mvns	r2, r3
 8040c7c:	68bb      	ldr	r3, [r7, #8]
 8040c7e:	401a      	ands	r2, r3
 8040c80:	697b      	ldr	r3, [r7, #20]
 8040c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040c84:	f04f 31ff 	mov.w	r1, #4294967295
 8040c88:	697b      	ldr	r3, [r7, #20]
 8040c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8040c8e:	43d9      	mvns	r1, r3
 8040c90:	687b      	ldr	r3, [r7, #4]
 8040c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c94:	4313      	orrs	r3, r2
         );
}
 8040c96:	4618      	mov	r0, r3
 8040c98:	3724      	adds	r7, #36	@ 0x24
 8040c9a:	46bd      	mov	sp, r7
 8040c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ca0:	4770      	bx	lr

08040ca2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040ca2:	b580      	push	{r7, lr}
 8040ca4:	b082      	sub	sp, #8
 8040ca6:	af00      	add	r7, sp, #0
 8040ca8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040caa:	6878      	ldr	r0, [r7, #4]
 8040cac:	f7ff ff4c 	bl	8040b48 <__NVIC_SetPriorityGrouping>
}
 8040cb0:	bf00      	nop
 8040cb2:	3708      	adds	r7, #8
 8040cb4:	46bd      	mov	sp, r7
 8040cb6:	bd80      	pop	{r7, pc}

08040cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040cb8:	b580      	push	{r7, lr}
 8040cba:	b086      	sub	sp, #24
 8040cbc:	af00      	add	r7, sp, #0
 8040cbe:	4603      	mov	r3, r0
 8040cc0:	60b9      	str	r1, [r7, #8]
 8040cc2:	607a      	str	r2, [r7, #4]
 8040cc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040cc6:	f7ff ff63 	bl	8040b90 <__NVIC_GetPriorityGrouping>
 8040cca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040ccc:	687a      	ldr	r2, [r7, #4]
 8040cce:	68b9      	ldr	r1, [r7, #8]
 8040cd0:	6978      	ldr	r0, [r7, #20]
 8040cd2:	f7ff ffb3 	bl	8040c3c <NVIC_EncodePriority>
 8040cd6:	4602      	mov	r2, r0
 8040cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8040cdc:	4611      	mov	r1, r2
 8040cde:	4618      	mov	r0, r3
 8040ce0:	f7ff ff82 	bl	8040be8 <__NVIC_SetPriority>
}
 8040ce4:	bf00      	nop
 8040ce6:	3718      	adds	r7, #24
 8040ce8:	46bd      	mov	sp, r7
 8040cea:	bd80      	pop	{r7, pc}

08040cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040cec:	b580      	push	{r7, lr}
 8040cee:	b082      	sub	sp, #8
 8040cf0:	af00      	add	r7, sp, #0
 8040cf2:	4603      	mov	r3, r0
 8040cf4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040cfa:	4618      	mov	r0, r3
 8040cfc:	f7ff ff56 	bl	8040bac <__NVIC_EnableIRQ>
}
 8040d00:	bf00      	nop
 8040d02:	3708      	adds	r7, #8
 8040d04:	46bd      	mov	sp, r7
 8040d06:	bd80      	pop	{r7, pc}

08040d08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8040d08:	b480      	push	{r7}
 8040d0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8040d0c:	f3bf 8f5f 	dmb	sy
}
 8040d10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8040d12:	4b07      	ldr	r3, [pc, #28]	@ (8040d30 <HAL_MPU_Disable+0x28>)
 8040d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040d16:	4a06      	ldr	r2, [pc, #24]	@ (8040d30 <HAL_MPU_Disable+0x28>)
 8040d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040d1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8040d1e:	4b05      	ldr	r3, [pc, #20]	@ (8040d34 <HAL_MPU_Disable+0x2c>)
 8040d20:	2200      	movs	r2, #0
 8040d22:	605a      	str	r2, [r3, #4]
}
 8040d24:	bf00      	nop
 8040d26:	46bd      	mov	sp, r7
 8040d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d2c:	4770      	bx	lr
 8040d2e:	bf00      	nop
 8040d30:	e000ed00 	.word	0xe000ed00
 8040d34:	e000ed90 	.word	0xe000ed90

08040d38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8040d38:	b480      	push	{r7}
 8040d3a:	b083      	sub	sp, #12
 8040d3c:	af00      	add	r7, sp, #0
 8040d3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8040d40:	4a0b      	ldr	r2, [pc, #44]	@ (8040d70 <HAL_MPU_Enable+0x38>)
 8040d42:	687b      	ldr	r3, [r7, #4]
 8040d44:	f043 0301 	orr.w	r3, r3, #1
 8040d48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8040d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8040d74 <HAL_MPU_Enable+0x3c>)
 8040d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040d4e:	4a09      	ldr	r2, [pc, #36]	@ (8040d74 <HAL_MPU_Enable+0x3c>)
 8040d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040d54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8040d56:	f3bf 8f4f 	dsb	sy
}
 8040d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8040d5c:	f3bf 8f6f 	isb	sy
}
 8040d60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8040d62:	bf00      	nop
 8040d64:	370c      	adds	r7, #12
 8040d66:	46bd      	mov	sp, r7
 8040d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d6c:	4770      	bx	lr
 8040d6e:	bf00      	nop
 8040d70:	e000ed90 	.word	0xe000ed90
 8040d74:	e000ed00 	.word	0xe000ed00

08040d78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8040d78:	b480      	push	{r7}
 8040d7a:	b083      	sub	sp, #12
 8040d7c:	af00      	add	r7, sp, #0
 8040d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8040d80:	687b      	ldr	r3, [r7, #4]
 8040d82:	785a      	ldrb	r2, [r3, #1]
 8040d84:	4b1b      	ldr	r3, [pc, #108]	@ (8040df4 <HAL_MPU_ConfigRegion+0x7c>)
 8040d86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8040d88:	4b1a      	ldr	r3, [pc, #104]	@ (8040df4 <HAL_MPU_ConfigRegion+0x7c>)
 8040d8a:	691b      	ldr	r3, [r3, #16]
 8040d8c:	4a19      	ldr	r2, [pc, #100]	@ (8040df4 <HAL_MPU_ConfigRegion+0x7c>)
 8040d8e:	f023 0301 	bic.w	r3, r3, #1
 8040d92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8040d94:	4a17      	ldr	r2, [pc, #92]	@ (8040df4 <HAL_MPU_ConfigRegion+0x7c>)
 8040d96:	687b      	ldr	r3, [r7, #4]
 8040d98:	685b      	ldr	r3, [r3, #4]
 8040d9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040d9c:	687b      	ldr	r3, [r7, #4]
 8040d9e:	7b1b      	ldrb	r3, [r3, #12]
 8040da0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8040da2:	687b      	ldr	r3, [r7, #4]
 8040da4:	7adb      	ldrb	r3, [r3, #11]
 8040da6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8040daa:	687b      	ldr	r3, [r7, #4]
 8040dac:	7a9b      	ldrb	r3, [r3, #10]
 8040dae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8040db0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8040db2:	687b      	ldr	r3, [r7, #4]
 8040db4:	7b5b      	ldrb	r3, [r3, #13]
 8040db6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8040db8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8040dba:	687b      	ldr	r3, [r7, #4]
 8040dbc:	7b9b      	ldrb	r3, [r3, #14]
 8040dbe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8040dc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8040dc2:	687b      	ldr	r3, [r7, #4]
 8040dc4:	7bdb      	ldrb	r3, [r3, #15]
 8040dc6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8040dc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8040dca:	687b      	ldr	r3, [r7, #4]
 8040dcc:	7a5b      	ldrb	r3, [r3, #9]
 8040dce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8040dd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8040dd2:	687b      	ldr	r3, [r7, #4]
 8040dd4:	7a1b      	ldrb	r3, [r3, #8]
 8040dd6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8040dd8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8040dda:	687a      	ldr	r2, [r7, #4]
 8040ddc:	7812      	ldrb	r2, [r2, #0]
 8040dde:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040de0:	4a04      	ldr	r2, [pc, #16]	@ (8040df4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8040de2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8040de4:	6113      	str	r3, [r2, #16]
}
 8040de6:	bf00      	nop
 8040de8:	370c      	adds	r7, #12
 8040dea:	46bd      	mov	sp, r7
 8040dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040df0:	4770      	bx	lr
 8040df2:	bf00      	nop
 8040df4:	e000ed90 	.word	0xe000ed90

08040df8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8040df8:	b580      	push	{r7, lr}
 8040dfa:	b098      	sub	sp, #96	@ 0x60
 8040dfc:	af00      	add	r7, sp, #0
 8040dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8040e00:	4a84      	ldr	r2, [pc, #528]	@ (8041014 <HAL_FDCAN_Init+0x21c>)
 8040e02:	f107 030c 	add.w	r3, r7, #12
 8040e06:	4611      	mov	r1, r2
 8040e08:	224c      	movs	r2, #76	@ 0x4c
 8040e0a:	4618      	mov	r0, r3
 8040e0c:	f006 fc98 	bl	8047740 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8040e10:	687b      	ldr	r3, [r7, #4]
 8040e12:	2b00      	cmp	r3, #0
 8040e14:	d101      	bne.n	8040e1a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8040e16:	2301      	movs	r3, #1
 8040e18:	e1c6      	b.n	80411a8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8040e1a:	687b      	ldr	r3, [r7, #4]
 8040e1c:	681b      	ldr	r3, [r3, #0]
 8040e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8041018 <HAL_FDCAN_Init+0x220>)
 8040e20:	4293      	cmp	r3, r2
 8040e22:	d106      	bne.n	8040e32 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8040e24:	687b      	ldr	r3, [r7, #4]
 8040e26:	681b      	ldr	r3, [r3, #0]
 8040e28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8040e2c:	461a      	mov	r2, r3
 8040e2e:	687b      	ldr	r3, [r7, #4]
 8040e30:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8040e32:	687b      	ldr	r3, [r7, #4]
 8040e34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8040e38:	b2db      	uxtb	r3, r3
 8040e3a:	2b00      	cmp	r3, #0
 8040e3c:	d106      	bne.n	8040e4c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8040e3e:	687b      	ldr	r3, [r7, #4]
 8040e40:	2200      	movs	r2, #0
 8040e42:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8040e46:	6878      	ldr	r0, [r7, #4]
 8040e48:	f7ff fade 	bl	8040408 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8040e4c:	687b      	ldr	r3, [r7, #4]
 8040e4e:	681b      	ldr	r3, [r3, #0]
 8040e50:	699a      	ldr	r2, [r3, #24]
 8040e52:	687b      	ldr	r3, [r7, #4]
 8040e54:	681b      	ldr	r3, [r3, #0]
 8040e56:	f022 0210 	bic.w	r2, r2, #16
 8040e5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8040e5c:	f7ff fe68 	bl	8040b30 <HAL_GetTick>
 8040e60:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8040e62:	e014      	b.n	8040e8e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8040e64:	f7ff fe64 	bl	8040b30 <HAL_GetTick>
 8040e68:	4602      	mov	r2, r0
 8040e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8040e6c:	1ad3      	subs	r3, r2, r3
 8040e6e:	2b0a      	cmp	r3, #10
 8040e70:	d90d      	bls.n	8040e8e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8040e72:	687b      	ldr	r3, [r7, #4]
 8040e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8040e78:	f043 0201 	orr.w	r2, r3, #1
 8040e7c:	687b      	ldr	r3, [r7, #4]
 8040e7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8040e82:	687b      	ldr	r3, [r7, #4]
 8040e84:	2203      	movs	r2, #3
 8040e86:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8040e8a:	2301      	movs	r3, #1
 8040e8c:	e18c      	b.n	80411a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8040e8e:	687b      	ldr	r3, [r7, #4]
 8040e90:	681b      	ldr	r3, [r3, #0]
 8040e92:	699b      	ldr	r3, [r3, #24]
 8040e94:	f003 0308 	and.w	r3, r3, #8
 8040e98:	2b08      	cmp	r3, #8
 8040e9a:	d0e3      	beq.n	8040e64 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8040e9c:	687b      	ldr	r3, [r7, #4]
 8040e9e:	681b      	ldr	r3, [r3, #0]
 8040ea0:	699a      	ldr	r2, [r3, #24]
 8040ea2:	687b      	ldr	r3, [r7, #4]
 8040ea4:	681b      	ldr	r3, [r3, #0]
 8040ea6:	f042 0201 	orr.w	r2, r2, #1
 8040eaa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8040eac:	f7ff fe40 	bl	8040b30 <HAL_GetTick>
 8040eb0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8040eb2:	e014      	b.n	8040ede <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8040eb4:	f7ff fe3c 	bl	8040b30 <HAL_GetTick>
 8040eb8:	4602      	mov	r2, r0
 8040eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8040ebc:	1ad3      	subs	r3, r2, r3
 8040ebe:	2b0a      	cmp	r3, #10
 8040ec0:	d90d      	bls.n	8040ede <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8040ec2:	687b      	ldr	r3, [r7, #4]
 8040ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8040ec8:	f043 0201 	orr.w	r2, r3, #1
 8040ecc:	687b      	ldr	r3, [r7, #4]
 8040ece:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8040ed2:	687b      	ldr	r3, [r7, #4]
 8040ed4:	2203      	movs	r2, #3
 8040ed6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8040eda:	2301      	movs	r3, #1
 8040edc:	e164      	b.n	80411a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8040ede:	687b      	ldr	r3, [r7, #4]
 8040ee0:	681b      	ldr	r3, [r3, #0]
 8040ee2:	699b      	ldr	r3, [r3, #24]
 8040ee4:	f003 0301 	and.w	r3, r3, #1
 8040ee8:	2b00      	cmp	r3, #0
 8040eea:	d0e3      	beq.n	8040eb4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8040eec:	687b      	ldr	r3, [r7, #4]
 8040eee:	681b      	ldr	r3, [r3, #0]
 8040ef0:	699a      	ldr	r2, [r3, #24]
 8040ef2:	687b      	ldr	r3, [r7, #4]
 8040ef4:	681b      	ldr	r3, [r3, #0]
 8040ef6:	f042 0202 	orr.w	r2, r2, #2
 8040efa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8040efc:	687b      	ldr	r3, [r7, #4]
 8040efe:	7c1b      	ldrb	r3, [r3, #16]
 8040f00:	2b01      	cmp	r3, #1
 8040f02:	d108      	bne.n	8040f16 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8040f04:	687b      	ldr	r3, [r7, #4]
 8040f06:	681b      	ldr	r3, [r3, #0]
 8040f08:	699a      	ldr	r2, [r3, #24]
 8040f0a:	687b      	ldr	r3, [r7, #4]
 8040f0c:	681b      	ldr	r3, [r3, #0]
 8040f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8040f12:	619a      	str	r2, [r3, #24]
 8040f14:	e007      	b.n	8040f26 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8040f16:	687b      	ldr	r3, [r7, #4]
 8040f18:	681b      	ldr	r3, [r3, #0]
 8040f1a:	699a      	ldr	r2, [r3, #24]
 8040f1c:	687b      	ldr	r3, [r7, #4]
 8040f1e:	681b      	ldr	r3, [r3, #0]
 8040f20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8040f24:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8040f26:	687b      	ldr	r3, [r7, #4]
 8040f28:	7c5b      	ldrb	r3, [r3, #17]
 8040f2a:	2b01      	cmp	r3, #1
 8040f2c:	d108      	bne.n	8040f40 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8040f2e:	687b      	ldr	r3, [r7, #4]
 8040f30:	681b      	ldr	r3, [r3, #0]
 8040f32:	699a      	ldr	r2, [r3, #24]
 8040f34:	687b      	ldr	r3, [r7, #4]
 8040f36:	681b      	ldr	r3, [r3, #0]
 8040f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8040f3c:	619a      	str	r2, [r3, #24]
 8040f3e:	e007      	b.n	8040f50 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8040f40:	687b      	ldr	r3, [r7, #4]
 8040f42:	681b      	ldr	r3, [r3, #0]
 8040f44:	699a      	ldr	r2, [r3, #24]
 8040f46:	687b      	ldr	r3, [r7, #4]
 8040f48:	681b      	ldr	r3, [r3, #0]
 8040f4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8040f4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8040f50:	687b      	ldr	r3, [r7, #4]
 8040f52:	7c9b      	ldrb	r3, [r3, #18]
 8040f54:	2b01      	cmp	r3, #1
 8040f56:	d108      	bne.n	8040f6a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8040f58:	687b      	ldr	r3, [r7, #4]
 8040f5a:	681b      	ldr	r3, [r3, #0]
 8040f5c:	699a      	ldr	r2, [r3, #24]
 8040f5e:	687b      	ldr	r3, [r7, #4]
 8040f60:	681b      	ldr	r3, [r3, #0]
 8040f62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8040f66:	619a      	str	r2, [r3, #24]
 8040f68:	e007      	b.n	8040f7a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8040f6a:	687b      	ldr	r3, [r7, #4]
 8040f6c:	681b      	ldr	r3, [r3, #0]
 8040f6e:	699a      	ldr	r2, [r3, #24]
 8040f70:	687b      	ldr	r3, [r7, #4]
 8040f72:	681b      	ldr	r3, [r3, #0]
 8040f74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8040f78:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8040f7a:	687b      	ldr	r3, [r7, #4]
 8040f7c:	681b      	ldr	r3, [r3, #0]
 8040f7e:	699b      	ldr	r3, [r3, #24]
 8040f80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8040f84:	687b      	ldr	r3, [r7, #4]
 8040f86:	689a      	ldr	r2, [r3, #8]
 8040f88:	687b      	ldr	r3, [r7, #4]
 8040f8a:	681b      	ldr	r3, [r3, #0]
 8040f8c:	430a      	orrs	r2, r1
 8040f8e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8040f90:	687b      	ldr	r3, [r7, #4]
 8040f92:	681b      	ldr	r3, [r3, #0]
 8040f94:	699a      	ldr	r2, [r3, #24]
 8040f96:	687b      	ldr	r3, [r7, #4]
 8040f98:	681b      	ldr	r3, [r3, #0]
 8040f9a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8040f9e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8040fa0:	687b      	ldr	r3, [r7, #4]
 8040fa2:	681b      	ldr	r3, [r3, #0]
 8040fa4:	691a      	ldr	r2, [r3, #16]
 8040fa6:	687b      	ldr	r3, [r7, #4]
 8040fa8:	681b      	ldr	r3, [r3, #0]
 8040faa:	f022 0210 	bic.w	r2, r2, #16
 8040fae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8040fb0:	687b      	ldr	r3, [r7, #4]
 8040fb2:	68db      	ldr	r3, [r3, #12]
 8040fb4:	2b01      	cmp	r3, #1
 8040fb6:	d108      	bne.n	8040fca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8040fb8:	687b      	ldr	r3, [r7, #4]
 8040fba:	681b      	ldr	r3, [r3, #0]
 8040fbc:	699a      	ldr	r2, [r3, #24]
 8040fbe:	687b      	ldr	r3, [r7, #4]
 8040fc0:	681b      	ldr	r3, [r3, #0]
 8040fc2:	f042 0204 	orr.w	r2, r2, #4
 8040fc6:	619a      	str	r2, [r3, #24]
 8040fc8:	e030      	b.n	804102c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8040fca:	687b      	ldr	r3, [r7, #4]
 8040fcc:	68db      	ldr	r3, [r3, #12]
 8040fce:	2b00      	cmp	r3, #0
 8040fd0:	d02c      	beq.n	804102c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8040fd2:	687b      	ldr	r3, [r7, #4]
 8040fd4:	68db      	ldr	r3, [r3, #12]
 8040fd6:	2b02      	cmp	r3, #2
 8040fd8:	d020      	beq.n	804101c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8040fda:	687b      	ldr	r3, [r7, #4]
 8040fdc:	681b      	ldr	r3, [r3, #0]
 8040fde:	699a      	ldr	r2, [r3, #24]
 8040fe0:	687b      	ldr	r3, [r7, #4]
 8040fe2:	681b      	ldr	r3, [r3, #0]
 8040fe4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8040fe8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8040fea:	687b      	ldr	r3, [r7, #4]
 8040fec:	681b      	ldr	r3, [r3, #0]
 8040fee:	691a      	ldr	r2, [r3, #16]
 8040ff0:	687b      	ldr	r3, [r7, #4]
 8040ff2:	681b      	ldr	r3, [r3, #0]
 8040ff4:	f042 0210 	orr.w	r2, r2, #16
 8040ff8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8040ffa:	687b      	ldr	r3, [r7, #4]
 8040ffc:	68db      	ldr	r3, [r3, #12]
 8040ffe:	2b03      	cmp	r3, #3
 8041000:	d114      	bne.n	804102c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8041002:	687b      	ldr	r3, [r7, #4]
 8041004:	681b      	ldr	r3, [r3, #0]
 8041006:	699a      	ldr	r2, [r3, #24]
 8041008:	687b      	ldr	r3, [r7, #4]
 804100a:	681b      	ldr	r3, [r3, #0]
 804100c:	f042 0220 	orr.w	r2, r2, #32
 8041010:	619a      	str	r2, [r3, #24]
 8041012:	e00b      	b.n	804102c <HAL_FDCAN_Init+0x234>
 8041014:	08047788 	.word	0x08047788
 8041018:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 804101c:	687b      	ldr	r3, [r7, #4]
 804101e:	681b      	ldr	r3, [r3, #0]
 8041020:	699a      	ldr	r2, [r3, #24]
 8041022:	687b      	ldr	r3, [r7, #4]
 8041024:	681b      	ldr	r3, [r3, #0]
 8041026:	f042 0220 	orr.w	r2, r2, #32
 804102a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 804102c:	687b      	ldr	r3, [r7, #4]
 804102e:	699b      	ldr	r3, [r3, #24]
 8041030:	3b01      	subs	r3, #1
 8041032:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8041034:	687b      	ldr	r3, [r7, #4]
 8041036:	69db      	ldr	r3, [r3, #28]
 8041038:	3b01      	subs	r3, #1
 804103a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 804103c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 804103e:	687b      	ldr	r3, [r7, #4]
 8041040:	6a1b      	ldr	r3, [r3, #32]
 8041042:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8041044:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8041048:	687b      	ldr	r3, [r7, #4]
 804104a:	695b      	ldr	r3, [r3, #20]
 804104c:	3b01      	subs	r3, #1
 804104e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8041050:	687b      	ldr	r3, [r7, #4]
 8041052:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8041054:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8041056:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8041058:	687b      	ldr	r3, [r7, #4]
 804105a:	689b      	ldr	r3, [r3, #8]
 804105c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8041060:	d115      	bne.n	804108e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8041062:	687b      	ldr	r3, [r7, #4]
 8041064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041066:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8041068:	687b      	ldr	r3, [r7, #4]
 804106a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804106c:	3b01      	subs	r3, #1
 804106e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8041070:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8041072:	687b      	ldr	r3, [r7, #4]
 8041074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041076:	3b01      	subs	r3, #1
 8041078:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 804107a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 804107e:	687b      	ldr	r3, [r7, #4]
 8041080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041082:	3b01      	subs	r3, #1
 8041084:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8041086:	687b      	ldr	r3, [r7, #4]
 8041088:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 804108a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 804108c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 804108e:	687b      	ldr	r3, [r7, #4]
 8041090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8041092:	2b00      	cmp	r3, #0
 8041094:	d00a      	beq.n	80410ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8041096:	687b      	ldr	r3, [r7, #4]
 8041098:	681b      	ldr	r3, [r3, #0]
 804109a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 804109e:	687b      	ldr	r3, [r7, #4]
 80410a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80410a2:	687b      	ldr	r3, [r7, #4]
 80410a4:	681b      	ldr	r3, [r3, #0]
 80410a6:	430a      	orrs	r2, r1
 80410a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80410ac:	687b      	ldr	r3, [r7, #4]
 80410ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80410b0:	687b      	ldr	r3, [r7, #4]
 80410b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80410b4:	4413      	add	r3, r2
 80410b6:	2b00      	cmp	r3, #0
 80410b8:	d011      	beq.n	80410de <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80410ba:	687b      	ldr	r3, [r7, #4]
 80410bc:	681b      	ldr	r3, [r3, #0]
 80410be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80410c2:	f023 0107 	bic.w	r1, r3, #7
 80410c6:	687b      	ldr	r3, [r7, #4]
 80410c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80410ca:	009b      	lsls	r3, r3, #2
 80410cc:	3360      	adds	r3, #96	@ 0x60
 80410ce:	443b      	add	r3, r7
 80410d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80410d4:	687b      	ldr	r3, [r7, #4]
 80410d6:	681b      	ldr	r3, [r3, #0]
 80410d8:	430a      	orrs	r2, r1
 80410da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80410de:	687b      	ldr	r3, [r7, #4]
 80410e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80410e2:	2b00      	cmp	r3, #0
 80410e4:	d011      	beq.n	804110a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80410e6:	687b      	ldr	r3, [r7, #4]
 80410e8:	681b      	ldr	r3, [r3, #0]
 80410ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80410ee:	f023 0107 	bic.w	r1, r3, #7
 80410f2:	687b      	ldr	r3, [r7, #4]
 80410f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80410f6:	009b      	lsls	r3, r3, #2
 80410f8:	3360      	adds	r3, #96	@ 0x60
 80410fa:	443b      	add	r3, r7
 80410fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8041100:	687b      	ldr	r3, [r7, #4]
 8041102:	681b      	ldr	r3, [r3, #0]
 8041104:	430a      	orrs	r2, r1
 8041106:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 804110a:	687b      	ldr	r3, [r7, #4]
 804110c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804110e:	2b00      	cmp	r3, #0
 8041110:	d012      	beq.n	8041138 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8041112:	687b      	ldr	r3, [r7, #4]
 8041114:	681b      	ldr	r3, [r3, #0]
 8041116:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 804111a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 804111e:	687b      	ldr	r3, [r7, #4]
 8041120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8041122:	009b      	lsls	r3, r3, #2
 8041124:	3360      	adds	r3, #96	@ 0x60
 8041126:	443b      	add	r3, r7
 8041128:	f853 3c54 	ldr.w	r3, [r3, #-84]
 804112c:	011a      	lsls	r2, r3, #4
 804112e:	687b      	ldr	r3, [r7, #4]
 8041130:	681b      	ldr	r3, [r3, #0]
 8041132:	430a      	orrs	r2, r1
 8041134:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8041138:	687b      	ldr	r3, [r7, #4]
 804113a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804113c:	2b00      	cmp	r3, #0
 804113e:	d012      	beq.n	8041166 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8041140:	687b      	ldr	r3, [r7, #4]
 8041142:	681b      	ldr	r3, [r3, #0]
 8041144:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8041148:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 804114c:	687b      	ldr	r3, [r7, #4]
 804114e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8041150:	009b      	lsls	r3, r3, #2
 8041152:	3360      	adds	r3, #96	@ 0x60
 8041154:	443b      	add	r3, r7
 8041156:	f853 3c54 	ldr.w	r3, [r3, #-84]
 804115a:	021a      	lsls	r2, r3, #8
 804115c:	687b      	ldr	r3, [r7, #4]
 804115e:	681b      	ldr	r3, [r3, #0]
 8041160:	430a      	orrs	r2, r1
 8041162:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8041166:	687b      	ldr	r3, [r7, #4]
 8041168:	681b      	ldr	r3, [r3, #0]
 804116a:	4a11      	ldr	r2, [pc, #68]	@ (80411b0 <HAL_FDCAN_Init+0x3b8>)
 804116c:	4293      	cmp	r3, r2
 804116e:	d107      	bne.n	8041180 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8041170:	687b      	ldr	r3, [r7, #4]
 8041172:	685b      	ldr	r3, [r3, #4]
 8041174:	689a      	ldr	r2, [r3, #8]
 8041176:	687b      	ldr	r3, [r7, #4]
 8041178:	685b      	ldr	r3, [r3, #4]
 804117a:	f022 0203 	bic.w	r2, r2, #3
 804117e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8041180:	687b      	ldr	r3, [r7, #4]
 8041182:	2200      	movs	r2, #0
 8041184:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8041188:	687b      	ldr	r3, [r7, #4]
 804118a:	2200      	movs	r2, #0
 804118c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8041190:	687b      	ldr	r3, [r7, #4]
 8041192:	2201      	movs	r2, #1
 8041194:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8041198:	6878      	ldr	r0, [r7, #4]
 804119a:	f000 fb69 	bl	8041870 <FDCAN_CalcultateRamBlockAddresses>
 804119e:	4603      	mov	r3, r0
 80411a0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80411a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80411a8:	4618      	mov	r0, r3
 80411aa:	3760      	adds	r7, #96	@ 0x60
 80411ac:	46bd      	mov	sp, r7
 80411ae:	bd80      	pop	{r7, pc}
 80411b0:	4000a000 	.word	0x4000a000

080411b4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80411b4:	b580      	push	{r7, lr}
 80411b6:	b086      	sub	sp, #24
 80411b8:	af00      	add	r7, sp, #0
 80411ba:	60f8      	str	r0, [r7, #12]
 80411bc:	60b9      	str	r1, [r7, #8]
 80411be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80411c0:	68fb      	ldr	r3, [r7, #12]
 80411c2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80411c6:	b2db      	uxtb	r3, r3
 80411c8:	2b02      	cmp	r3, #2
 80411ca:	d141      	bne.n	8041250 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80411cc:	68fb      	ldr	r3, [r7, #12]
 80411ce:	681b      	ldr	r3, [r3, #0]
 80411d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80411d4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80411d8:	2b00      	cmp	r3, #0
 80411da:	d109      	bne.n	80411f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80411dc:	68fb      	ldr	r3, [r7, #12]
 80411de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80411e2:	f043 0220 	orr.w	r2, r3, #32
 80411e6:	68fb      	ldr	r3, [r7, #12]
 80411e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80411ec:	2301      	movs	r3, #1
 80411ee:	e038      	b.n	8041262 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80411f0:	68fb      	ldr	r3, [r7, #12]
 80411f2:	681b      	ldr	r3, [r3, #0]
 80411f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80411f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80411fc:	2b00      	cmp	r3, #0
 80411fe:	d009      	beq.n	8041214 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8041200:	68fb      	ldr	r3, [r7, #12]
 8041202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8041206:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 804120a:	68fb      	ldr	r3, [r7, #12]
 804120c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8041210:	2301      	movs	r3, #1
 8041212:	e026      	b.n	8041262 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8041214:	68fb      	ldr	r3, [r7, #12]
 8041216:	681b      	ldr	r3, [r3, #0]
 8041218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 804121c:	0c1b      	lsrs	r3, r3, #16
 804121e:	f003 031f 	and.w	r3, r3, #31
 8041222:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8041224:	697b      	ldr	r3, [r7, #20]
 8041226:	687a      	ldr	r2, [r7, #4]
 8041228:	68b9      	ldr	r1, [r7, #8]
 804122a:	68f8      	ldr	r0, [r7, #12]
 804122c:	f000 fca6 	bl	8041b7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8041230:	68fb      	ldr	r3, [r7, #12]
 8041232:	681b      	ldr	r3, [r3, #0]
 8041234:	2101      	movs	r1, #1
 8041236:	697a      	ldr	r2, [r7, #20]
 8041238:	fa01 f202 	lsl.w	r2, r1, r2
 804123c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8041240:	2201      	movs	r2, #1
 8041242:	697b      	ldr	r3, [r7, #20]
 8041244:	409a      	lsls	r2, r3
 8041246:	68fb      	ldr	r3, [r7, #12]
 8041248:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 804124c:	2300      	movs	r3, #0
 804124e:	e008      	b.n	8041262 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8041250:	68fb      	ldr	r3, [r7, #12]
 8041252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8041256:	f043 0208 	orr.w	r2, r3, #8
 804125a:	68fb      	ldr	r3, [r7, #12]
 804125c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8041260:	2301      	movs	r3, #1
  }
}
 8041262:	4618      	mov	r0, r3
 8041264:	3718      	adds	r7, #24
 8041266:	46bd      	mov	sp, r7
 8041268:	bd80      	pop	{r7, pc}
	...

0804126c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 804126c:	b580      	push	{r7, lr}
 804126e:	b096      	sub	sp, #88	@ 0x58
 8041270:	af00      	add	r7, sp, #0
 8041272:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8041274:	4b95      	ldr	r3, [pc, #596]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041276:	691b      	ldr	r3, [r3, #16]
 8041278:	079b      	lsls	r3, r3, #30
 804127a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 804127c:	4b93      	ldr	r3, [pc, #588]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 804127e:	695b      	ldr	r3, [r3, #20]
 8041280:	079b      	lsls	r3, r3, #30
 8041282:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8041284:	4013      	ands	r3, r2
 8041286:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8041288:	687b      	ldr	r3, [r7, #4]
 804128a:	681b      	ldr	r3, [r3, #0]
 804128c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804128e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8041292:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8041294:	687b      	ldr	r3, [r7, #4]
 8041296:	681b      	ldr	r3, [r3, #0]
 8041298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804129a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 804129c:	4013      	ands	r3, r2
 804129e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	681b      	ldr	r3, [r3, #0]
 80412a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80412a6:	f003 030f 	and.w	r3, r3, #15
 80412aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80412ac:	687b      	ldr	r3, [r7, #4]
 80412ae:	681b      	ldr	r3, [r3, #0]
 80412b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80412b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80412b4:	4013      	ands	r3, r2
 80412b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80412b8:	687b      	ldr	r3, [r7, #4]
 80412ba:	681b      	ldr	r3, [r3, #0]
 80412bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80412be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80412c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	681b      	ldr	r3, [r3, #0]
 80412c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80412ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80412cc:	4013      	ands	r3, r2
 80412ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80412d0:	687b      	ldr	r3, [r7, #4]
 80412d2:	681b      	ldr	r3, [r3, #0]
 80412d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80412d6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80412da:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80412dc:	687b      	ldr	r3, [r7, #4]
 80412de:	681b      	ldr	r3, [r3, #0]
 80412e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80412e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80412e4:	4013      	ands	r3, r2
 80412e6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80412e8:	687b      	ldr	r3, [r7, #4]
 80412ea:	681b      	ldr	r3, [r3, #0]
 80412ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80412ee:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80412f2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80412f4:	687b      	ldr	r3, [r7, #4]
 80412f6:	681b      	ldr	r3, [r3, #0]
 80412f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80412fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80412fc:	4013      	ands	r3, r2
 80412fe:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8041300:	687b      	ldr	r3, [r7, #4]
 8041302:	681b      	ldr	r3, [r3, #0]
 8041304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8041306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8041308:	687b      	ldr	r3, [r7, #4]
 804130a:	681b      	ldr	r3, [r3, #0]
 804130c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804130e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8041310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8041312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041316:	2b00      	cmp	r3, #0
 8041318:	d00f      	beq.n	804133a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 804131a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804131c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041320:	2b00      	cmp	r3, #0
 8041322:	d00a      	beq.n	804133a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8041324:	687b      	ldr	r3, [r7, #4]
 8041326:	681b      	ldr	r3, [r3, #0]
 8041328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 804132c:	651a      	str	r2, [r3, #80]	@ 0x50
 804132e:	4b67      	ldr	r3, [pc, #412]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041330:	2200      	movs	r2, #0
 8041332:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8041334:	6878      	ldr	r0, [r7, #4]
 8041336:	f000 fa4f 	bl	80417d8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 804133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804133c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8041340:	2b00      	cmp	r3, #0
 8041342:	d01c      	beq.n	804137e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8041344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8041346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 804134a:	2b00      	cmp	r3, #0
 804134c:	d017      	beq.n	804137e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 804134e:	687b      	ldr	r3, [r7, #4]
 8041350:	681b      	ldr	r3, [r3, #0]
 8041352:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8041356:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8041358:	687b      	ldr	r3, [r7, #4]
 804135a:	681b      	ldr	r3, [r3, #0]
 804135c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8041360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8041362:	4013      	ands	r3, r2
 8041364:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8041366:	687b      	ldr	r3, [r7, #4]
 8041368:	681b      	ldr	r3, [r3, #0]
 804136a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 804136e:	651a      	str	r2, [r3, #80]	@ 0x50
 8041370:	4b56      	ldr	r3, [pc, #344]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041372:	2200      	movs	r2, #0
 8041374:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8041376:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8041378:	6878      	ldr	r0, [r7, #4]
 804137a:	f000 fa04 	bl	8041786 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 804137e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8041380:	2b00      	cmp	r3, #0
 8041382:	d00d      	beq.n	80413a0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8041384:	687b      	ldr	r3, [r7, #4]
 8041386:	681a      	ldr	r2, [r3, #0]
 8041388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 804138a:	4b51      	ldr	r3, [pc, #324]	@ (80414d0 <HAL_FDCAN_IRQHandler+0x264>)
 804138c:	400b      	ands	r3, r1
 804138e:	6513      	str	r3, [r2, #80]	@ 0x50
 8041390:	4a4e      	ldr	r2, [pc, #312]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8041394:	0f9b      	lsrs	r3, r3, #30
 8041396:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8041398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 804139a:	6878      	ldr	r0, [r7, #4]
 804139c:	f000 f9b2 	bl	8041704 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80413a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80413a2:	2b00      	cmp	r3, #0
 80413a4:	d00d      	beq.n	80413c2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	681a      	ldr	r2, [r3, #0]
 80413aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80413ac:	4b48      	ldr	r3, [pc, #288]	@ (80414d0 <HAL_FDCAN_IRQHandler+0x264>)
 80413ae:	400b      	ands	r3, r1
 80413b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80413b2:	4a46      	ldr	r2, [pc, #280]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 80413b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80413b6:	0f9b      	lsrs	r3, r3, #30
 80413b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80413ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80413bc:	6878      	ldr	r0, [r7, #4]
 80413be:	f000 f9ac 	bl	804171a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80413c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80413c4:	2b00      	cmp	r3, #0
 80413c6:	d00d      	beq.n	80413e4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80413c8:	687b      	ldr	r3, [r7, #4]
 80413ca:	681a      	ldr	r2, [r3, #0]
 80413cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80413ce:	4b40      	ldr	r3, [pc, #256]	@ (80414d0 <HAL_FDCAN_IRQHandler+0x264>)
 80413d0:	400b      	ands	r3, r1
 80413d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80413d4:	4a3d      	ldr	r2, [pc, #244]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 80413d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80413d8:	0f9b      	lsrs	r3, r3, #30
 80413da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80413dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80413de:	6878      	ldr	r0, [r7, #4]
 80413e0:	f000 f9a6 	bl	8041730 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80413e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80413e6:	2b00      	cmp	r3, #0
 80413e8:	d00d      	beq.n	8041406 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80413ea:	687b      	ldr	r3, [r7, #4]
 80413ec:	681a      	ldr	r2, [r3, #0]
 80413ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80413f0:	4b37      	ldr	r3, [pc, #220]	@ (80414d0 <HAL_FDCAN_IRQHandler+0x264>)
 80413f2:	400b      	ands	r3, r1
 80413f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80413f6:	4a35      	ldr	r2, [pc, #212]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 80413f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80413fa:	0f9b      	lsrs	r3, r3, #30
 80413fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80413fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8041400:	6878      	ldr	r0, [r7, #4]
 8041402:	f000 f9a0 	bl	8041746 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8041406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8041408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 804140c:	2b00      	cmp	r3, #0
 804140e:	d00f      	beq.n	8041430 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8041410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8041412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8041416:	2b00      	cmp	r3, #0
 8041418:	d00a      	beq.n	8041430 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 804141a:	687b      	ldr	r3, [r7, #4]
 804141c:	681b      	ldr	r3, [r3, #0]
 804141e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8041422:	651a      	str	r2, [r3, #80]	@ 0x50
 8041424:	4b29      	ldr	r3, [pc, #164]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041426:	2200      	movs	r2, #0
 8041428:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 804142a:	6878      	ldr	r0, [r7, #4]
 804142c:	f000 f996 	bl	804175c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8041430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8041432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8041436:	2b00      	cmp	r3, #0
 8041438:	d01c      	beq.n	8041474 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 804143a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804143c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8041440:	2b00      	cmp	r3, #0
 8041442:	d017      	beq.n	8041474 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8041444:	687b      	ldr	r3, [r7, #4]
 8041446:	681b      	ldr	r3, [r3, #0]
 8041448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804144c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 804144e:	687b      	ldr	r3, [r7, #4]
 8041450:	681b      	ldr	r3, [r3, #0]
 8041452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8041456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8041458:	4013      	ands	r3, r2
 804145a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 804145c:	687b      	ldr	r3, [r7, #4]
 804145e:	681b      	ldr	r3, [r3, #0]
 8041460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8041464:	651a      	str	r2, [r3, #80]	@ 0x50
 8041466:	4b19      	ldr	r3, [pc, #100]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041468:	2200      	movs	r2, #0
 804146a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 804146c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 804146e:	6878      	ldr	r0, [r7, #4]
 8041470:	f000 f97e 	bl	8041770 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8041474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8041476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 804147a:	2b00      	cmp	r3, #0
 804147c:	d00f      	beq.n	804149e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 804147e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8041480:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041484:	2b00      	cmp	r3, #0
 8041486:	d00a      	beq.n	804149e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8041488:	687b      	ldr	r3, [r7, #4]
 804148a:	681b      	ldr	r3, [r3, #0]
 804148c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8041490:	651a      	str	r2, [r3, #80]	@ 0x50
 8041492:	4b0e      	ldr	r3, [pc, #56]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 8041494:	2200      	movs	r2, #0
 8041496:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8041498:	6878      	ldr	r0, [r7, #4]
 804149a:	f000 f97f 	bl	804179c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 804149e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80414a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80414a4:	2b00      	cmp	r3, #0
 80414a6:	d015      	beq.n	80414d4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80414a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80414aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80414ae:	2b00      	cmp	r3, #0
 80414b0:	d010      	beq.n	80414d4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80414b2:	687b      	ldr	r3, [r7, #4]
 80414b4:	681b      	ldr	r3, [r3, #0]
 80414b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80414ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80414bc:	4b03      	ldr	r3, [pc, #12]	@ (80414cc <HAL_FDCAN_IRQHandler+0x260>)
 80414be:	2200      	movs	r2, #0
 80414c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80414c2:	6878      	ldr	r0, [r7, #4]
 80414c4:	f000 f974 	bl	80417b0 <HAL_FDCAN_TimestampWraparoundCallback>
 80414c8:	e004      	b.n	80414d4 <HAL_FDCAN_IRQHandler+0x268>
 80414ca:	bf00      	nop
 80414cc:	4000a800 	.word	0x4000a800
 80414d0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80414d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80414d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80414da:	2b00      	cmp	r3, #0
 80414dc:	d00f      	beq.n	80414fe <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80414de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80414e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80414e4:	2b00      	cmp	r3, #0
 80414e6:	d00a      	beq.n	80414fe <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80414e8:	687b      	ldr	r3, [r7, #4]
 80414ea:	681b      	ldr	r3, [r3, #0]
 80414ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80414f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80414f2:	4b81      	ldr	r3, [pc, #516]	@ (80416f8 <HAL_FDCAN_IRQHandler+0x48c>)
 80414f4:	2200      	movs	r2, #0
 80414f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80414f8:	6878      	ldr	r0, [r7, #4]
 80414fa:	f000 f963 	bl	80417c4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80414fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8041500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041504:	2b00      	cmp	r3, #0
 8041506:	d014      	beq.n	8041532 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8041508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804150e:	2b00      	cmp	r3, #0
 8041510:	d00f      	beq.n	8041532 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8041512:	687b      	ldr	r3, [r7, #4]
 8041514:	681b      	ldr	r3, [r3, #0]
 8041516:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 804151a:	651a      	str	r2, [r3, #80]	@ 0x50
 804151c:	4b76      	ldr	r3, [pc, #472]	@ (80416f8 <HAL_FDCAN_IRQHandler+0x48c>)
 804151e:	2200      	movs	r2, #0
 8041520:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8041522:	687b      	ldr	r3, [r7, #4]
 8041524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8041528:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 804152c:	687b      	ldr	r3, [r7, #4]
 804152e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8041532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8041534:	2b00      	cmp	r3, #0
 8041536:	d00d      	beq.n	8041554 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8041538:	687b      	ldr	r3, [r7, #4]
 804153a:	681a      	ldr	r2, [r3, #0]
 804153c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 804153e:	4b6f      	ldr	r3, [pc, #444]	@ (80416fc <HAL_FDCAN_IRQHandler+0x490>)
 8041540:	400b      	ands	r3, r1
 8041542:	6513      	str	r3, [r2, #80]	@ 0x50
 8041544:	4a6c      	ldr	r2, [pc, #432]	@ (80416f8 <HAL_FDCAN_IRQHandler+0x48c>)
 8041546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8041548:	0f9b      	lsrs	r3, r3, #30
 804154a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 804154c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 804154e:	6878      	ldr	r0, [r7, #4]
 8041550:	f000 f956 	bl	8041800 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8041554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8041556:	2b00      	cmp	r3, #0
 8041558:	d011      	beq.n	804157e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 804155a:	687b      	ldr	r3, [r7, #4]
 804155c:	681a      	ldr	r2, [r3, #0]
 804155e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8041560:	4b66      	ldr	r3, [pc, #408]	@ (80416fc <HAL_FDCAN_IRQHandler+0x490>)
 8041562:	400b      	ands	r3, r1
 8041564:	6513      	str	r3, [r2, #80]	@ 0x50
 8041566:	4a64      	ldr	r2, [pc, #400]	@ (80416f8 <HAL_FDCAN_IRQHandler+0x48c>)
 8041568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 804156a:	0f9b      	lsrs	r3, r3, #30
 804156c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 804156e:	687b      	ldr	r3, [r7, #4]
 8041570:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8041574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8041576:	431a      	orrs	r2, r3
 8041578:	687b      	ldr	r3, [r7, #4]
 804157a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 804157e:	687b      	ldr	r3, [r7, #4]
 8041580:	681b      	ldr	r3, [r3, #0]
 8041582:	4a5f      	ldr	r2, [pc, #380]	@ (8041700 <HAL_FDCAN_IRQHandler+0x494>)
 8041584:	4293      	cmp	r3, r2
 8041586:	f040 80aa 	bne.w	80416de <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 804158a:	687b      	ldr	r3, [r7, #4]
 804158c:	685b      	ldr	r3, [r3, #4]
 804158e:	689b      	ldr	r3, [r3, #8]
 8041590:	f003 0303 	and.w	r3, r3, #3
 8041594:	2b00      	cmp	r3, #0
 8041596:	f000 80a2 	beq.w	80416de <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 804159a:	687b      	ldr	r3, [r7, #4]
 804159c:	685b      	ldr	r3, [r3, #4]
 804159e:	6a1b      	ldr	r3, [r3, #32]
 80415a0:	f003 030f 	and.w	r3, r3, #15
 80415a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80415a6:	687b      	ldr	r3, [r7, #4]
 80415a8:	685b      	ldr	r3, [r3, #4]
 80415aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80415ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80415ae:	4013      	ands	r3, r2
 80415b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80415b2:	687b      	ldr	r3, [r7, #4]
 80415b4:	685b      	ldr	r3, [r3, #4]
 80415b6:	6a1b      	ldr	r3, [r3, #32]
 80415b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80415bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80415be:	687b      	ldr	r3, [r7, #4]
 80415c0:	685b      	ldr	r3, [r3, #4]
 80415c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80415c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80415c6:	4013      	ands	r3, r2
 80415c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80415ca:	687b      	ldr	r3, [r7, #4]
 80415cc:	685b      	ldr	r3, [r3, #4]
 80415ce:	6a1b      	ldr	r3, [r3, #32]
 80415d0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80415d4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80415d6:	687b      	ldr	r3, [r7, #4]
 80415d8:	685b      	ldr	r3, [r3, #4]
 80415da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80415dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80415de:	4013      	ands	r3, r2
 80415e0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80415e2:	687b      	ldr	r3, [r7, #4]
 80415e4:	685b      	ldr	r3, [r3, #4]
 80415e6:	6a1b      	ldr	r3, [r3, #32]
 80415e8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80415ec:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80415ee:	687b      	ldr	r3, [r7, #4]
 80415f0:	685b      	ldr	r3, [r3, #4]
 80415f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80415f4:	6a3a      	ldr	r2, [r7, #32]
 80415f6:	4013      	ands	r3, r2
 80415f8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80415fa:	687b      	ldr	r3, [r7, #4]
 80415fc:	685b      	ldr	r3, [r3, #4]
 80415fe:	6a1b      	ldr	r3, [r3, #32]
 8041600:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8041604:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8041606:	687b      	ldr	r3, [r7, #4]
 8041608:	685b      	ldr	r3, [r3, #4]
 804160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804160c:	69fa      	ldr	r2, [r7, #28]
 804160e:	4013      	ands	r3, r2
 8041610:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8041612:	687b      	ldr	r3, [r7, #4]
 8041614:	685b      	ldr	r3, [r3, #4]
 8041616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041618:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 804161a:	687b      	ldr	r3, [r7, #4]
 804161c:	685b      	ldr	r3, [r3, #4]
 804161e:	6a1b      	ldr	r3, [r3, #32]
 8041620:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8041622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8041624:	2b00      	cmp	r3, #0
 8041626:	d007      	beq.n	8041638 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8041628:	687b      	ldr	r3, [r7, #4]
 804162a:	685b      	ldr	r3, [r3, #4]
 804162c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804162e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8041630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8041632:	6878      	ldr	r0, [r7, #4]
 8041634:	f000 f8ef 	bl	8041816 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8041638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804163a:	2b00      	cmp	r3, #0
 804163c:	d007      	beq.n	804164e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 804163e:	687b      	ldr	r3, [r7, #4]
 8041640:	685b      	ldr	r3, [r3, #4]
 8041642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8041644:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8041646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8041648:	6878      	ldr	r0, [r7, #4]
 804164a:	f000 f8ef 	bl	804182c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 804164e:	69bb      	ldr	r3, [r7, #24]
 8041650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041654:	2b00      	cmp	r3, #0
 8041656:	d019      	beq.n	804168c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8041658:	697b      	ldr	r3, [r7, #20]
 804165a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804165e:	2b00      	cmp	r3, #0
 8041660:	d014      	beq.n	804168c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8041662:	687b      	ldr	r3, [r7, #4]
 8041664:	685b      	ldr	r3, [r3, #4]
 8041666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041668:	0c1b      	lsrs	r3, r3, #16
 804166a:	b29b      	uxth	r3, r3
 804166c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 804166e:	687b      	ldr	r3, [r7, #4]
 8041670:	685b      	ldr	r3, [r3, #4]
 8041672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8041678:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 804167a:	687b      	ldr	r3, [r7, #4]
 804167c:	685b      	ldr	r3, [r3, #4]
 804167e:	2240      	movs	r2, #64	@ 0x40
 8041680:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8041682:	68fa      	ldr	r2, [r7, #12]
 8041684:	6939      	ldr	r1, [r7, #16]
 8041686:	6878      	ldr	r0, [r7, #4]
 8041688:	f000 f8db 	bl	8041842 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 804168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804168e:	2b00      	cmp	r3, #0
 8041690:	d007      	beq.n	80416a2 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8041692:	687b      	ldr	r3, [r7, #4]
 8041694:	685b      	ldr	r3, [r3, #4]
 8041696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041698:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 804169a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 804169c:	6878      	ldr	r0, [r7, #4]
 804169e:	f000 f8dc 	bl	804185a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80416a2:	6a3b      	ldr	r3, [r7, #32]
 80416a4:	2b00      	cmp	r3, #0
 80416a6:	d00b      	beq.n	80416c0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80416a8:	687b      	ldr	r3, [r7, #4]
 80416aa:	685b      	ldr	r3, [r3, #4]
 80416ac:	6a3a      	ldr	r2, [r7, #32]
 80416ae:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80416b0:	687b      	ldr	r3, [r7, #4]
 80416b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80416b6:	6a3b      	ldr	r3, [r7, #32]
 80416b8:	431a      	orrs	r2, r3
 80416ba:	687b      	ldr	r3, [r7, #4]
 80416bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80416c0:	69fb      	ldr	r3, [r7, #28]
 80416c2:	2b00      	cmp	r3, #0
 80416c4:	d00b      	beq.n	80416de <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80416c6:	687b      	ldr	r3, [r7, #4]
 80416c8:	685b      	ldr	r3, [r3, #4]
 80416ca:	69fa      	ldr	r2, [r7, #28]
 80416cc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80416ce:	687b      	ldr	r3, [r7, #4]
 80416d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80416d4:	69fb      	ldr	r3, [r7, #28]
 80416d6:	431a      	orrs	r2, r3
 80416d8:	687b      	ldr	r3, [r7, #4]
 80416da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80416de:	687b      	ldr	r3, [r7, #4]
 80416e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80416e4:	2b00      	cmp	r3, #0
 80416e6:	d002      	beq.n	80416ee <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80416e8:	6878      	ldr	r0, [r7, #4]
 80416ea:	f000 f87f 	bl	80417ec <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80416ee:	bf00      	nop
 80416f0:	3758      	adds	r7, #88	@ 0x58
 80416f2:	46bd      	mov	sp, r7
 80416f4:	bd80      	pop	{r7, pc}
 80416f6:	bf00      	nop
 80416f8:	4000a800 	.word	0x4000a800
 80416fc:	3fcfffff 	.word	0x3fcfffff
 8041700:	4000a000 	.word	0x4000a000

08041704 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8041704:	b480      	push	{r7}
 8041706:	b083      	sub	sp, #12
 8041708:	af00      	add	r7, sp, #0
 804170a:	6078      	str	r0, [r7, #4]
 804170c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 804170e:	bf00      	nop
 8041710:	370c      	adds	r7, #12
 8041712:	46bd      	mov	sp, r7
 8041714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041718:	4770      	bx	lr

0804171a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 804171a:	b480      	push	{r7}
 804171c:	b083      	sub	sp, #12
 804171e:	af00      	add	r7, sp, #0
 8041720:	6078      	str	r0, [r7, #4]
 8041722:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8041724:	bf00      	nop
 8041726:	370c      	adds	r7, #12
 8041728:	46bd      	mov	sp, r7
 804172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804172e:	4770      	bx	lr

08041730 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8041730:	b480      	push	{r7}
 8041732:	b083      	sub	sp, #12
 8041734:	af00      	add	r7, sp, #0
 8041736:	6078      	str	r0, [r7, #4]
 8041738:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 804173a:	bf00      	nop
 804173c:	370c      	adds	r7, #12
 804173e:	46bd      	mov	sp, r7
 8041740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041744:	4770      	bx	lr

08041746 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8041746:	b480      	push	{r7}
 8041748:	b083      	sub	sp, #12
 804174a:	af00      	add	r7, sp, #0
 804174c:	6078      	str	r0, [r7, #4]
 804174e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8041750:	bf00      	nop
 8041752:	370c      	adds	r7, #12
 8041754:	46bd      	mov	sp, r7
 8041756:	f85d 7b04 	ldr.w	r7, [sp], #4
 804175a:	4770      	bx	lr

0804175c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 804175c:	b480      	push	{r7}
 804175e:	b083      	sub	sp, #12
 8041760:	af00      	add	r7, sp, #0
 8041762:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8041764:	bf00      	nop
 8041766:	370c      	adds	r7, #12
 8041768:	46bd      	mov	sp, r7
 804176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804176e:	4770      	bx	lr

08041770 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8041770:	b480      	push	{r7}
 8041772:	b083      	sub	sp, #12
 8041774:	af00      	add	r7, sp, #0
 8041776:	6078      	str	r0, [r7, #4]
 8041778:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 804177a:	bf00      	nop
 804177c:	370c      	adds	r7, #12
 804177e:	46bd      	mov	sp, r7
 8041780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041784:	4770      	bx	lr

08041786 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8041786:	b480      	push	{r7}
 8041788:	b083      	sub	sp, #12
 804178a:	af00      	add	r7, sp, #0
 804178c:	6078      	str	r0, [r7, #4]
 804178e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8041790:	bf00      	nop
 8041792:	370c      	adds	r7, #12
 8041794:	46bd      	mov	sp, r7
 8041796:	f85d 7b04 	ldr.w	r7, [sp], #4
 804179a:	4770      	bx	lr

0804179c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 804179c:	b480      	push	{r7}
 804179e:	b083      	sub	sp, #12
 80417a0:	af00      	add	r7, sp, #0
 80417a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80417a4:	bf00      	nop
 80417a6:	370c      	adds	r7, #12
 80417a8:	46bd      	mov	sp, r7
 80417aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417ae:	4770      	bx	lr

080417b0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80417b0:	b480      	push	{r7}
 80417b2:	b083      	sub	sp, #12
 80417b4:	af00      	add	r7, sp, #0
 80417b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80417b8:	bf00      	nop
 80417ba:	370c      	adds	r7, #12
 80417bc:	46bd      	mov	sp, r7
 80417be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417c2:	4770      	bx	lr

080417c4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80417c4:	b480      	push	{r7}
 80417c6:	b083      	sub	sp, #12
 80417c8:	af00      	add	r7, sp, #0
 80417ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80417cc:	bf00      	nop
 80417ce:	370c      	adds	r7, #12
 80417d0:	46bd      	mov	sp, r7
 80417d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417d6:	4770      	bx	lr

080417d8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80417d8:	b480      	push	{r7}
 80417da:	b083      	sub	sp, #12
 80417dc:	af00      	add	r7, sp, #0
 80417de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80417e0:	bf00      	nop
 80417e2:	370c      	adds	r7, #12
 80417e4:	46bd      	mov	sp, r7
 80417e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417ea:	4770      	bx	lr

080417ec <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80417ec:	b480      	push	{r7}
 80417ee:	b083      	sub	sp, #12
 80417f0:	af00      	add	r7, sp, #0
 80417f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80417f4:	bf00      	nop
 80417f6:	370c      	adds	r7, #12
 80417f8:	46bd      	mov	sp, r7
 80417fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417fe:	4770      	bx	lr

08041800 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8041800:	b480      	push	{r7}
 8041802:	b083      	sub	sp, #12
 8041804:	af00      	add	r7, sp, #0
 8041806:	6078      	str	r0, [r7, #4]
 8041808:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 804180a:	bf00      	nop
 804180c:	370c      	adds	r7, #12
 804180e:	46bd      	mov	sp, r7
 8041810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041814:	4770      	bx	lr

08041816 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8041816:	b480      	push	{r7}
 8041818:	b083      	sub	sp, #12
 804181a:	af00      	add	r7, sp, #0
 804181c:	6078      	str	r0, [r7, #4]
 804181e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8041820:	bf00      	nop
 8041822:	370c      	adds	r7, #12
 8041824:	46bd      	mov	sp, r7
 8041826:	f85d 7b04 	ldr.w	r7, [sp], #4
 804182a:	4770      	bx	lr

0804182c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 804182c:	b480      	push	{r7}
 804182e:	b083      	sub	sp, #12
 8041830:	af00      	add	r7, sp, #0
 8041832:	6078      	str	r0, [r7, #4]
 8041834:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8041836:	bf00      	nop
 8041838:	370c      	adds	r7, #12
 804183a:	46bd      	mov	sp, r7
 804183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041840:	4770      	bx	lr

08041842 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8041842:	b480      	push	{r7}
 8041844:	b085      	sub	sp, #20
 8041846:	af00      	add	r7, sp, #0
 8041848:	60f8      	str	r0, [r7, #12]
 804184a:	60b9      	str	r1, [r7, #8]
 804184c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 804184e:	bf00      	nop
 8041850:	3714      	adds	r7, #20
 8041852:	46bd      	mov	sp, r7
 8041854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041858:	4770      	bx	lr

0804185a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 804185a:	b480      	push	{r7}
 804185c:	b083      	sub	sp, #12
 804185e:	af00      	add	r7, sp, #0
 8041860:	6078      	str	r0, [r7, #4]
 8041862:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8041864:	bf00      	nop
 8041866:	370c      	adds	r7, #12
 8041868:	46bd      	mov	sp, r7
 804186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804186e:	4770      	bx	lr

08041870 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8041870:	b480      	push	{r7}
 8041872:	b085      	sub	sp, #20
 8041874:	af00      	add	r7, sp, #0
 8041876:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8041878:	687b      	ldr	r3, [r7, #4]
 804187a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804187c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 804187e:	687b      	ldr	r3, [r7, #4]
 8041880:	681b      	ldr	r3, [r3, #0]
 8041882:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8041886:	4ba7      	ldr	r3, [pc, #668]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8041888:	4013      	ands	r3, r2
 804188a:	68ba      	ldr	r2, [r7, #8]
 804188c:	0091      	lsls	r1, r2, #2
 804188e:	687a      	ldr	r2, [r7, #4]
 8041890:	6812      	ldr	r2, [r2, #0]
 8041892:	430b      	orrs	r3, r1
 8041894:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8041898:	687b      	ldr	r3, [r7, #4]
 804189a:	681b      	ldr	r3, [r3, #0]
 804189c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80418a0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80418a4:	687b      	ldr	r3, [r7, #4]
 80418a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80418a8:	041a      	lsls	r2, r3, #16
 80418aa:	687b      	ldr	r3, [r7, #4]
 80418ac:	681b      	ldr	r3, [r3, #0]
 80418ae:	430a      	orrs	r2, r1
 80418b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80418b4:	687b      	ldr	r3, [r7, #4]
 80418b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80418b8:	68ba      	ldr	r2, [r7, #8]
 80418ba:	4413      	add	r3, r2
 80418bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80418be:	687b      	ldr	r3, [r7, #4]
 80418c0:	681b      	ldr	r3, [r3, #0]
 80418c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80418c6:	4b97      	ldr	r3, [pc, #604]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80418c8:	4013      	ands	r3, r2
 80418ca:	68ba      	ldr	r2, [r7, #8]
 80418cc:	0091      	lsls	r1, r2, #2
 80418ce:	687a      	ldr	r2, [r7, #4]
 80418d0:	6812      	ldr	r2, [r2, #0]
 80418d2:	430b      	orrs	r3, r1
 80418d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80418d8:	687b      	ldr	r3, [r7, #4]
 80418da:	681b      	ldr	r3, [r3, #0]
 80418dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80418e0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80418e4:	687b      	ldr	r3, [r7, #4]
 80418e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80418e8:	041a      	lsls	r2, r3, #16
 80418ea:	687b      	ldr	r3, [r7, #4]
 80418ec:	681b      	ldr	r3, [r3, #0]
 80418ee:	430a      	orrs	r2, r1
 80418f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80418f4:	687b      	ldr	r3, [r7, #4]
 80418f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80418f8:	005b      	lsls	r3, r3, #1
 80418fa:	68ba      	ldr	r2, [r7, #8]
 80418fc:	4413      	add	r3, r2
 80418fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8041900:	687b      	ldr	r3, [r7, #4]
 8041902:	681b      	ldr	r3, [r3, #0]
 8041904:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8041908:	4b86      	ldr	r3, [pc, #536]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 804190a:	4013      	ands	r3, r2
 804190c:	68ba      	ldr	r2, [r7, #8]
 804190e:	0091      	lsls	r1, r2, #2
 8041910:	687a      	ldr	r2, [r7, #4]
 8041912:	6812      	ldr	r2, [r2, #0]
 8041914:	430b      	orrs	r3, r1
 8041916:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 804191a:	687b      	ldr	r3, [r7, #4]
 804191c:	681b      	ldr	r3, [r3, #0]
 804191e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8041922:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804192a:	041a      	lsls	r2, r3, #16
 804192c:	687b      	ldr	r3, [r7, #4]
 804192e:	681b      	ldr	r3, [r3, #0]
 8041930:	430a      	orrs	r2, r1
 8041932:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8041936:	687b      	ldr	r3, [r7, #4]
 8041938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804193a:	687a      	ldr	r2, [r7, #4]
 804193c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 804193e:	fb02 f303 	mul.w	r3, r2, r3
 8041942:	68ba      	ldr	r2, [r7, #8]
 8041944:	4413      	add	r3, r2
 8041946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8041948:	687b      	ldr	r3, [r7, #4]
 804194a:	681b      	ldr	r3, [r3, #0]
 804194c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8041950:	4b74      	ldr	r3, [pc, #464]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8041952:	4013      	ands	r3, r2
 8041954:	68ba      	ldr	r2, [r7, #8]
 8041956:	0091      	lsls	r1, r2, #2
 8041958:	687a      	ldr	r2, [r7, #4]
 804195a:	6812      	ldr	r2, [r2, #0]
 804195c:	430b      	orrs	r3, r1
 804195e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	681b      	ldr	r3, [r3, #0]
 8041966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 804196a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 804196e:	687b      	ldr	r3, [r7, #4]
 8041970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8041972:	041a      	lsls	r2, r3, #16
 8041974:	687b      	ldr	r3, [r7, #4]
 8041976:	681b      	ldr	r3, [r3, #0]
 8041978:	430a      	orrs	r2, r1
 804197a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 804197e:	687b      	ldr	r3, [r7, #4]
 8041980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8041982:	687a      	ldr	r2, [r7, #4]
 8041984:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8041986:	fb02 f303 	mul.w	r3, r2, r3
 804198a:	68ba      	ldr	r2, [r7, #8]
 804198c:	4413      	add	r3, r2
 804198e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8041990:	687b      	ldr	r3, [r7, #4]
 8041992:	681b      	ldr	r3, [r3, #0]
 8041994:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8041998:	4b62      	ldr	r3, [pc, #392]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 804199a:	4013      	ands	r3, r2
 804199c:	68ba      	ldr	r2, [r7, #8]
 804199e:	0091      	lsls	r1, r2, #2
 80419a0:	687a      	ldr	r2, [r7, #4]
 80419a2:	6812      	ldr	r2, [r2, #0]
 80419a4:	430b      	orrs	r3, r1
 80419a6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80419aa:	687b      	ldr	r3, [r7, #4]
 80419ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80419ae:	687a      	ldr	r2, [r7, #4]
 80419b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80419b2:	fb02 f303 	mul.w	r3, r2, r3
 80419b6:	68ba      	ldr	r2, [r7, #8]
 80419b8:	4413      	add	r3, r2
 80419ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80419bc:	687b      	ldr	r3, [r7, #4]
 80419be:	681b      	ldr	r3, [r3, #0]
 80419c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80419c4:	4b57      	ldr	r3, [pc, #348]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80419c6:	4013      	ands	r3, r2
 80419c8:	68ba      	ldr	r2, [r7, #8]
 80419ca:	0091      	lsls	r1, r2, #2
 80419cc:	687a      	ldr	r2, [r7, #4]
 80419ce:	6812      	ldr	r2, [r2, #0]
 80419d0:	430b      	orrs	r3, r1
 80419d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80419d6:	687b      	ldr	r3, [r7, #4]
 80419d8:	681b      	ldr	r3, [r3, #0]
 80419da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80419de:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80419e2:	687b      	ldr	r3, [r7, #4]
 80419e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80419e6:	041a      	lsls	r2, r3, #16
 80419e8:	687b      	ldr	r3, [r7, #4]
 80419ea:	681b      	ldr	r3, [r3, #0]
 80419ec:	430a      	orrs	r2, r1
 80419ee:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80419f2:	687b      	ldr	r3, [r7, #4]
 80419f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80419f6:	005b      	lsls	r3, r3, #1
 80419f8:	68ba      	ldr	r2, [r7, #8]
 80419fa:	4413      	add	r3, r2
 80419fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80419fe:	687b      	ldr	r3, [r7, #4]
 8041a00:	681b      	ldr	r3, [r3, #0]
 8041a02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8041a06:	4b47      	ldr	r3, [pc, #284]	@ (8041b24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8041a08:	4013      	ands	r3, r2
 8041a0a:	68ba      	ldr	r2, [r7, #8]
 8041a0c:	0091      	lsls	r1, r2, #2
 8041a0e:	687a      	ldr	r2, [r7, #4]
 8041a10:	6812      	ldr	r2, [r2, #0]
 8041a12:	430b      	orrs	r3, r1
 8041a14:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8041a18:	687b      	ldr	r3, [r7, #4]
 8041a1a:	681b      	ldr	r3, [r3, #0]
 8041a1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8041a20:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8041a24:	687b      	ldr	r3, [r7, #4]
 8041a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8041a28:	041a      	lsls	r2, r3, #16
 8041a2a:	687b      	ldr	r3, [r7, #4]
 8041a2c:	681b      	ldr	r3, [r3, #0]
 8041a2e:	430a      	orrs	r2, r1
 8041a30:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8041a34:	687b      	ldr	r3, [r7, #4]
 8041a36:	681b      	ldr	r3, [r3, #0]
 8041a38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8041a3c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8041a40:	687b      	ldr	r3, [r7, #4]
 8041a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8041a44:	061a      	lsls	r2, r3, #24
 8041a46:	687b      	ldr	r3, [r7, #4]
 8041a48:	681b      	ldr	r3, [r3, #0]
 8041a4a:	430a      	orrs	r2, r1
 8041a4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8041a50:	687b      	ldr	r3, [r7, #4]
 8041a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041a54:	4b34      	ldr	r3, [pc, #208]	@ (8041b28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8041a56:	4413      	add	r3, r2
 8041a58:	009a      	lsls	r2, r3, #2
 8041a5a:	687b      	ldr	r3, [r7, #4]
 8041a5c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8041a5e:	687b      	ldr	r3, [r7, #4]
 8041a60:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8041a62:	687b      	ldr	r3, [r7, #4]
 8041a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041a66:	009b      	lsls	r3, r3, #2
 8041a68:	441a      	add	r2, r3
 8041a6a:	687b      	ldr	r3, [r7, #4]
 8041a6c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8041a6e:	687b      	ldr	r3, [r7, #4]
 8041a70:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8041a72:	687b      	ldr	r3, [r7, #4]
 8041a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8041a76:	00db      	lsls	r3, r3, #3
 8041a78:	441a      	add	r2, r3
 8041a7a:	687b      	ldr	r3, [r7, #4]
 8041a7c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8041a7e:	687b      	ldr	r3, [r7, #4]
 8041a80:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8041a82:	687b      	ldr	r3, [r7, #4]
 8041a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041a86:	6879      	ldr	r1, [r7, #4]
 8041a88:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8041a8a:	fb01 f303 	mul.w	r3, r1, r3
 8041a8e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8041a90:	441a      	add	r2, r3
 8041a92:	687b      	ldr	r3, [r7, #4]
 8041a94:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8041a9a:	687b      	ldr	r3, [r7, #4]
 8041a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8041a9e:	6879      	ldr	r1, [r7, #4]
 8041aa0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8041aa2:	fb01 f303 	mul.w	r3, r1, r3
 8041aa6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8041aa8:	441a      	add	r2, r3
 8041aaa:	687b      	ldr	r3, [r7, #4]
 8041aac:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8041aae:	687b      	ldr	r3, [r7, #4]
 8041ab0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8041ab2:	687b      	ldr	r3, [r7, #4]
 8041ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8041ab6:	6879      	ldr	r1, [r7, #4]
 8041ab8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8041aba:	fb01 f303 	mul.w	r3, r1, r3
 8041abe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8041ac0:	441a      	add	r2, r3
 8041ac2:	687b      	ldr	r3, [r7, #4]
 8041ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8041ac8:	687b      	ldr	r3, [r7, #4]
 8041aca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8041ace:	687b      	ldr	r3, [r7, #4]
 8041ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8041ad2:	00db      	lsls	r3, r3, #3
 8041ad4:	441a      	add	r2, r3
 8041ad6:	687b      	ldr	r3, [r7, #4]
 8041ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8041adc:	687b      	ldr	r3, [r7, #4]
 8041ade:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8041ae2:	687b      	ldr	r3, [r7, #4]
 8041ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8041ae6:	6879      	ldr	r1, [r7, #4]
 8041ae8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8041aea:	fb01 f303 	mul.w	r3, r1, r3
 8041aee:	009b      	lsls	r3, r3, #2
 8041af0:	441a      	add	r2, r3
 8041af2:	687b      	ldr	r3, [r7, #4]
 8041af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8041af8:	687b      	ldr	r3, [r7, #4]
 8041afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8041afe:	687b      	ldr	r3, [r7, #4]
 8041b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8041b02:	6879      	ldr	r1, [r7, #4]
 8041b04:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8041b06:	fb01 f303 	mul.w	r3, r1, r3
 8041b0a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8041b0c:	441a      	add	r2, r3
 8041b0e:	687b      	ldr	r3, [r7, #4]
 8041b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8041b14:	687b      	ldr	r3, [r7, #4]
 8041b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041b1a:	4a04      	ldr	r2, [pc, #16]	@ (8041b2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8041b1c:	4293      	cmp	r3, r2
 8041b1e:	d915      	bls.n	8041b4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8041b20:	e006      	b.n	8041b30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8041b22:	bf00      	nop
 8041b24:	ffff0003 	.word	0xffff0003
 8041b28:	10002b00 	.word	0x10002b00
 8041b2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8041b36:	f043 0220 	orr.w	r2, r3, #32
 8041b3a:	687b      	ldr	r3, [r7, #4]
 8041b3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8041b40:	687b      	ldr	r3, [r7, #4]
 8041b42:	2203      	movs	r2, #3
 8041b44:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8041b48:	2301      	movs	r3, #1
 8041b4a:	e010      	b.n	8041b6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8041b4c:	687b      	ldr	r3, [r7, #4]
 8041b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8041b50:	60fb      	str	r3, [r7, #12]
 8041b52:	e005      	b.n	8041b60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8041b54:	68fb      	ldr	r3, [r7, #12]
 8041b56:	2200      	movs	r2, #0
 8041b58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8041b5a:	68fb      	ldr	r3, [r7, #12]
 8041b5c:	3304      	adds	r3, #4
 8041b5e:	60fb      	str	r3, [r7, #12]
 8041b60:	687b      	ldr	r3, [r7, #4]
 8041b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8041b66:	68fa      	ldr	r2, [r7, #12]
 8041b68:	429a      	cmp	r2, r3
 8041b6a:	d3f3      	bcc.n	8041b54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8041b6c:	2300      	movs	r3, #0
}
 8041b6e:	4618      	mov	r0, r3
 8041b70:	3714      	adds	r7, #20
 8041b72:	46bd      	mov	sp, r7
 8041b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b78:	4770      	bx	lr
 8041b7a:	bf00      	nop

08041b7c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8041b7c:	b480      	push	{r7}
 8041b7e:	b089      	sub	sp, #36	@ 0x24
 8041b80:	af00      	add	r7, sp, #0
 8041b82:	60f8      	str	r0, [r7, #12]
 8041b84:	60b9      	str	r1, [r7, #8]
 8041b86:	607a      	str	r2, [r7, #4]
 8041b88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8041b8a:	68bb      	ldr	r3, [r7, #8]
 8041b8c:	685b      	ldr	r3, [r3, #4]
 8041b8e:	2b00      	cmp	r3, #0
 8041b90:	d10a      	bne.n	8041ba8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8041b92:	68bb      	ldr	r3, [r7, #8]
 8041b94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8041b96:	68bb      	ldr	r3, [r7, #8]
 8041b98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8041b9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8041b9c:	68bb      	ldr	r3, [r7, #8]
 8041b9e:	681b      	ldr	r3, [r3, #0]
 8041ba0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8041ba2:	4313      	orrs	r3, r2
 8041ba4:	61fb      	str	r3, [r7, #28]
 8041ba6:	e00a      	b.n	8041bbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8041ba8:	68bb      	ldr	r3, [r7, #8]
 8041baa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8041bac:	68bb      	ldr	r3, [r7, #8]
 8041bae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8041bb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8041bb2:	68bb      	ldr	r3, [r7, #8]
 8041bb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8041bb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8041bb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8041bbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8041bbe:	68bb      	ldr	r3, [r7, #8]
 8041bc0:	6a1b      	ldr	r3, [r3, #32]
 8041bc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8041bc4:	68bb      	ldr	r3, [r7, #8]
 8041bc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8041bc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8041bca:	68bb      	ldr	r3, [r7, #8]
 8041bcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8041bce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8041bd0:	68bb      	ldr	r3, [r7, #8]
 8041bd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8041bd4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8041bd6:	68bb      	ldr	r3, [r7, #8]
 8041bd8:	68db      	ldr	r3, [r3, #12]
 8041bda:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8041bdc:	4313      	orrs	r3, r2
 8041bde:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8041be0:	68fb      	ldr	r3, [r7, #12]
 8041be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8041be6:	68fb      	ldr	r3, [r7, #12]
 8041be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8041bea:	6839      	ldr	r1, [r7, #0]
 8041bec:	fb01 f303 	mul.w	r3, r1, r3
 8041bf0:	009b      	lsls	r3, r3, #2
 8041bf2:	4413      	add	r3, r2
 8041bf4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8041bf6:	69bb      	ldr	r3, [r7, #24]
 8041bf8:	69fa      	ldr	r2, [r7, #28]
 8041bfa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8041bfc:	69bb      	ldr	r3, [r7, #24]
 8041bfe:	3304      	adds	r3, #4
 8041c00:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8041c02:	69bb      	ldr	r3, [r7, #24]
 8041c04:	693a      	ldr	r2, [r7, #16]
 8041c06:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8041c08:	69bb      	ldr	r3, [r7, #24]
 8041c0a:	3304      	adds	r3, #4
 8041c0c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8041c0e:	2300      	movs	r3, #0
 8041c10:	617b      	str	r3, [r7, #20]
 8041c12:	e020      	b.n	8041c56 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8041c14:	697b      	ldr	r3, [r7, #20]
 8041c16:	3303      	adds	r3, #3
 8041c18:	687a      	ldr	r2, [r7, #4]
 8041c1a:	4413      	add	r3, r2
 8041c1c:	781b      	ldrb	r3, [r3, #0]
 8041c1e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8041c20:	697b      	ldr	r3, [r7, #20]
 8041c22:	3302      	adds	r3, #2
 8041c24:	6879      	ldr	r1, [r7, #4]
 8041c26:	440b      	add	r3, r1
 8041c28:	781b      	ldrb	r3, [r3, #0]
 8041c2a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8041c2c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8041c2e:	697b      	ldr	r3, [r7, #20]
 8041c30:	3301      	adds	r3, #1
 8041c32:	6879      	ldr	r1, [r7, #4]
 8041c34:	440b      	add	r3, r1
 8041c36:	781b      	ldrb	r3, [r3, #0]
 8041c38:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8041c3a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8041c3c:	6879      	ldr	r1, [r7, #4]
 8041c3e:	697a      	ldr	r2, [r7, #20]
 8041c40:	440a      	add	r2, r1
 8041c42:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8041c44:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8041c46:	69bb      	ldr	r3, [r7, #24]
 8041c48:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8041c4a:	69bb      	ldr	r3, [r7, #24]
 8041c4c:	3304      	adds	r3, #4
 8041c4e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8041c50:	697b      	ldr	r3, [r7, #20]
 8041c52:	3304      	adds	r3, #4
 8041c54:	617b      	str	r3, [r7, #20]
 8041c56:	68bb      	ldr	r3, [r7, #8]
 8041c58:	68db      	ldr	r3, [r3, #12]
 8041c5a:	4a06      	ldr	r2, [pc, #24]	@ (8041c74 <FDCAN_CopyMessageToRAM+0xf8>)
 8041c5c:	5cd3      	ldrb	r3, [r2, r3]
 8041c5e:	461a      	mov	r2, r3
 8041c60:	697b      	ldr	r3, [r7, #20]
 8041c62:	4293      	cmp	r3, r2
 8041c64:	d3d6      	bcc.n	8041c14 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8041c66:	bf00      	nop
 8041c68:	bf00      	nop
 8041c6a:	3724      	adds	r7, #36	@ 0x24
 8041c6c:	46bd      	mov	sp, r7
 8041c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c72:	4770      	bx	lr
 8041c74:	08047844 	.word	0x08047844

08041c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8041c78:	b480      	push	{r7}
 8041c7a:	b089      	sub	sp, #36	@ 0x24
 8041c7c:	af00      	add	r7, sp, #0
 8041c7e:	6078      	str	r0, [r7, #4]
 8041c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8041c82:	2300      	movs	r3, #0
 8041c84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8041c86:	4b86      	ldr	r3, [pc, #536]	@ (8041ea0 <HAL_GPIO_Init+0x228>)
 8041c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041c8a:	e18c      	b.n	8041fa6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041c8c:	683b      	ldr	r3, [r7, #0]
 8041c8e:	681a      	ldr	r2, [r3, #0]
 8041c90:	2101      	movs	r1, #1
 8041c92:	69fb      	ldr	r3, [r7, #28]
 8041c94:	fa01 f303 	lsl.w	r3, r1, r3
 8041c98:	4013      	ands	r3, r2
 8041c9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8041c9c:	693b      	ldr	r3, [r7, #16]
 8041c9e:	2b00      	cmp	r3, #0
 8041ca0:	f000 817e 	beq.w	8041fa0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041ca4:	683b      	ldr	r3, [r7, #0]
 8041ca6:	685b      	ldr	r3, [r3, #4]
 8041ca8:	f003 0303 	and.w	r3, r3, #3
 8041cac:	2b01      	cmp	r3, #1
 8041cae:	d005      	beq.n	8041cbc <HAL_GPIO_Init+0x44>
 8041cb0:	683b      	ldr	r3, [r7, #0]
 8041cb2:	685b      	ldr	r3, [r3, #4]
 8041cb4:	f003 0303 	and.w	r3, r3, #3
 8041cb8:	2b02      	cmp	r3, #2
 8041cba:	d130      	bne.n	8041d1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041cbc:	687b      	ldr	r3, [r7, #4]
 8041cbe:	689b      	ldr	r3, [r3, #8]
 8041cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8041cc2:	69fb      	ldr	r3, [r7, #28]
 8041cc4:	005b      	lsls	r3, r3, #1
 8041cc6:	2203      	movs	r2, #3
 8041cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8041ccc:	43db      	mvns	r3, r3
 8041cce:	69ba      	ldr	r2, [r7, #24]
 8041cd0:	4013      	ands	r3, r2
 8041cd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041cd4:	683b      	ldr	r3, [r7, #0]
 8041cd6:	68da      	ldr	r2, [r3, #12]
 8041cd8:	69fb      	ldr	r3, [r7, #28]
 8041cda:	005b      	lsls	r3, r3, #1
 8041cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8041ce0:	69ba      	ldr	r2, [r7, #24]
 8041ce2:	4313      	orrs	r3, r2
 8041ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041ce6:	687b      	ldr	r3, [r7, #4]
 8041ce8:	69ba      	ldr	r2, [r7, #24]
 8041cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041cec:	687b      	ldr	r3, [r7, #4]
 8041cee:	685b      	ldr	r3, [r3, #4]
 8041cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8041cf2:	2201      	movs	r2, #1
 8041cf4:	69fb      	ldr	r3, [r7, #28]
 8041cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8041cfa:	43db      	mvns	r3, r3
 8041cfc:	69ba      	ldr	r2, [r7, #24]
 8041cfe:	4013      	ands	r3, r2
 8041d00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8041d02:	683b      	ldr	r3, [r7, #0]
 8041d04:	685b      	ldr	r3, [r3, #4]
 8041d06:	091b      	lsrs	r3, r3, #4
 8041d08:	f003 0201 	and.w	r2, r3, #1
 8041d0c:	69fb      	ldr	r3, [r7, #28]
 8041d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8041d12:	69ba      	ldr	r2, [r7, #24]
 8041d14:	4313      	orrs	r3, r2
 8041d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	69ba      	ldr	r2, [r7, #24]
 8041d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8041d1e:	683b      	ldr	r3, [r7, #0]
 8041d20:	685b      	ldr	r3, [r3, #4]
 8041d22:	f003 0303 	and.w	r3, r3, #3
 8041d26:	2b03      	cmp	r3, #3
 8041d28:	d017      	beq.n	8041d5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041d2a:	687b      	ldr	r3, [r7, #4]
 8041d2c:	68db      	ldr	r3, [r3, #12]
 8041d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041d30:	69fb      	ldr	r3, [r7, #28]
 8041d32:	005b      	lsls	r3, r3, #1
 8041d34:	2203      	movs	r2, #3
 8041d36:	fa02 f303 	lsl.w	r3, r2, r3
 8041d3a:	43db      	mvns	r3, r3
 8041d3c:	69ba      	ldr	r2, [r7, #24]
 8041d3e:	4013      	ands	r3, r2
 8041d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041d42:	683b      	ldr	r3, [r7, #0]
 8041d44:	689a      	ldr	r2, [r3, #8]
 8041d46:	69fb      	ldr	r3, [r7, #28]
 8041d48:	005b      	lsls	r3, r3, #1
 8041d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8041d4e:	69ba      	ldr	r2, [r7, #24]
 8041d50:	4313      	orrs	r3, r2
 8041d52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041d54:	687b      	ldr	r3, [r7, #4]
 8041d56:	69ba      	ldr	r2, [r7, #24]
 8041d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041d5a:	683b      	ldr	r3, [r7, #0]
 8041d5c:	685b      	ldr	r3, [r3, #4]
 8041d5e:	f003 0303 	and.w	r3, r3, #3
 8041d62:	2b02      	cmp	r3, #2
 8041d64:	d123      	bne.n	8041dae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041d66:	69fb      	ldr	r3, [r7, #28]
 8041d68:	08da      	lsrs	r2, r3, #3
 8041d6a:	687b      	ldr	r3, [r7, #4]
 8041d6c:	3208      	adds	r2, #8
 8041d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041d74:	69fb      	ldr	r3, [r7, #28]
 8041d76:	f003 0307 	and.w	r3, r3, #7
 8041d7a:	009b      	lsls	r3, r3, #2
 8041d7c:	220f      	movs	r2, #15
 8041d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8041d82:	43db      	mvns	r3, r3
 8041d84:	69ba      	ldr	r2, [r7, #24]
 8041d86:	4013      	ands	r3, r2
 8041d88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041d8a:	683b      	ldr	r3, [r7, #0]
 8041d8c:	691a      	ldr	r2, [r3, #16]
 8041d8e:	69fb      	ldr	r3, [r7, #28]
 8041d90:	f003 0307 	and.w	r3, r3, #7
 8041d94:	009b      	lsls	r3, r3, #2
 8041d96:	fa02 f303 	lsl.w	r3, r2, r3
 8041d9a:	69ba      	ldr	r2, [r7, #24]
 8041d9c:	4313      	orrs	r3, r2
 8041d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8041da0:	69fb      	ldr	r3, [r7, #28]
 8041da2:	08da      	lsrs	r2, r3, #3
 8041da4:	687b      	ldr	r3, [r7, #4]
 8041da6:	3208      	adds	r2, #8
 8041da8:	69b9      	ldr	r1, [r7, #24]
 8041daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041dae:	687b      	ldr	r3, [r7, #4]
 8041db0:	681b      	ldr	r3, [r3, #0]
 8041db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041db4:	69fb      	ldr	r3, [r7, #28]
 8041db6:	005b      	lsls	r3, r3, #1
 8041db8:	2203      	movs	r2, #3
 8041dba:	fa02 f303 	lsl.w	r3, r2, r3
 8041dbe:	43db      	mvns	r3, r3
 8041dc0:	69ba      	ldr	r2, [r7, #24]
 8041dc2:	4013      	ands	r3, r2
 8041dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041dc6:	683b      	ldr	r3, [r7, #0]
 8041dc8:	685b      	ldr	r3, [r3, #4]
 8041dca:	f003 0203 	and.w	r2, r3, #3
 8041dce:	69fb      	ldr	r3, [r7, #28]
 8041dd0:	005b      	lsls	r3, r3, #1
 8041dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8041dd6:	69ba      	ldr	r2, [r7, #24]
 8041dd8:	4313      	orrs	r3, r2
 8041dda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041ddc:	687b      	ldr	r3, [r7, #4]
 8041dde:	69ba      	ldr	r2, [r7, #24]
 8041de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8041de2:	683b      	ldr	r3, [r7, #0]
 8041de4:	685b      	ldr	r3, [r3, #4]
 8041de6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8041dea:	2b00      	cmp	r3, #0
 8041dec:	f000 80d8 	beq.w	8041fa0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041df0:	4b2c      	ldr	r3, [pc, #176]	@ (8041ea4 <HAL_GPIO_Init+0x22c>)
 8041df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8041df6:	4a2b      	ldr	r2, [pc, #172]	@ (8041ea4 <HAL_GPIO_Init+0x22c>)
 8041df8:	f043 0302 	orr.w	r3, r3, #2
 8041dfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8041e00:	4b28      	ldr	r3, [pc, #160]	@ (8041ea4 <HAL_GPIO_Init+0x22c>)
 8041e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8041e06:	f003 0302 	and.w	r3, r3, #2
 8041e0a:	60fb      	str	r3, [r7, #12]
 8041e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8041e0e:	4a26      	ldr	r2, [pc, #152]	@ (8041ea8 <HAL_GPIO_Init+0x230>)
 8041e10:	69fb      	ldr	r3, [r7, #28]
 8041e12:	089b      	lsrs	r3, r3, #2
 8041e14:	3302      	adds	r3, #2
 8041e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8041e1c:	69fb      	ldr	r3, [r7, #28]
 8041e1e:	f003 0303 	and.w	r3, r3, #3
 8041e22:	009b      	lsls	r3, r3, #2
 8041e24:	220f      	movs	r2, #15
 8041e26:	fa02 f303 	lsl.w	r3, r2, r3
 8041e2a:	43db      	mvns	r3, r3
 8041e2c:	69ba      	ldr	r2, [r7, #24]
 8041e2e:	4013      	ands	r3, r2
 8041e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041e32:	687b      	ldr	r3, [r7, #4]
 8041e34:	4a1d      	ldr	r2, [pc, #116]	@ (8041eac <HAL_GPIO_Init+0x234>)
 8041e36:	4293      	cmp	r3, r2
 8041e38:	d04a      	beq.n	8041ed0 <HAL_GPIO_Init+0x258>
 8041e3a:	687b      	ldr	r3, [r7, #4]
 8041e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8041eb0 <HAL_GPIO_Init+0x238>)
 8041e3e:	4293      	cmp	r3, r2
 8041e40:	d02b      	beq.n	8041e9a <HAL_GPIO_Init+0x222>
 8041e42:	687b      	ldr	r3, [r7, #4]
 8041e44:	4a1b      	ldr	r2, [pc, #108]	@ (8041eb4 <HAL_GPIO_Init+0x23c>)
 8041e46:	4293      	cmp	r3, r2
 8041e48:	d025      	beq.n	8041e96 <HAL_GPIO_Init+0x21e>
 8041e4a:	687b      	ldr	r3, [r7, #4]
 8041e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8041eb8 <HAL_GPIO_Init+0x240>)
 8041e4e:	4293      	cmp	r3, r2
 8041e50:	d01f      	beq.n	8041e92 <HAL_GPIO_Init+0x21a>
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	4a19      	ldr	r2, [pc, #100]	@ (8041ebc <HAL_GPIO_Init+0x244>)
 8041e56:	4293      	cmp	r3, r2
 8041e58:	d019      	beq.n	8041e8e <HAL_GPIO_Init+0x216>
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	4a18      	ldr	r2, [pc, #96]	@ (8041ec0 <HAL_GPIO_Init+0x248>)
 8041e5e:	4293      	cmp	r3, r2
 8041e60:	d013      	beq.n	8041e8a <HAL_GPIO_Init+0x212>
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	4a17      	ldr	r2, [pc, #92]	@ (8041ec4 <HAL_GPIO_Init+0x24c>)
 8041e66:	4293      	cmp	r3, r2
 8041e68:	d00d      	beq.n	8041e86 <HAL_GPIO_Init+0x20e>
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	4a16      	ldr	r2, [pc, #88]	@ (8041ec8 <HAL_GPIO_Init+0x250>)
 8041e6e:	4293      	cmp	r3, r2
 8041e70:	d007      	beq.n	8041e82 <HAL_GPIO_Init+0x20a>
 8041e72:	687b      	ldr	r3, [r7, #4]
 8041e74:	4a15      	ldr	r2, [pc, #84]	@ (8041ecc <HAL_GPIO_Init+0x254>)
 8041e76:	4293      	cmp	r3, r2
 8041e78:	d101      	bne.n	8041e7e <HAL_GPIO_Init+0x206>
 8041e7a:	2309      	movs	r3, #9
 8041e7c:	e029      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e7e:	230a      	movs	r3, #10
 8041e80:	e027      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e82:	2307      	movs	r3, #7
 8041e84:	e025      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e86:	2306      	movs	r3, #6
 8041e88:	e023      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e8a:	2305      	movs	r3, #5
 8041e8c:	e021      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e8e:	2304      	movs	r3, #4
 8041e90:	e01f      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e92:	2303      	movs	r3, #3
 8041e94:	e01d      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e96:	2302      	movs	r3, #2
 8041e98:	e01b      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e9a:	2301      	movs	r3, #1
 8041e9c:	e019      	b.n	8041ed2 <HAL_GPIO_Init+0x25a>
 8041e9e:	bf00      	nop
 8041ea0:	58000080 	.word	0x58000080
 8041ea4:	58024400 	.word	0x58024400
 8041ea8:	58000400 	.word	0x58000400
 8041eac:	58020000 	.word	0x58020000
 8041eb0:	58020400 	.word	0x58020400
 8041eb4:	58020800 	.word	0x58020800
 8041eb8:	58020c00 	.word	0x58020c00
 8041ebc:	58021000 	.word	0x58021000
 8041ec0:	58021400 	.word	0x58021400
 8041ec4:	58021800 	.word	0x58021800
 8041ec8:	58021c00 	.word	0x58021c00
 8041ecc:	58022400 	.word	0x58022400
 8041ed0:	2300      	movs	r3, #0
 8041ed2:	69fa      	ldr	r2, [r7, #28]
 8041ed4:	f002 0203 	and.w	r2, r2, #3
 8041ed8:	0092      	lsls	r2, r2, #2
 8041eda:	4093      	lsls	r3, r2
 8041edc:	69ba      	ldr	r2, [r7, #24]
 8041ede:	4313      	orrs	r3, r2
 8041ee0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8041ee2:	4938      	ldr	r1, [pc, #224]	@ (8041fc4 <HAL_GPIO_Init+0x34c>)
 8041ee4:	69fb      	ldr	r3, [r7, #28]
 8041ee6:	089b      	lsrs	r3, r3, #2
 8041ee8:	3302      	adds	r3, #2
 8041eea:	69ba      	ldr	r2, [r7, #24]
 8041eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8041ef4:	681b      	ldr	r3, [r3, #0]
 8041ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041ef8:	693b      	ldr	r3, [r7, #16]
 8041efa:	43db      	mvns	r3, r3
 8041efc:	69ba      	ldr	r2, [r7, #24]
 8041efe:	4013      	ands	r3, r2
 8041f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8041f02:	683b      	ldr	r3, [r7, #0]
 8041f04:	685b      	ldr	r3, [r3, #4]
 8041f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8041f0a:	2b00      	cmp	r3, #0
 8041f0c:	d003      	beq.n	8041f16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8041f0e:	69ba      	ldr	r2, [r7, #24]
 8041f10:	693b      	ldr	r3, [r7, #16]
 8041f12:	4313      	orrs	r3, r2
 8041f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8041f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041f1a:	69bb      	ldr	r3, [r7, #24]
 8041f1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8041f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8041f22:	685b      	ldr	r3, [r3, #4]
 8041f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041f26:	693b      	ldr	r3, [r7, #16]
 8041f28:	43db      	mvns	r3, r3
 8041f2a:	69ba      	ldr	r2, [r7, #24]
 8041f2c:	4013      	ands	r3, r2
 8041f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041f30:	683b      	ldr	r3, [r7, #0]
 8041f32:	685b      	ldr	r3, [r3, #4]
 8041f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041f38:	2b00      	cmp	r3, #0
 8041f3a:	d003      	beq.n	8041f44 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8041f3c:	69ba      	ldr	r2, [r7, #24]
 8041f3e:	693b      	ldr	r3, [r7, #16]
 8041f40:	4313      	orrs	r3, r2
 8041f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041f48:	69bb      	ldr	r3, [r7, #24]
 8041f4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041f4c:	697b      	ldr	r3, [r7, #20]
 8041f4e:	685b      	ldr	r3, [r3, #4]
 8041f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041f52:	693b      	ldr	r3, [r7, #16]
 8041f54:	43db      	mvns	r3, r3
 8041f56:	69ba      	ldr	r2, [r7, #24]
 8041f58:	4013      	ands	r3, r2
 8041f5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041f5c:	683b      	ldr	r3, [r7, #0]
 8041f5e:	685b      	ldr	r3, [r3, #4]
 8041f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041f64:	2b00      	cmp	r3, #0
 8041f66:	d003      	beq.n	8041f70 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8041f68:	69ba      	ldr	r2, [r7, #24]
 8041f6a:	693b      	ldr	r3, [r7, #16]
 8041f6c:	4313      	orrs	r3, r2
 8041f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8041f70:	697b      	ldr	r3, [r7, #20]
 8041f72:	69ba      	ldr	r2, [r7, #24]
 8041f74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8041f76:	697b      	ldr	r3, [r7, #20]
 8041f78:	681b      	ldr	r3, [r3, #0]
 8041f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041f7c:	693b      	ldr	r3, [r7, #16]
 8041f7e:	43db      	mvns	r3, r3
 8041f80:	69ba      	ldr	r2, [r7, #24]
 8041f82:	4013      	ands	r3, r2
 8041f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041f86:	683b      	ldr	r3, [r7, #0]
 8041f88:	685b      	ldr	r3, [r3, #4]
 8041f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8041f8e:	2b00      	cmp	r3, #0
 8041f90:	d003      	beq.n	8041f9a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8041f92:	69ba      	ldr	r2, [r7, #24]
 8041f94:	693b      	ldr	r3, [r7, #16]
 8041f96:	4313      	orrs	r3, r2
 8041f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8041f9a:	697b      	ldr	r3, [r7, #20]
 8041f9c:	69ba      	ldr	r2, [r7, #24]
 8041f9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8041fa0:	69fb      	ldr	r3, [r7, #28]
 8041fa2:	3301      	adds	r3, #1
 8041fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8041fa6:	683b      	ldr	r3, [r7, #0]
 8041fa8:	681a      	ldr	r2, [r3, #0]
 8041faa:	69fb      	ldr	r3, [r7, #28]
 8041fac:	fa22 f303 	lsr.w	r3, r2, r3
 8041fb0:	2b00      	cmp	r3, #0
 8041fb2:	f47f ae6b 	bne.w	8041c8c <HAL_GPIO_Init+0x14>
  }
}
 8041fb6:	bf00      	nop
 8041fb8:	bf00      	nop
 8041fba:	3724      	adds	r7, #36	@ 0x24
 8041fbc:	46bd      	mov	sp, r7
 8041fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fc2:	4770      	bx	lr
 8041fc4:	58000400 	.word	0x58000400

08041fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041fc8:	b480      	push	{r7}
 8041fca:	b083      	sub	sp, #12
 8041fcc:	af00      	add	r7, sp, #0
 8041fce:	6078      	str	r0, [r7, #4]
 8041fd0:	460b      	mov	r3, r1
 8041fd2:	807b      	strh	r3, [r7, #2]
 8041fd4:	4613      	mov	r3, r2
 8041fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041fd8:	787b      	ldrb	r3, [r7, #1]
 8041fda:	2b00      	cmp	r3, #0
 8041fdc:	d003      	beq.n	8041fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041fde:	887a      	ldrh	r2, [r7, #2]
 8041fe0:	687b      	ldr	r3, [r7, #4]
 8041fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8041fe4:	e003      	b.n	8041fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8041fe6:	887b      	ldrh	r3, [r7, #2]
 8041fe8:	041a      	lsls	r2, r3, #16
 8041fea:	687b      	ldr	r3, [r7, #4]
 8041fec:	619a      	str	r2, [r3, #24]
}
 8041fee:	bf00      	nop
 8041ff0:	370c      	adds	r7, #12
 8041ff2:	46bd      	mov	sp, r7
 8041ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ff8:	4770      	bx	lr
	...

08041ffc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8041ffc:	b580      	push	{r7, lr}
 8041ffe:	b084      	sub	sp, #16
 8042000:	af00      	add	r7, sp, #0
 8042002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8042004:	4b19      	ldr	r3, [pc, #100]	@ (804206c <HAL_PWREx_ConfigSupply+0x70>)
 8042006:	68db      	ldr	r3, [r3, #12]
 8042008:	f003 0304 	and.w	r3, r3, #4
 804200c:	2b04      	cmp	r3, #4
 804200e:	d00a      	beq.n	8042026 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8042010:	4b16      	ldr	r3, [pc, #88]	@ (804206c <HAL_PWREx_ConfigSupply+0x70>)
 8042012:	68db      	ldr	r3, [r3, #12]
 8042014:	f003 0307 	and.w	r3, r3, #7
 8042018:	687a      	ldr	r2, [r7, #4]
 804201a:	429a      	cmp	r2, r3
 804201c:	d001      	beq.n	8042022 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 804201e:	2301      	movs	r3, #1
 8042020:	e01f      	b.n	8042062 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8042022:	2300      	movs	r3, #0
 8042024:	e01d      	b.n	8042062 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8042026:	4b11      	ldr	r3, [pc, #68]	@ (804206c <HAL_PWREx_ConfigSupply+0x70>)
 8042028:	68db      	ldr	r3, [r3, #12]
 804202a:	f023 0207 	bic.w	r2, r3, #7
 804202e:	490f      	ldr	r1, [pc, #60]	@ (804206c <HAL_PWREx_ConfigSupply+0x70>)
 8042030:	687b      	ldr	r3, [r7, #4]
 8042032:	4313      	orrs	r3, r2
 8042034:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8042036:	f7fe fd7b 	bl	8040b30 <HAL_GetTick>
 804203a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 804203c:	e009      	b.n	8042052 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 804203e:	f7fe fd77 	bl	8040b30 <HAL_GetTick>
 8042042:	4602      	mov	r2, r0
 8042044:	68fb      	ldr	r3, [r7, #12]
 8042046:	1ad3      	subs	r3, r2, r3
 8042048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 804204c:	d901      	bls.n	8042052 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 804204e:	2301      	movs	r3, #1
 8042050:	e007      	b.n	8042062 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042052:	4b06      	ldr	r3, [pc, #24]	@ (804206c <HAL_PWREx_ConfigSupply+0x70>)
 8042054:	685b      	ldr	r3, [r3, #4]
 8042056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804205a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804205e:	d1ee      	bne.n	804203e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8042060:	2300      	movs	r3, #0
}
 8042062:	4618      	mov	r0, r3
 8042064:	3710      	adds	r7, #16
 8042066:	46bd      	mov	sp, r7
 8042068:	bd80      	pop	{r7, pc}
 804206a:	bf00      	nop
 804206c:	58024800 	.word	0x58024800

08042070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042070:	b580      	push	{r7, lr}
 8042072:	b08c      	sub	sp, #48	@ 0x30
 8042074:	af00      	add	r7, sp, #0
 8042076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8042078:	687b      	ldr	r3, [r7, #4]
 804207a:	2b00      	cmp	r3, #0
 804207c:	d101      	bne.n	8042082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804207e:	2301      	movs	r3, #1
 8042080:	e3c8      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042082:	687b      	ldr	r3, [r7, #4]
 8042084:	681b      	ldr	r3, [r3, #0]
 8042086:	f003 0301 	and.w	r3, r3, #1
 804208a:	2b00      	cmp	r3, #0
 804208c:	f000 8087 	beq.w	804219e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8042090:	4b88      	ldr	r3, [pc, #544]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042092:	691b      	ldr	r3, [r3, #16]
 8042094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8042098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804209a:	4b86      	ldr	r3, [pc, #536]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804209e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80420a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80420a2:	2b10      	cmp	r3, #16
 80420a4:	d007      	beq.n	80420b6 <HAL_RCC_OscConfig+0x46>
 80420a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80420a8:	2b18      	cmp	r3, #24
 80420aa:	d110      	bne.n	80420ce <HAL_RCC_OscConfig+0x5e>
 80420ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80420ae:	f003 0303 	and.w	r3, r3, #3
 80420b2:	2b02      	cmp	r3, #2
 80420b4:	d10b      	bne.n	80420ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80420b6:	4b7f      	ldr	r3, [pc, #508]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80420b8:	681b      	ldr	r3, [r3, #0]
 80420ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80420be:	2b00      	cmp	r3, #0
 80420c0:	d06c      	beq.n	804219c <HAL_RCC_OscConfig+0x12c>
 80420c2:	687b      	ldr	r3, [r7, #4]
 80420c4:	685b      	ldr	r3, [r3, #4]
 80420c6:	2b00      	cmp	r3, #0
 80420c8:	d168      	bne.n	804219c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80420ca:	2301      	movs	r3, #1
 80420cc:	e3a2      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80420ce:	687b      	ldr	r3, [r7, #4]
 80420d0:	685b      	ldr	r3, [r3, #4]
 80420d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80420d6:	d106      	bne.n	80420e6 <HAL_RCC_OscConfig+0x76>
 80420d8:	4b76      	ldr	r3, [pc, #472]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80420da:	681b      	ldr	r3, [r3, #0]
 80420dc:	4a75      	ldr	r2, [pc, #468]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80420de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80420e2:	6013      	str	r3, [r2, #0]
 80420e4:	e02e      	b.n	8042144 <HAL_RCC_OscConfig+0xd4>
 80420e6:	687b      	ldr	r3, [r7, #4]
 80420e8:	685b      	ldr	r3, [r3, #4]
 80420ea:	2b00      	cmp	r3, #0
 80420ec:	d10c      	bne.n	8042108 <HAL_RCC_OscConfig+0x98>
 80420ee:	4b71      	ldr	r3, [pc, #452]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80420f0:	681b      	ldr	r3, [r3, #0]
 80420f2:	4a70      	ldr	r2, [pc, #448]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80420f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80420f8:	6013      	str	r3, [r2, #0]
 80420fa:	4b6e      	ldr	r3, [pc, #440]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80420fc:	681b      	ldr	r3, [r3, #0]
 80420fe:	4a6d      	ldr	r2, [pc, #436]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8042104:	6013      	str	r3, [r2, #0]
 8042106:	e01d      	b.n	8042144 <HAL_RCC_OscConfig+0xd4>
 8042108:	687b      	ldr	r3, [r7, #4]
 804210a:	685b      	ldr	r3, [r3, #4]
 804210c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8042110:	d10c      	bne.n	804212c <HAL_RCC_OscConfig+0xbc>
 8042112:	4b68      	ldr	r3, [pc, #416]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042114:	681b      	ldr	r3, [r3, #0]
 8042116:	4a67      	ldr	r2, [pc, #412]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 804211c:	6013      	str	r3, [r2, #0]
 804211e:	4b65      	ldr	r3, [pc, #404]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042120:	681b      	ldr	r3, [r3, #0]
 8042122:	4a64      	ldr	r2, [pc, #400]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8042128:	6013      	str	r3, [r2, #0]
 804212a:	e00b      	b.n	8042144 <HAL_RCC_OscConfig+0xd4>
 804212c:	4b61      	ldr	r3, [pc, #388]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804212e:	681b      	ldr	r3, [r3, #0]
 8042130:	4a60      	ldr	r2, [pc, #384]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8042136:	6013      	str	r3, [r2, #0]
 8042138:	4b5e      	ldr	r3, [pc, #376]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804213a:	681b      	ldr	r3, [r3, #0]
 804213c:	4a5d      	ldr	r2, [pc, #372]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804213e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8042142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	685b      	ldr	r3, [r3, #4]
 8042148:	2b00      	cmp	r3, #0
 804214a:	d013      	beq.n	8042174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804214c:	f7fe fcf0 	bl	8040b30 <HAL_GetTick>
 8042150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8042152:	e008      	b.n	8042166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8042154:	f7fe fcec 	bl	8040b30 <HAL_GetTick>
 8042158:	4602      	mov	r2, r0
 804215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804215c:	1ad3      	subs	r3, r2, r3
 804215e:	2b64      	cmp	r3, #100	@ 0x64
 8042160:	d901      	bls.n	8042166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8042162:	2303      	movs	r3, #3
 8042164:	e356      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8042166:	4b53      	ldr	r3, [pc, #332]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042168:	681b      	ldr	r3, [r3, #0]
 804216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804216e:	2b00      	cmp	r3, #0
 8042170:	d0f0      	beq.n	8042154 <HAL_RCC_OscConfig+0xe4>
 8042172:	e014      	b.n	804219e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042174:	f7fe fcdc 	bl	8040b30 <HAL_GetTick>
 8042178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804217a:	e008      	b.n	804218e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804217c:	f7fe fcd8 	bl	8040b30 <HAL_GetTick>
 8042180:	4602      	mov	r2, r0
 8042182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042184:	1ad3      	subs	r3, r2, r3
 8042186:	2b64      	cmp	r3, #100	@ 0x64
 8042188:	d901      	bls.n	804218e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 804218a:	2303      	movs	r3, #3
 804218c:	e342      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804218e:	4b49      	ldr	r3, [pc, #292]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042190:	681b      	ldr	r3, [r3, #0]
 8042192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8042196:	2b00      	cmp	r3, #0
 8042198:	d1f0      	bne.n	804217c <HAL_RCC_OscConfig+0x10c>
 804219a:	e000      	b.n	804219e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804219e:	687b      	ldr	r3, [r7, #4]
 80421a0:	681b      	ldr	r3, [r3, #0]
 80421a2:	f003 0302 	and.w	r3, r3, #2
 80421a6:	2b00      	cmp	r3, #0
 80421a8:	f000 808c 	beq.w	80422c4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80421ac:	4b41      	ldr	r3, [pc, #260]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80421ae:	691b      	ldr	r3, [r3, #16]
 80421b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80421b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80421b6:	4b3f      	ldr	r3, [pc, #252]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80421b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80421ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80421bc:	6a3b      	ldr	r3, [r7, #32]
 80421be:	2b00      	cmp	r3, #0
 80421c0:	d007      	beq.n	80421d2 <HAL_RCC_OscConfig+0x162>
 80421c2:	6a3b      	ldr	r3, [r7, #32]
 80421c4:	2b18      	cmp	r3, #24
 80421c6:	d137      	bne.n	8042238 <HAL_RCC_OscConfig+0x1c8>
 80421c8:	69fb      	ldr	r3, [r7, #28]
 80421ca:	f003 0303 	and.w	r3, r3, #3
 80421ce:	2b00      	cmp	r3, #0
 80421d0:	d132      	bne.n	8042238 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80421d2:	4b38      	ldr	r3, [pc, #224]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80421d4:	681b      	ldr	r3, [r3, #0]
 80421d6:	f003 0304 	and.w	r3, r3, #4
 80421da:	2b00      	cmp	r3, #0
 80421dc:	d005      	beq.n	80421ea <HAL_RCC_OscConfig+0x17a>
 80421de:	687b      	ldr	r3, [r7, #4]
 80421e0:	68db      	ldr	r3, [r3, #12]
 80421e2:	2b00      	cmp	r3, #0
 80421e4:	d101      	bne.n	80421ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80421e6:	2301      	movs	r3, #1
 80421e8:	e314      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80421ea:	4b32      	ldr	r3, [pc, #200]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80421ec:	681b      	ldr	r3, [r3, #0]
 80421ee:	f023 0219 	bic.w	r2, r3, #25
 80421f2:	687b      	ldr	r3, [r7, #4]
 80421f4:	68db      	ldr	r3, [r3, #12]
 80421f6:	492f      	ldr	r1, [pc, #188]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 80421f8:	4313      	orrs	r3, r2
 80421fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80421fc:	f7fe fc98 	bl	8040b30 <HAL_GetTick>
 8042200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8042202:	e008      	b.n	8042216 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8042204:	f7fe fc94 	bl	8040b30 <HAL_GetTick>
 8042208:	4602      	mov	r2, r0
 804220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804220c:	1ad3      	subs	r3, r2, r3
 804220e:	2b02      	cmp	r3, #2
 8042210:	d901      	bls.n	8042216 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8042212:	2303      	movs	r3, #3
 8042214:	e2fe      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8042216:	4b27      	ldr	r3, [pc, #156]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042218:	681b      	ldr	r3, [r3, #0]
 804221a:	f003 0304 	and.w	r3, r3, #4
 804221e:	2b00      	cmp	r3, #0
 8042220:	d0f0      	beq.n	8042204 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8042222:	4b24      	ldr	r3, [pc, #144]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042224:	685b      	ldr	r3, [r3, #4]
 8042226:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 804222a:	687b      	ldr	r3, [r7, #4]
 804222c:	691b      	ldr	r3, [r3, #16]
 804222e:	061b      	lsls	r3, r3, #24
 8042230:	4920      	ldr	r1, [pc, #128]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042232:	4313      	orrs	r3, r2
 8042234:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8042236:	e045      	b.n	80422c4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8042238:	687b      	ldr	r3, [r7, #4]
 804223a:	68db      	ldr	r3, [r3, #12]
 804223c:	2b00      	cmp	r3, #0
 804223e:	d026      	beq.n	804228e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8042240:	4b1c      	ldr	r3, [pc, #112]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042242:	681b      	ldr	r3, [r3, #0]
 8042244:	f023 0219 	bic.w	r2, r3, #25
 8042248:	687b      	ldr	r3, [r7, #4]
 804224a:	68db      	ldr	r3, [r3, #12]
 804224c:	4919      	ldr	r1, [pc, #100]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804224e:	4313      	orrs	r3, r2
 8042250:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042252:	f7fe fc6d 	bl	8040b30 <HAL_GetTick>
 8042256:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8042258:	e008      	b.n	804226c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804225a:	f7fe fc69 	bl	8040b30 <HAL_GetTick>
 804225e:	4602      	mov	r2, r0
 8042260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042262:	1ad3      	subs	r3, r2, r3
 8042264:	2b02      	cmp	r3, #2
 8042266:	d901      	bls.n	804226c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8042268:	2303      	movs	r3, #3
 804226a:	e2d3      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804226c:	4b11      	ldr	r3, [pc, #68]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804226e:	681b      	ldr	r3, [r3, #0]
 8042270:	f003 0304 	and.w	r3, r3, #4
 8042274:	2b00      	cmp	r3, #0
 8042276:	d0f0      	beq.n	804225a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8042278:	4b0e      	ldr	r3, [pc, #56]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 804227a:	685b      	ldr	r3, [r3, #4]
 804227c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8042280:	687b      	ldr	r3, [r7, #4]
 8042282:	691b      	ldr	r3, [r3, #16]
 8042284:	061b      	lsls	r3, r3, #24
 8042286:	490b      	ldr	r1, [pc, #44]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042288:	4313      	orrs	r3, r2
 804228a:	604b      	str	r3, [r1, #4]
 804228c:	e01a      	b.n	80422c4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804228e:	4b09      	ldr	r3, [pc, #36]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042290:	681b      	ldr	r3, [r3, #0]
 8042292:	4a08      	ldr	r2, [pc, #32]	@ (80422b4 <HAL_RCC_OscConfig+0x244>)
 8042294:	f023 0301 	bic.w	r3, r3, #1
 8042298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804229a:	f7fe fc49 	bl	8040b30 <HAL_GetTick>
 804229e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80422a0:	e00a      	b.n	80422b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80422a2:	f7fe fc45 	bl	8040b30 <HAL_GetTick>
 80422a6:	4602      	mov	r2, r0
 80422a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80422aa:	1ad3      	subs	r3, r2, r3
 80422ac:	2b02      	cmp	r3, #2
 80422ae:	d903      	bls.n	80422b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80422b0:	2303      	movs	r3, #3
 80422b2:	e2af      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
 80422b4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80422b8:	4b96      	ldr	r3, [pc, #600]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80422ba:	681b      	ldr	r3, [r3, #0]
 80422bc:	f003 0304 	and.w	r3, r3, #4
 80422c0:	2b00      	cmp	r3, #0
 80422c2:	d1ee      	bne.n	80422a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80422c4:	687b      	ldr	r3, [r7, #4]
 80422c6:	681b      	ldr	r3, [r3, #0]
 80422c8:	f003 0310 	and.w	r3, r3, #16
 80422cc:	2b00      	cmp	r3, #0
 80422ce:	d06a      	beq.n	80423a6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80422d0:	4b90      	ldr	r3, [pc, #576]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80422d2:	691b      	ldr	r3, [r3, #16]
 80422d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80422d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80422da:	4b8e      	ldr	r3, [pc, #568]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80422dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80422de:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80422e0:	69bb      	ldr	r3, [r7, #24]
 80422e2:	2b08      	cmp	r3, #8
 80422e4:	d007      	beq.n	80422f6 <HAL_RCC_OscConfig+0x286>
 80422e6:	69bb      	ldr	r3, [r7, #24]
 80422e8:	2b18      	cmp	r3, #24
 80422ea:	d11b      	bne.n	8042324 <HAL_RCC_OscConfig+0x2b4>
 80422ec:	697b      	ldr	r3, [r7, #20]
 80422ee:	f003 0303 	and.w	r3, r3, #3
 80422f2:	2b01      	cmp	r3, #1
 80422f4:	d116      	bne.n	8042324 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80422f6:	4b87      	ldr	r3, [pc, #540]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80422f8:	681b      	ldr	r3, [r3, #0]
 80422fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80422fe:	2b00      	cmp	r3, #0
 8042300:	d005      	beq.n	804230e <HAL_RCC_OscConfig+0x29e>
 8042302:	687b      	ldr	r3, [r7, #4]
 8042304:	69db      	ldr	r3, [r3, #28]
 8042306:	2b80      	cmp	r3, #128	@ 0x80
 8042308:	d001      	beq.n	804230e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 804230a:	2301      	movs	r3, #1
 804230c:	e282      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804230e:	4b81      	ldr	r3, [pc, #516]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042310:	68db      	ldr	r3, [r3, #12]
 8042312:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8042316:	687b      	ldr	r3, [r7, #4]
 8042318:	6a1b      	ldr	r3, [r3, #32]
 804231a:	061b      	lsls	r3, r3, #24
 804231c:	497d      	ldr	r1, [pc, #500]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804231e:	4313      	orrs	r3, r2
 8042320:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8042322:	e040      	b.n	80423a6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8042324:	687b      	ldr	r3, [r7, #4]
 8042326:	69db      	ldr	r3, [r3, #28]
 8042328:	2b00      	cmp	r3, #0
 804232a:	d023      	beq.n	8042374 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 804232c:	4b79      	ldr	r3, [pc, #484]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804232e:	681b      	ldr	r3, [r3, #0]
 8042330:	4a78      	ldr	r2, [pc, #480]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8042336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042338:	f7fe fbfa 	bl	8040b30 <HAL_GetTick>
 804233c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 804233e:	e008      	b.n	8042352 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8042340:	f7fe fbf6 	bl	8040b30 <HAL_GetTick>
 8042344:	4602      	mov	r2, r0
 8042346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042348:	1ad3      	subs	r3, r2, r3
 804234a:	2b02      	cmp	r3, #2
 804234c:	d901      	bls.n	8042352 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 804234e:	2303      	movs	r3, #3
 8042350:	e260      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8042352:	4b70      	ldr	r3, [pc, #448]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042354:	681b      	ldr	r3, [r3, #0]
 8042356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804235a:	2b00      	cmp	r3, #0
 804235c:	d0f0      	beq.n	8042340 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804235e:	4b6d      	ldr	r3, [pc, #436]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042360:	68db      	ldr	r3, [r3, #12]
 8042362:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8042366:	687b      	ldr	r3, [r7, #4]
 8042368:	6a1b      	ldr	r3, [r3, #32]
 804236a:	061b      	lsls	r3, r3, #24
 804236c:	4969      	ldr	r1, [pc, #420]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804236e:	4313      	orrs	r3, r2
 8042370:	60cb      	str	r3, [r1, #12]
 8042372:	e018      	b.n	80423a6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8042374:	4b67      	ldr	r3, [pc, #412]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042376:	681b      	ldr	r3, [r3, #0]
 8042378:	4a66      	ldr	r2, [pc, #408]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804237a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 804237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042380:	f7fe fbd6 	bl	8040b30 <HAL_GetTick>
 8042384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8042386:	e008      	b.n	804239a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8042388:	f7fe fbd2 	bl	8040b30 <HAL_GetTick>
 804238c:	4602      	mov	r2, r0
 804238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042390:	1ad3      	subs	r3, r2, r3
 8042392:	2b02      	cmp	r3, #2
 8042394:	d901      	bls.n	804239a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8042396:	2303      	movs	r3, #3
 8042398:	e23c      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 804239a:	4b5e      	ldr	r3, [pc, #376]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804239c:	681b      	ldr	r3, [r3, #0]
 804239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80423a2:	2b00      	cmp	r3, #0
 80423a4:	d1f0      	bne.n	8042388 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80423a6:	687b      	ldr	r3, [r7, #4]
 80423a8:	681b      	ldr	r3, [r3, #0]
 80423aa:	f003 0308 	and.w	r3, r3, #8
 80423ae:	2b00      	cmp	r3, #0
 80423b0:	d036      	beq.n	8042420 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80423b2:	687b      	ldr	r3, [r7, #4]
 80423b4:	695b      	ldr	r3, [r3, #20]
 80423b6:	2b00      	cmp	r3, #0
 80423b8:	d019      	beq.n	80423ee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80423ba:	4b56      	ldr	r3, [pc, #344]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80423bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80423be:	4a55      	ldr	r2, [pc, #340]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80423c0:	f043 0301 	orr.w	r3, r3, #1
 80423c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80423c6:	f7fe fbb3 	bl	8040b30 <HAL_GetTick>
 80423ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80423cc:	e008      	b.n	80423e0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80423ce:	f7fe fbaf 	bl	8040b30 <HAL_GetTick>
 80423d2:	4602      	mov	r2, r0
 80423d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80423d6:	1ad3      	subs	r3, r2, r3
 80423d8:	2b02      	cmp	r3, #2
 80423da:	d901      	bls.n	80423e0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80423dc:	2303      	movs	r3, #3
 80423de:	e219      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80423e0:	4b4c      	ldr	r3, [pc, #304]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80423e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80423e4:	f003 0302 	and.w	r3, r3, #2
 80423e8:	2b00      	cmp	r3, #0
 80423ea:	d0f0      	beq.n	80423ce <HAL_RCC_OscConfig+0x35e>
 80423ec:	e018      	b.n	8042420 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80423ee:	4b49      	ldr	r3, [pc, #292]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80423f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80423f2:	4a48      	ldr	r2, [pc, #288]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80423f4:	f023 0301 	bic.w	r3, r3, #1
 80423f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80423fa:	f7fe fb99 	bl	8040b30 <HAL_GetTick>
 80423fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8042400:	e008      	b.n	8042414 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8042402:	f7fe fb95 	bl	8040b30 <HAL_GetTick>
 8042406:	4602      	mov	r2, r0
 8042408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804240a:	1ad3      	subs	r3, r2, r3
 804240c:	2b02      	cmp	r3, #2
 804240e:	d901      	bls.n	8042414 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8042410:	2303      	movs	r3, #3
 8042412:	e1ff      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8042414:	4b3f      	ldr	r3, [pc, #252]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8042418:	f003 0302 	and.w	r3, r3, #2
 804241c:	2b00      	cmp	r3, #0
 804241e:	d1f0      	bne.n	8042402 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8042420:	687b      	ldr	r3, [r7, #4]
 8042422:	681b      	ldr	r3, [r3, #0]
 8042424:	f003 0320 	and.w	r3, r3, #32
 8042428:	2b00      	cmp	r3, #0
 804242a:	d036      	beq.n	804249a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 804242c:	687b      	ldr	r3, [r7, #4]
 804242e:	699b      	ldr	r3, [r3, #24]
 8042430:	2b00      	cmp	r3, #0
 8042432:	d019      	beq.n	8042468 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8042434:	4b37      	ldr	r3, [pc, #220]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042436:	681b      	ldr	r3, [r3, #0]
 8042438:	4a36      	ldr	r2, [pc, #216]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804243a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 804243e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8042440:	f7fe fb76 	bl	8040b30 <HAL_GetTick>
 8042444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8042446:	e008      	b.n	804245a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8042448:	f7fe fb72 	bl	8040b30 <HAL_GetTick>
 804244c:	4602      	mov	r2, r0
 804244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042450:	1ad3      	subs	r3, r2, r3
 8042452:	2b02      	cmp	r3, #2
 8042454:	d901      	bls.n	804245a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8042456:	2303      	movs	r3, #3
 8042458:	e1dc      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 804245a:	4b2e      	ldr	r3, [pc, #184]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804245c:	681b      	ldr	r3, [r3, #0]
 804245e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042462:	2b00      	cmp	r3, #0
 8042464:	d0f0      	beq.n	8042448 <HAL_RCC_OscConfig+0x3d8>
 8042466:	e018      	b.n	804249a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8042468:	4b2a      	ldr	r3, [pc, #168]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804246a:	681b      	ldr	r3, [r3, #0]
 804246c:	4a29      	ldr	r2, [pc, #164]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804246e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8042472:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8042474:	f7fe fb5c 	bl	8040b30 <HAL_GetTick>
 8042478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804247a:	e008      	b.n	804248e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 804247c:	f7fe fb58 	bl	8040b30 <HAL_GetTick>
 8042480:	4602      	mov	r2, r0
 8042482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042484:	1ad3      	subs	r3, r2, r3
 8042486:	2b02      	cmp	r3, #2
 8042488:	d901      	bls.n	804248e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 804248a:	2303      	movs	r3, #3
 804248c:	e1c2      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804248e:	4b21      	ldr	r3, [pc, #132]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042490:	681b      	ldr	r3, [r3, #0]
 8042492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042496:	2b00      	cmp	r3, #0
 8042498:	d1f0      	bne.n	804247c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804249a:	687b      	ldr	r3, [r7, #4]
 804249c:	681b      	ldr	r3, [r3, #0]
 804249e:	f003 0304 	and.w	r3, r3, #4
 80424a2:	2b00      	cmp	r3, #0
 80424a4:	f000 8086 	beq.w	80425b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80424a8:	4b1b      	ldr	r3, [pc, #108]	@ (8042518 <HAL_RCC_OscConfig+0x4a8>)
 80424aa:	681b      	ldr	r3, [r3, #0]
 80424ac:	4a1a      	ldr	r2, [pc, #104]	@ (8042518 <HAL_RCC_OscConfig+0x4a8>)
 80424ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80424b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80424b4:	f7fe fb3c 	bl	8040b30 <HAL_GetTick>
 80424b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80424ba:	e008      	b.n	80424ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80424bc:	f7fe fb38 	bl	8040b30 <HAL_GetTick>
 80424c0:	4602      	mov	r2, r0
 80424c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424c4:	1ad3      	subs	r3, r2, r3
 80424c6:	2b64      	cmp	r3, #100	@ 0x64
 80424c8:	d901      	bls.n	80424ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80424ca:	2303      	movs	r3, #3
 80424cc:	e1a2      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80424ce:	4b12      	ldr	r3, [pc, #72]	@ (8042518 <HAL_RCC_OscConfig+0x4a8>)
 80424d0:	681b      	ldr	r3, [r3, #0]
 80424d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80424d6:	2b00      	cmp	r3, #0
 80424d8:	d0f0      	beq.n	80424bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80424da:	687b      	ldr	r3, [r7, #4]
 80424dc:	689b      	ldr	r3, [r3, #8]
 80424de:	2b01      	cmp	r3, #1
 80424e0:	d106      	bne.n	80424f0 <HAL_RCC_OscConfig+0x480>
 80424e2:	4b0c      	ldr	r3, [pc, #48]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80424e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80424e6:	4a0b      	ldr	r2, [pc, #44]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80424e8:	f043 0301 	orr.w	r3, r3, #1
 80424ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80424ee:	e032      	b.n	8042556 <HAL_RCC_OscConfig+0x4e6>
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	689b      	ldr	r3, [r3, #8]
 80424f4:	2b00      	cmp	r3, #0
 80424f6:	d111      	bne.n	804251c <HAL_RCC_OscConfig+0x4ac>
 80424f8:	4b06      	ldr	r3, [pc, #24]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80424fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80424fc:	4a05      	ldr	r2, [pc, #20]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 80424fe:	f023 0301 	bic.w	r3, r3, #1
 8042502:	6713      	str	r3, [r2, #112]	@ 0x70
 8042504:	4b03      	ldr	r3, [pc, #12]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 8042506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042508:	4a02      	ldr	r2, [pc, #8]	@ (8042514 <HAL_RCC_OscConfig+0x4a4>)
 804250a:	f023 0304 	bic.w	r3, r3, #4
 804250e:	6713      	str	r3, [r2, #112]	@ 0x70
 8042510:	e021      	b.n	8042556 <HAL_RCC_OscConfig+0x4e6>
 8042512:	bf00      	nop
 8042514:	58024400 	.word	0x58024400
 8042518:	58024800 	.word	0x58024800
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	689b      	ldr	r3, [r3, #8]
 8042520:	2b05      	cmp	r3, #5
 8042522:	d10c      	bne.n	804253e <HAL_RCC_OscConfig+0x4ce>
 8042524:	4b83      	ldr	r3, [pc, #524]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042528:	4a82      	ldr	r2, [pc, #520]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804252a:	f043 0304 	orr.w	r3, r3, #4
 804252e:	6713      	str	r3, [r2, #112]	@ 0x70
 8042530:	4b80      	ldr	r3, [pc, #512]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042534:	4a7f      	ldr	r2, [pc, #508]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042536:	f043 0301 	orr.w	r3, r3, #1
 804253a:	6713      	str	r3, [r2, #112]	@ 0x70
 804253c:	e00b      	b.n	8042556 <HAL_RCC_OscConfig+0x4e6>
 804253e:	4b7d      	ldr	r3, [pc, #500]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042542:	4a7c      	ldr	r2, [pc, #496]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042544:	f023 0301 	bic.w	r3, r3, #1
 8042548:	6713      	str	r3, [r2, #112]	@ 0x70
 804254a:	4b7a      	ldr	r3, [pc, #488]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804254e:	4a79      	ldr	r2, [pc, #484]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042550:	f023 0304 	bic.w	r3, r3, #4
 8042554:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8042556:	687b      	ldr	r3, [r7, #4]
 8042558:	689b      	ldr	r3, [r3, #8]
 804255a:	2b00      	cmp	r3, #0
 804255c:	d015      	beq.n	804258a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804255e:	f7fe fae7 	bl	8040b30 <HAL_GetTick>
 8042562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042564:	e00a      	b.n	804257c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042566:	f7fe fae3 	bl	8040b30 <HAL_GetTick>
 804256a:	4602      	mov	r2, r0
 804256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804256e:	1ad3      	subs	r3, r2, r3
 8042570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8042574:	4293      	cmp	r3, r2
 8042576:	d901      	bls.n	804257c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8042578:	2303      	movs	r3, #3
 804257a:	e14b      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804257c:	4b6d      	ldr	r3, [pc, #436]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8042580:	f003 0302 	and.w	r3, r3, #2
 8042584:	2b00      	cmp	r3, #0
 8042586:	d0ee      	beq.n	8042566 <HAL_RCC_OscConfig+0x4f6>
 8042588:	e014      	b.n	80425b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804258a:	f7fe fad1 	bl	8040b30 <HAL_GetTick>
 804258e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8042590:	e00a      	b.n	80425a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042592:	f7fe facd 	bl	8040b30 <HAL_GetTick>
 8042596:	4602      	mov	r2, r0
 8042598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804259a:	1ad3      	subs	r3, r2, r3
 804259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80425a0:	4293      	cmp	r3, r2
 80425a2:	d901      	bls.n	80425a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80425a4:	2303      	movs	r3, #3
 80425a6:	e135      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80425a8:	4b62      	ldr	r3, [pc, #392]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80425aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80425ac:	f003 0302 	and.w	r3, r3, #2
 80425b0:	2b00      	cmp	r3, #0
 80425b2:	d1ee      	bne.n	8042592 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80425b4:	687b      	ldr	r3, [r7, #4]
 80425b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80425b8:	2b00      	cmp	r3, #0
 80425ba:	f000 812a 	beq.w	8042812 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80425be:	4b5d      	ldr	r3, [pc, #372]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80425c0:	691b      	ldr	r3, [r3, #16]
 80425c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80425c6:	2b18      	cmp	r3, #24
 80425c8:	f000 80ba 	beq.w	8042740 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80425cc:	687b      	ldr	r3, [r7, #4]
 80425ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80425d0:	2b02      	cmp	r3, #2
 80425d2:	f040 8095 	bne.w	8042700 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80425d6:	4b57      	ldr	r3, [pc, #348]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80425d8:	681b      	ldr	r3, [r3, #0]
 80425da:	4a56      	ldr	r2, [pc, #344]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80425dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80425e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80425e2:	f7fe faa5 	bl	8040b30 <HAL_GetTick>
 80425e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80425e8:	e008      	b.n	80425fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80425ea:	f7fe faa1 	bl	8040b30 <HAL_GetTick>
 80425ee:	4602      	mov	r2, r0
 80425f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80425f2:	1ad3      	subs	r3, r2, r3
 80425f4:	2b02      	cmp	r3, #2
 80425f6:	d901      	bls.n	80425fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80425f8:	2303      	movs	r3, #3
 80425fa:	e10b      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80425fc:	4b4d      	ldr	r3, [pc, #308]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80425fe:	681b      	ldr	r3, [r3, #0]
 8042600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8042604:	2b00      	cmp	r3, #0
 8042606:	d1f0      	bne.n	80425ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8042608:	4b4a      	ldr	r3, [pc, #296]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804260a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 804260c:	4b4a      	ldr	r3, [pc, #296]	@ (8042738 <HAL_RCC_OscConfig+0x6c8>)
 804260e:	4013      	ands	r3, r2
 8042610:	687a      	ldr	r2, [r7, #4]
 8042612:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8042614:	687a      	ldr	r2, [r7, #4]
 8042616:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8042618:	0112      	lsls	r2, r2, #4
 804261a:	430a      	orrs	r2, r1
 804261c:	4945      	ldr	r1, [pc, #276]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804261e:	4313      	orrs	r3, r2
 8042620:	628b      	str	r3, [r1, #40]	@ 0x28
 8042622:	687b      	ldr	r3, [r7, #4]
 8042624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042626:	3b01      	subs	r3, #1
 8042628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 804262c:	687b      	ldr	r3, [r7, #4]
 804262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8042630:	3b01      	subs	r3, #1
 8042632:	025b      	lsls	r3, r3, #9
 8042634:	b29b      	uxth	r3, r3
 8042636:	431a      	orrs	r2, r3
 8042638:	687b      	ldr	r3, [r7, #4]
 804263a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804263c:	3b01      	subs	r3, #1
 804263e:	041b      	lsls	r3, r3, #16
 8042640:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8042644:	431a      	orrs	r2, r3
 8042646:	687b      	ldr	r3, [r7, #4]
 8042648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804264a:	3b01      	subs	r3, #1
 804264c:	061b      	lsls	r3, r3, #24
 804264e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8042652:	4938      	ldr	r1, [pc, #224]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042654:	4313      	orrs	r3, r2
 8042656:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8042658:	4b36      	ldr	r3, [pc, #216]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804265c:	4a35      	ldr	r2, [pc, #212]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804265e:	f023 0301 	bic.w	r3, r3, #1
 8042662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8042664:	4b33      	ldr	r3, [pc, #204]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042668:	4b34      	ldr	r3, [pc, #208]	@ (804273c <HAL_RCC_OscConfig+0x6cc>)
 804266a:	4013      	ands	r3, r2
 804266c:	687a      	ldr	r2, [r7, #4]
 804266e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8042670:	00d2      	lsls	r2, r2, #3
 8042672:	4930      	ldr	r1, [pc, #192]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042674:	4313      	orrs	r3, r2
 8042676:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8042678:	4b2e      	ldr	r3, [pc, #184]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804267c:	f023 020c 	bic.w	r2, r3, #12
 8042680:	687b      	ldr	r3, [r7, #4]
 8042682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042684:	492b      	ldr	r1, [pc, #172]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042686:	4313      	orrs	r3, r2
 8042688:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 804268a:	4b2a      	ldr	r3, [pc, #168]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804268e:	f023 0202 	bic.w	r2, r3, #2
 8042692:	687b      	ldr	r3, [r7, #4]
 8042694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042696:	4927      	ldr	r1, [pc, #156]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042698:	4313      	orrs	r3, r2
 804269a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 804269c:	4b25      	ldr	r3, [pc, #148]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 804269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80426a0:	4a24      	ldr	r2, [pc, #144]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80426a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80426a8:	4b22      	ldr	r3, [pc, #136]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80426ac:	4a21      	ldr	r2, [pc, #132]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80426b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80426b4:	4b1f      	ldr	r3, [pc, #124]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80426b8:	4a1e      	ldr	r2, [pc, #120]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80426be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80426c0:	4b1c      	ldr	r3, [pc, #112]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80426c4:	4a1b      	ldr	r2, [pc, #108]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426c6:	f043 0301 	orr.w	r3, r3, #1
 80426ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80426cc:	4b19      	ldr	r3, [pc, #100]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426ce:	681b      	ldr	r3, [r3, #0]
 80426d0:	4a18      	ldr	r2, [pc, #96]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80426d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80426d8:	f7fe fa2a 	bl	8040b30 <HAL_GetTick>
 80426dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80426de:	e008      	b.n	80426f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80426e0:	f7fe fa26 	bl	8040b30 <HAL_GetTick>
 80426e4:	4602      	mov	r2, r0
 80426e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80426e8:	1ad3      	subs	r3, r2, r3
 80426ea:	2b02      	cmp	r3, #2
 80426ec:	d901      	bls.n	80426f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80426ee:	2303      	movs	r3, #3
 80426f0:	e090      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80426f2:	4b10      	ldr	r3, [pc, #64]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 80426f4:	681b      	ldr	r3, [r3, #0]
 80426f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80426fa:	2b00      	cmp	r3, #0
 80426fc:	d0f0      	beq.n	80426e0 <HAL_RCC_OscConfig+0x670>
 80426fe:	e088      	b.n	8042812 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8042700:	4b0c      	ldr	r3, [pc, #48]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042702:	681b      	ldr	r3, [r3, #0]
 8042704:	4a0b      	ldr	r2, [pc, #44]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 804270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804270c:	f7fe fa10 	bl	8040b30 <HAL_GetTick>
 8042710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8042712:	e008      	b.n	8042726 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042714:	f7fe fa0c 	bl	8040b30 <HAL_GetTick>
 8042718:	4602      	mov	r2, r0
 804271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804271c:	1ad3      	subs	r3, r2, r3
 804271e:	2b02      	cmp	r3, #2
 8042720:	d901      	bls.n	8042726 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8042722:	2303      	movs	r3, #3
 8042724:	e076      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8042726:	4b03      	ldr	r3, [pc, #12]	@ (8042734 <HAL_RCC_OscConfig+0x6c4>)
 8042728:	681b      	ldr	r3, [r3, #0]
 804272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804272e:	2b00      	cmp	r3, #0
 8042730:	d1f0      	bne.n	8042714 <HAL_RCC_OscConfig+0x6a4>
 8042732:	e06e      	b.n	8042812 <HAL_RCC_OscConfig+0x7a2>
 8042734:	58024400 	.word	0x58024400
 8042738:	fffffc0c 	.word	0xfffffc0c
 804273c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8042740:	4b36      	ldr	r3, [pc, #216]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 8042742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8042746:	4b35      	ldr	r3, [pc, #212]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 8042748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804274a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804274c:	687b      	ldr	r3, [r7, #4]
 804274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042750:	2b01      	cmp	r3, #1
 8042752:	d031      	beq.n	80427b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8042754:	693b      	ldr	r3, [r7, #16]
 8042756:	f003 0203 	and.w	r2, r3, #3
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804275e:	429a      	cmp	r2, r3
 8042760:	d12a      	bne.n	80427b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8042762:	693b      	ldr	r3, [r7, #16]
 8042764:	091b      	lsrs	r3, r3, #4
 8042766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 804276a:	687b      	ldr	r3, [r7, #4]
 804276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804276e:	429a      	cmp	r2, r3
 8042770:	d122      	bne.n	80427b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8042772:	68fb      	ldr	r3, [r7, #12]
 8042774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8042778:	687b      	ldr	r3, [r7, #4]
 804277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804277c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 804277e:	429a      	cmp	r2, r3
 8042780:	d11a      	bne.n	80427b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8042782:	68fb      	ldr	r3, [r7, #12]
 8042784:	0a5b      	lsrs	r3, r3, #9
 8042786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804278a:	687b      	ldr	r3, [r7, #4]
 804278c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804278e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8042790:	429a      	cmp	r2, r3
 8042792:	d111      	bne.n	80427b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8042794:	68fb      	ldr	r3, [r7, #12]
 8042796:	0c1b      	lsrs	r3, r3, #16
 8042798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804279c:	687b      	ldr	r3, [r7, #4]
 804279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80427a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80427a2:	429a      	cmp	r2, r3
 80427a4:	d108      	bne.n	80427b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80427a6:	68fb      	ldr	r3, [r7, #12]
 80427a8:	0e1b      	lsrs	r3, r3, #24
 80427aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80427ae:	687b      	ldr	r3, [r7, #4]
 80427b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80427b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80427b4:	429a      	cmp	r2, r3
 80427b6:	d001      	beq.n	80427bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80427b8:	2301      	movs	r3, #1
 80427ba:	e02b      	b.n	8042814 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80427bc:	4b17      	ldr	r3, [pc, #92]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 80427be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80427c0:	08db      	lsrs	r3, r3, #3
 80427c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80427c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80427c8:	687b      	ldr	r3, [r7, #4]
 80427ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80427cc:	693a      	ldr	r2, [r7, #16]
 80427ce:	429a      	cmp	r2, r3
 80427d0:	d01f      	beq.n	8042812 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80427d2:	4b12      	ldr	r3, [pc, #72]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 80427d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80427d6:	4a11      	ldr	r2, [pc, #68]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 80427d8:	f023 0301 	bic.w	r3, r3, #1
 80427dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80427de:	f7fe f9a7 	bl	8040b30 <HAL_GetTick>
 80427e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80427e4:	bf00      	nop
 80427e6:	f7fe f9a3 	bl	8040b30 <HAL_GetTick>
 80427ea:	4602      	mov	r2, r0
 80427ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80427ee:	4293      	cmp	r3, r2
 80427f0:	d0f9      	beq.n	80427e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80427f2:	4b0a      	ldr	r3, [pc, #40]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 80427f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80427f6:	4b0a      	ldr	r3, [pc, #40]	@ (8042820 <HAL_RCC_OscConfig+0x7b0>)
 80427f8:	4013      	ands	r3, r2
 80427fa:	687a      	ldr	r2, [r7, #4]
 80427fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80427fe:	00d2      	lsls	r2, r2, #3
 8042800:	4906      	ldr	r1, [pc, #24]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 8042802:	4313      	orrs	r3, r2
 8042804:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8042806:	4b05      	ldr	r3, [pc, #20]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 8042808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804280a:	4a04      	ldr	r2, [pc, #16]	@ (804281c <HAL_RCC_OscConfig+0x7ac>)
 804280c:	f043 0301 	orr.w	r3, r3, #1
 8042810:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8042812:	2300      	movs	r3, #0
}
 8042814:	4618      	mov	r0, r3
 8042816:	3730      	adds	r7, #48	@ 0x30
 8042818:	46bd      	mov	sp, r7
 804281a:	bd80      	pop	{r7, pc}
 804281c:	58024400 	.word	0x58024400
 8042820:	ffff0007 	.word	0xffff0007

08042824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042824:	b580      	push	{r7, lr}
 8042826:	b086      	sub	sp, #24
 8042828:	af00      	add	r7, sp, #0
 804282a:	6078      	str	r0, [r7, #4]
 804282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804282e:	687b      	ldr	r3, [r7, #4]
 8042830:	2b00      	cmp	r3, #0
 8042832:	d101      	bne.n	8042838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8042834:	2301      	movs	r3, #1
 8042836:	e19c      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8042838:	4b8a      	ldr	r3, [pc, #552]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 804283a:	681b      	ldr	r3, [r3, #0]
 804283c:	f003 030f 	and.w	r3, r3, #15
 8042840:	683a      	ldr	r2, [r7, #0]
 8042842:	429a      	cmp	r2, r3
 8042844:	d910      	bls.n	8042868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042846:	4b87      	ldr	r3, [pc, #540]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042848:	681b      	ldr	r3, [r3, #0]
 804284a:	f023 020f 	bic.w	r2, r3, #15
 804284e:	4985      	ldr	r1, [pc, #532]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042850:	683b      	ldr	r3, [r7, #0]
 8042852:	4313      	orrs	r3, r2
 8042854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042856:	4b83      	ldr	r3, [pc, #524]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042858:	681b      	ldr	r3, [r3, #0]
 804285a:	f003 030f 	and.w	r3, r3, #15
 804285e:	683a      	ldr	r2, [r7, #0]
 8042860:	429a      	cmp	r2, r3
 8042862:	d001      	beq.n	8042868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8042864:	2301      	movs	r3, #1
 8042866:	e184      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8042868:	687b      	ldr	r3, [r7, #4]
 804286a:	681b      	ldr	r3, [r3, #0]
 804286c:	f003 0304 	and.w	r3, r3, #4
 8042870:	2b00      	cmp	r3, #0
 8042872:	d010      	beq.n	8042896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8042874:	687b      	ldr	r3, [r7, #4]
 8042876:	691a      	ldr	r2, [r3, #16]
 8042878:	4b7b      	ldr	r3, [pc, #492]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 804287a:	699b      	ldr	r3, [r3, #24]
 804287c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8042880:	429a      	cmp	r2, r3
 8042882:	d908      	bls.n	8042896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8042884:	4b78      	ldr	r3, [pc, #480]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042886:	699b      	ldr	r3, [r3, #24]
 8042888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 804288c:	687b      	ldr	r3, [r7, #4]
 804288e:	691b      	ldr	r3, [r3, #16]
 8042890:	4975      	ldr	r1, [pc, #468]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042892:	4313      	orrs	r3, r2
 8042894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042896:	687b      	ldr	r3, [r7, #4]
 8042898:	681b      	ldr	r3, [r3, #0]
 804289a:	f003 0308 	and.w	r3, r3, #8
 804289e:	2b00      	cmp	r3, #0
 80428a0:	d010      	beq.n	80428c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80428a2:	687b      	ldr	r3, [r7, #4]
 80428a4:	695a      	ldr	r2, [r3, #20]
 80428a6:	4b70      	ldr	r3, [pc, #448]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80428a8:	69db      	ldr	r3, [r3, #28]
 80428aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80428ae:	429a      	cmp	r2, r3
 80428b0:	d908      	bls.n	80428c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80428b2:	4b6d      	ldr	r3, [pc, #436]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80428b4:	69db      	ldr	r3, [r3, #28]
 80428b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	695b      	ldr	r3, [r3, #20]
 80428be:	496a      	ldr	r1, [pc, #424]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80428c0:	4313      	orrs	r3, r2
 80428c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80428c4:	687b      	ldr	r3, [r7, #4]
 80428c6:	681b      	ldr	r3, [r3, #0]
 80428c8:	f003 0310 	and.w	r3, r3, #16
 80428cc:	2b00      	cmp	r3, #0
 80428ce:	d010      	beq.n	80428f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80428d0:	687b      	ldr	r3, [r7, #4]
 80428d2:	699a      	ldr	r2, [r3, #24]
 80428d4:	4b64      	ldr	r3, [pc, #400]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80428d6:	69db      	ldr	r3, [r3, #28]
 80428d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80428dc:	429a      	cmp	r2, r3
 80428de:	d908      	bls.n	80428f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80428e0:	4b61      	ldr	r3, [pc, #388]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80428e2:	69db      	ldr	r3, [r3, #28]
 80428e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	699b      	ldr	r3, [r3, #24]
 80428ec:	495e      	ldr	r1, [pc, #376]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80428ee:	4313      	orrs	r3, r2
 80428f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80428f2:	687b      	ldr	r3, [r7, #4]
 80428f4:	681b      	ldr	r3, [r3, #0]
 80428f6:	f003 0320 	and.w	r3, r3, #32
 80428fa:	2b00      	cmp	r3, #0
 80428fc:	d010      	beq.n	8042920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80428fe:	687b      	ldr	r3, [r7, #4]
 8042900:	69da      	ldr	r2, [r3, #28]
 8042902:	4b59      	ldr	r3, [pc, #356]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042904:	6a1b      	ldr	r3, [r3, #32]
 8042906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 804290a:	429a      	cmp	r2, r3
 804290c:	d908      	bls.n	8042920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 804290e:	4b56      	ldr	r3, [pc, #344]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042910:	6a1b      	ldr	r3, [r3, #32]
 8042912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8042916:	687b      	ldr	r3, [r7, #4]
 8042918:	69db      	ldr	r3, [r3, #28]
 804291a:	4953      	ldr	r1, [pc, #332]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 804291c:	4313      	orrs	r3, r2
 804291e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042920:	687b      	ldr	r3, [r7, #4]
 8042922:	681b      	ldr	r3, [r3, #0]
 8042924:	f003 0302 	and.w	r3, r3, #2
 8042928:	2b00      	cmp	r3, #0
 804292a:	d010      	beq.n	804294e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 804292c:	687b      	ldr	r3, [r7, #4]
 804292e:	68da      	ldr	r2, [r3, #12]
 8042930:	4b4d      	ldr	r3, [pc, #308]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042932:	699b      	ldr	r3, [r3, #24]
 8042934:	f003 030f 	and.w	r3, r3, #15
 8042938:	429a      	cmp	r2, r3
 804293a:	d908      	bls.n	804294e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804293c:	4b4a      	ldr	r3, [pc, #296]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 804293e:	699b      	ldr	r3, [r3, #24]
 8042940:	f023 020f 	bic.w	r2, r3, #15
 8042944:	687b      	ldr	r3, [r7, #4]
 8042946:	68db      	ldr	r3, [r3, #12]
 8042948:	4947      	ldr	r1, [pc, #284]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 804294a:	4313      	orrs	r3, r2
 804294c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804294e:	687b      	ldr	r3, [r7, #4]
 8042950:	681b      	ldr	r3, [r3, #0]
 8042952:	f003 0301 	and.w	r3, r3, #1
 8042956:	2b00      	cmp	r3, #0
 8042958:	d055      	beq.n	8042a06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 804295a:	4b43      	ldr	r3, [pc, #268]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 804295c:	699b      	ldr	r3, [r3, #24]
 804295e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8042962:	687b      	ldr	r3, [r7, #4]
 8042964:	689b      	ldr	r3, [r3, #8]
 8042966:	4940      	ldr	r1, [pc, #256]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042968:	4313      	orrs	r3, r2
 804296a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804296c:	687b      	ldr	r3, [r7, #4]
 804296e:	685b      	ldr	r3, [r3, #4]
 8042970:	2b02      	cmp	r3, #2
 8042972:	d107      	bne.n	8042984 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8042974:	4b3c      	ldr	r3, [pc, #240]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042976:	681b      	ldr	r3, [r3, #0]
 8042978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804297c:	2b00      	cmp	r3, #0
 804297e:	d121      	bne.n	80429c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8042980:	2301      	movs	r3, #1
 8042982:	e0f6      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042984:	687b      	ldr	r3, [r7, #4]
 8042986:	685b      	ldr	r3, [r3, #4]
 8042988:	2b03      	cmp	r3, #3
 804298a:	d107      	bne.n	804299c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 804298c:	4b36      	ldr	r3, [pc, #216]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 804298e:	681b      	ldr	r3, [r3, #0]
 8042990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8042994:	2b00      	cmp	r3, #0
 8042996:	d115      	bne.n	80429c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8042998:	2301      	movs	r3, #1
 804299a:	e0ea      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 804299c:	687b      	ldr	r3, [r7, #4]
 804299e:	685b      	ldr	r3, [r3, #4]
 80429a0:	2b01      	cmp	r3, #1
 80429a2:	d107      	bne.n	80429b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80429a4:	4b30      	ldr	r3, [pc, #192]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80429a6:	681b      	ldr	r3, [r3, #0]
 80429a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80429ac:	2b00      	cmp	r3, #0
 80429ae:	d109      	bne.n	80429c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80429b0:	2301      	movs	r3, #1
 80429b2:	e0de      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80429b4:	4b2c      	ldr	r3, [pc, #176]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80429b6:	681b      	ldr	r3, [r3, #0]
 80429b8:	f003 0304 	and.w	r3, r3, #4
 80429bc:	2b00      	cmp	r3, #0
 80429be:	d101      	bne.n	80429c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80429c0:	2301      	movs	r3, #1
 80429c2:	e0d6      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80429c4:	4b28      	ldr	r3, [pc, #160]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80429c6:	691b      	ldr	r3, [r3, #16]
 80429c8:	f023 0207 	bic.w	r2, r3, #7
 80429cc:	687b      	ldr	r3, [r7, #4]
 80429ce:	685b      	ldr	r3, [r3, #4]
 80429d0:	4925      	ldr	r1, [pc, #148]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80429d2:	4313      	orrs	r3, r2
 80429d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80429d6:	f7fe f8ab 	bl	8040b30 <HAL_GetTick>
 80429da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80429dc:	e00a      	b.n	80429f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80429de:	f7fe f8a7 	bl	8040b30 <HAL_GetTick>
 80429e2:	4602      	mov	r2, r0
 80429e4:	697b      	ldr	r3, [r7, #20]
 80429e6:	1ad3      	subs	r3, r2, r3
 80429e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80429ec:	4293      	cmp	r3, r2
 80429ee:	d901      	bls.n	80429f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80429f0:	2303      	movs	r3, #3
 80429f2:	e0be      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80429f4:	4b1c      	ldr	r3, [pc, #112]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 80429f6:	691b      	ldr	r3, [r3, #16]
 80429f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80429fc:	687b      	ldr	r3, [r7, #4]
 80429fe:	685b      	ldr	r3, [r3, #4]
 8042a00:	00db      	lsls	r3, r3, #3
 8042a02:	429a      	cmp	r2, r3
 8042a04:	d1eb      	bne.n	80429de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042a06:	687b      	ldr	r3, [r7, #4]
 8042a08:	681b      	ldr	r3, [r3, #0]
 8042a0a:	f003 0302 	and.w	r3, r3, #2
 8042a0e:	2b00      	cmp	r3, #0
 8042a10:	d010      	beq.n	8042a34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8042a12:	687b      	ldr	r3, [r7, #4]
 8042a14:	68da      	ldr	r2, [r3, #12]
 8042a16:	4b14      	ldr	r3, [pc, #80]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042a18:	699b      	ldr	r3, [r3, #24]
 8042a1a:	f003 030f 	and.w	r3, r3, #15
 8042a1e:	429a      	cmp	r2, r3
 8042a20:	d208      	bcs.n	8042a34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8042a22:	4b11      	ldr	r3, [pc, #68]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042a24:	699b      	ldr	r3, [r3, #24]
 8042a26:	f023 020f 	bic.w	r2, r3, #15
 8042a2a:	687b      	ldr	r3, [r7, #4]
 8042a2c:	68db      	ldr	r3, [r3, #12]
 8042a2e:	490e      	ldr	r1, [pc, #56]	@ (8042a68 <HAL_RCC_ClockConfig+0x244>)
 8042a30:	4313      	orrs	r3, r2
 8042a32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042a34:	4b0b      	ldr	r3, [pc, #44]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042a36:	681b      	ldr	r3, [r3, #0]
 8042a38:	f003 030f 	and.w	r3, r3, #15
 8042a3c:	683a      	ldr	r2, [r7, #0]
 8042a3e:	429a      	cmp	r2, r3
 8042a40:	d214      	bcs.n	8042a6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042a42:	4b08      	ldr	r3, [pc, #32]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042a44:	681b      	ldr	r3, [r3, #0]
 8042a46:	f023 020f 	bic.w	r2, r3, #15
 8042a4a:	4906      	ldr	r1, [pc, #24]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042a4c:	683b      	ldr	r3, [r7, #0]
 8042a4e:	4313      	orrs	r3, r2
 8042a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042a52:	4b04      	ldr	r3, [pc, #16]	@ (8042a64 <HAL_RCC_ClockConfig+0x240>)
 8042a54:	681b      	ldr	r3, [r3, #0]
 8042a56:	f003 030f 	and.w	r3, r3, #15
 8042a5a:	683a      	ldr	r2, [r7, #0]
 8042a5c:	429a      	cmp	r2, r3
 8042a5e:	d005      	beq.n	8042a6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8042a60:	2301      	movs	r3, #1
 8042a62:	e086      	b.n	8042b72 <HAL_RCC_ClockConfig+0x34e>
 8042a64:	52002000 	.word	0x52002000
 8042a68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8042a6c:	687b      	ldr	r3, [r7, #4]
 8042a6e:	681b      	ldr	r3, [r3, #0]
 8042a70:	f003 0304 	and.w	r3, r3, #4
 8042a74:	2b00      	cmp	r3, #0
 8042a76:	d010      	beq.n	8042a9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8042a78:	687b      	ldr	r3, [r7, #4]
 8042a7a:	691a      	ldr	r2, [r3, #16]
 8042a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042a7e:	699b      	ldr	r3, [r3, #24]
 8042a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8042a84:	429a      	cmp	r2, r3
 8042a86:	d208      	bcs.n	8042a9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8042a88:	4b3c      	ldr	r3, [pc, #240]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042a8a:	699b      	ldr	r3, [r3, #24]
 8042a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8042a90:	687b      	ldr	r3, [r7, #4]
 8042a92:	691b      	ldr	r3, [r3, #16]
 8042a94:	4939      	ldr	r1, [pc, #228]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042a96:	4313      	orrs	r3, r2
 8042a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042a9a:	687b      	ldr	r3, [r7, #4]
 8042a9c:	681b      	ldr	r3, [r3, #0]
 8042a9e:	f003 0308 	and.w	r3, r3, #8
 8042aa2:	2b00      	cmp	r3, #0
 8042aa4:	d010      	beq.n	8042ac8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8042aa6:	687b      	ldr	r3, [r7, #4]
 8042aa8:	695a      	ldr	r2, [r3, #20]
 8042aaa:	4b34      	ldr	r3, [pc, #208]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042aac:	69db      	ldr	r3, [r3, #28]
 8042aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8042ab2:	429a      	cmp	r2, r3
 8042ab4:	d208      	bcs.n	8042ac8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8042ab6:	4b31      	ldr	r3, [pc, #196]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042ab8:	69db      	ldr	r3, [r3, #28]
 8042aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8042abe:	687b      	ldr	r3, [r7, #4]
 8042ac0:	695b      	ldr	r3, [r3, #20]
 8042ac2:	492e      	ldr	r1, [pc, #184]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042ac4:	4313      	orrs	r3, r2
 8042ac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042ac8:	687b      	ldr	r3, [r7, #4]
 8042aca:	681b      	ldr	r3, [r3, #0]
 8042acc:	f003 0310 	and.w	r3, r3, #16
 8042ad0:	2b00      	cmp	r3, #0
 8042ad2:	d010      	beq.n	8042af6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	699a      	ldr	r2, [r3, #24]
 8042ad8:	4b28      	ldr	r3, [pc, #160]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042ada:	69db      	ldr	r3, [r3, #28]
 8042adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8042ae0:	429a      	cmp	r2, r3
 8042ae2:	d208      	bcs.n	8042af6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8042ae4:	4b25      	ldr	r3, [pc, #148]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042ae6:	69db      	ldr	r3, [r3, #28]
 8042ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8042aec:	687b      	ldr	r3, [r7, #4]
 8042aee:	699b      	ldr	r3, [r3, #24]
 8042af0:	4922      	ldr	r1, [pc, #136]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042af2:	4313      	orrs	r3, r2
 8042af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8042af6:	687b      	ldr	r3, [r7, #4]
 8042af8:	681b      	ldr	r3, [r3, #0]
 8042afa:	f003 0320 	and.w	r3, r3, #32
 8042afe:	2b00      	cmp	r3, #0
 8042b00:	d010      	beq.n	8042b24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	69da      	ldr	r2, [r3, #28]
 8042b06:	4b1d      	ldr	r3, [pc, #116]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042b08:	6a1b      	ldr	r3, [r3, #32]
 8042b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8042b0e:	429a      	cmp	r2, r3
 8042b10:	d208      	bcs.n	8042b24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8042b12:	4b1a      	ldr	r3, [pc, #104]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042b14:	6a1b      	ldr	r3, [r3, #32]
 8042b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8042b1a:	687b      	ldr	r3, [r7, #4]
 8042b1c:	69db      	ldr	r3, [r3, #28]
 8042b1e:	4917      	ldr	r1, [pc, #92]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042b20:	4313      	orrs	r3, r2
 8042b22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8042b24:	f000 f834 	bl	8042b90 <HAL_RCC_GetSysClockFreq>
 8042b28:	4602      	mov	r2, r0
 8042b2a:	4b14      	ldr	r3, [pc, #80]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042b2c:	699b      	ldr	r3, [r3, #24]
 8042b2e:	0a1b      	lsrs	r3, r3, #8
 8042b30:	f003 030f 	and.w	r3, r3, #15
 8042b34:	4912      	ldr	r1, [pc, #72]	@ (8042b80 <HAL_RCC_ClockConfig+0x35c>)
 8042b36:	5ccb      	ldrb	r3, [r1, r3]
 8042b38:	f003 031f 	and.w	r3, r3, #31
 8042b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8042b40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042b42:	4b0e      	ldr	r3, [pc, #56]	@ (8042b7c <HAL_RCC_ClockConfig+0x358>)
 8042b44:	699b      	ldr	r3, [r3, #24]
 8042b46:	f003 030f 	and.w	r3, r3, #15
 8042b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8042b80 <HAL_RCC_ClockConfig+0x35c>)
 8042b4c:	5cd3      	ldrb	r3, [r2, r3]
 8042b4e:	f003 031f 	and.w	r3, r3, #31
 8042b52:	693a      	ldr	r2, [r7, #16]
 8042b54:	fa22 f303 	lsr.w	r3, r2, r3
 8042b58:	4a0a      	ldr	r2, [pc, #40]	@ (8042b84 <HAL_RCC_ClockConfig+0x360>)
 8042b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8042b88 <HAL_RCC_ClockConfig+0x364>)
 8042b5e:	693b      	ldr	r3, [r7, #16]
 8042b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8042b62:	4b0a      	ldr	r3, [pc, #40]	@ (8042b8c <HAL_RCC_ClockConfig+0x368>)
 8042b64:	681b      	ldr	r3, [r3, #0]
 8042b66:	4618      	mov	r0, r3
 8042b68:	f7fd fe24 	bl	80407b4 <HAL_InitTick>
 8042b6c:	4603      	mov	r3, r0
 8042b6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8042b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8042b72:	4618      	mov	r0, r3
 8042b74:	3718      	adds	r7, #24
 8042b76:	46bd      	mov	sp, r7
 8042b78:	bd80      	pop	{r7, pc}
 8042b7a:	bf00      	nop
 8042b7c:	58024400 	.word	0x58024400
 8042b80:	08047834 	.word	0x08047834
 8042b84:	24000004 	.word	0x24000004
 8042b88:	24000000 	.word	0x24000000
 8042b8c:	24000008 	.word	0x24000008

08042b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042b90:	b480      	push	{r7}
 8042b92:	b089      	sub	sp, #36	@ 0x24
 8042b94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042b96:	4bb3      	ldr	r3, [pc, #716]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042b98:	691b      	ldr	r3, [r3, #16]
 8042b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8042b9e:	2b18      	cmp	r3, #24
 8042ba0:	f200 8155 	bhi.w	8042e4e <HAL_RCC_GetSysClockFreq+0x2be>
 8042ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8042bac <HAL_RCC_GetSysClockFreq+0x1c>)
 8042ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042baa:	bf00      	nop
 8042bac:	08042c11 	.word	0x08042c11
 8042bb0:	08042e4f 	.word	0x08042e4f
 8042bb4:	08042e4f 	.word	0x08042e4f
 8042bb8:	08042e4f 	.word	0x08042e4f
 8042bbc:	08042e4f 	.word	0x08042e4f
 8042bc0:	08042e4f 	.word	0x08042e4f
 8042bc4:	08042e4f 	.word	0x08042e4f
 8042bc8:	08042e4f 	.word	0x08042e4f
 8042bcc:	08042c37 	.word	0x08042c37
 8042bd0:	08042e4f 	.word	0x08042e4f
 8042bd4:	08042e4f 	.word	0x08042e4f
 8042bd8:	08042e4f 	.word	0x08042e4f
 8042bdc:	08042e4f 	.word	0x08042e4f
 8042be0:	08042e4f 	.word	0x08042e4f
 8042be4:	08042e4f 	.word	0x08042e4f
 8042be8:	08042e4f 	.word	0x08042e4f
 8042bec:	08042c3d 	.word	0x08042c3d
 8042bf0:	08042e4f 	.word	0x08042e4f
 8042bf4:	08042e4f 	.word	0x08042e4f
 8042bf8:	08042e4f 	.word	0x08042e4f
 8042bfc:	08042e4f 	.word	0x08042e4f
 8042c00:	08042e4f 	.word	0x08042e4f
 8042c04:	08042e4f 	.word	0x08042e4f
 8042c08:	08042e4f 	.word	0x08042e4f
 8042c0c:	08042c43 	.word	0x08042c43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8042c10:	4b94      	ldr	r3, [pc, #592]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042c12:	681b      	ldr	r3, [r3, #0]
 8042c14:	f003 0320 	and.w	r3, r3, #32
 8042c18:	2b00      	cmp	r3, #0
 8042c1a:	d009      	beq.n	8042c30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8042c1c:	4b91      	ldr	r3, [pc, #580]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042c1e:	681b      	ldr	r3, [r3, #0]
 8042c20:	08db      	lsrs	r3, r3, #3
 8042c22:	f003 0303 	and.w	r3, r3, #3
 8042c26:	4a90      	ldr	r2, [pc, #576]	@ (8042e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042c28:	fa22 f303 	lsr.w	r3, r2, r3
 8042c2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8042c2e:	e111      	b.n	8042e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8042c30:	4b8d      	ldr	r3, [pc, #564]	@ (8042e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042c32:	61bb      	str	r3, [r7, #24]
      break;
 8042c34:	e10e      	b.n	8042e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8042c36:	4b8d      	ldr	r3, [pc, #564]	@ (8042e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8042c38:	61bb      	str	r3, [r7, #24]
      break;
 8042c3a:	e10b      	b.n	8042e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8042c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8042e70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8042c3e:	61bb      	str	r3, [r7, #24]
      break;
 8042c40:	e108      	b.n	8042e54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8042c42:	4b88      	ldr	r3, [pc, #544]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042c46:	f003 0303 	and.w	r3, r3, #3
 8042c4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8042c4c:	4b85      	ldr	r3, [pc, #532]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042c50:	091b      	lsrs	r3, r3, #4
 8042c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042c56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8042c58:	4b82      	ldr	r3, [pc, #520]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042c5c:	f003 0301 	and.w	r3, r3, #1
 8042c60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8042c62:	4b80      	ldr	r3, [pc, #512]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8042c66:	08db      	lsrs	r3, r3, #3
 8042c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8042c6c:	68fa      	ldr	r2, [r7, #12]
 8042c6e:	fb02 f303 	mul.w	r3, r2, r3
 8042c72:	ee07 3a90 	vmov	s15, r3
 8042c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042c7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8042c7e:	693b      	ldr	r3, [r7, #16]
 8042c80:	2b00      	cmp	r3, #0
 8042c82:	f000 80e1 	beq.w	8042e48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8042c86:	697b      	ldr	r3, [r7, #20]
 8042c88:	2b02      	cmp	r3, #2
 8042c8a:	f000 8083 	beq.w	8042d94 <HAL_RCC_GetSysClockFreq+0x204>
 8042c8e:	697b      	ldr	r3, [r7, #20]
 8042c90:	2b02      	cmp	r3, #2
 8042c92:	f200 80a1 	bhi.w	8042dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8042c96:	697b      	ldr	r3, [r7, #20]
 8042c98:	2b00      	cmp	r3, #0
 8042c9a:	d003      	beq.n	8042ca4 <HAL_RCC_GetSysClockFreq+0x114>
 8042c9c:	697b      	ldr	r3, [r7, #20]
 8042c9e:	2b01      	cmp	r3, #1
 8042ca0:	d056      	beq.n	8042d50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8042ca2:	e099      	b.n	8042dd8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8042ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042ca6:	681b      	ldr	r3, [r3, #0]
 8042ca8:	f003 0320 	and.w	r3, r3, #32
 8042cac:	2b00      	cmp	r3, #0
 8042cae:	d02d      	beq.n	8042d0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8042cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042cb2:	681b      	ldr	r3, [r3, #0]
 8042cb4:	08db      	lsrs	r3, r3, #3
 8042cb6:	f003 0303 	and.w	r3, r3, #3
 8042cba:	4a6b      	ldr	r2, [pc, #428]	@ (8042e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8042cc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042cc2:	687b      	ldr	r3, [r7, #4]
 8042cc4:	ee07 3a90 	vmov	s15, r3
 8042cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042ccc:	693b      	ldr	r3, [r7, #16]
 8042cce:	ee07 3a90 	vmov	s15, r3
 8042cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042cda:	4b62      	ldr	r3, [pc, #392]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042ce2:	ee07 3a90 	vmov	s15, r3
 8042ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8042cee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8042e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8042cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042d06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8042d0a:	e087      	b.n	8042e1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042d0c:	693b      	ldr	r3, [r7, #16]
 8042d0e:	ee07 3a90 	vmov	s15, r3
 8042d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042d16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8042e78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8042d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042d1e:	4b51      	ldr	r3, [pc, #324]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042d26:	ee07 3a90 	vmov	s15, r3
 8042d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8042d32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8042e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8042d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8042d4e:	e065      	b.n	8042e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042d50:	693b      	ldr	r3, [r7, #16]
 8042d52:	ee07 3a90 	vmov	s15, r3
 8042d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042d5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8042e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8042d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042d62:	4b40      	ldr	r3, [pc, #256]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042d6a:	ee07 3a90 	vmov	s15, r3
 8042d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8042d76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8042e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8042d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8042d92:	e043      	b.n	8042e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042d94:	693b      	ldr	r3, [r7, #16]
 8042d96:	ee07 3a90 	vmov	s15, r3
 8042d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042d9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8042e80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8042da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042da6:	4b2f      	ldr	r3, [pc, #188]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042dae:	ee07 3a90 	vmov	s15, r3
 8042db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8042dba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8042e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8042dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8042dd6:	e021      	b.n	8042e1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042dd8:	693b      	ldr	r3, [r7, #16]
 8042dda:	ee07 3a90 	vmov	s15, r3
 8042dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042de2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8042e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8042de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042dea:	4b1e      	ldr	r3, [pc, #120]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042df2:	ee07 3a90 	vmov	s15, r3
 8042df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8042dfe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8042e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8042e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8042e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8042e1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8042e1c:	4b11      	ldr	r3, [pc, #68]	@ (8042e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042e20:	0a5b      	lsrs	r3, r3, #9
 8042e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8042e26:	3301      	adds	r3, #1
 8042e28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8042e2a:	683b      	ldr	r3, [r7, #0]
 8042e2c:	ee07 3a90 	vmov	s15, r3
 8042e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8042e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8042e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8042e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8042e40:	ee17 3a90 	vmov	r3, s15
 8042e44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8042e46:	e005      	b.n	8042e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8042e48:	2300      	movs	r3, #0
 8042e4a:	61bb      	str	r3, [r7, #24]
      break;
 8042e4c:	e002      	b.n	8042e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8042e4e:	4b07      	ldr	r3, [pc, #28]	@ (8042e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8042e50:	61bb      	str	r3, [r7, #24]
      break;
 8042e52:	bf00      	nop
  }

  return sysclockfreq;
 8042e54:	69bb      	ldr	r3, [r7, #24]
}
 8042e56:	4618      	mov	r0, r3
 8042e58:	3724      	adds	r7, #36	@ 0x24
 8042e5a:	46bd      	mov	sp, r7
 8042e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e60:	4770      	bx	lr
 8042e62:	bf00      	nop
 8042e64:	58024400 	.word	0x58024400
 8042e68:	03d09000 	.word	0x03d09000
 8042e6c:	003d0900 	.word	0x003d0900
 8042e70:	017d7840 	.word	0x017d7840
 8042e74:	46000000 	.word	0x46000000
 8042e78:	4c742400 	.word	0x4c742400
 8042e7c:	4a742400 	.word	0x4a742400
 8042e80:	4bbebc20 	.word	0x4bbebc20

08042e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042e84:	b580      	push	{r7, lr}
 8042e86:	b082      	sub	sp, #8
 8042e88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8042e8a:	f7ff fe81 	bl	8042b90 <HAL_RCC_GetSysClockFreq>
 8042e8e:	4602      	mov	r2, r0
 8042e90:	4b10      	ldr	r3, [pc, #64]	@ (8042ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8042e92:	699b      	ldr	r3, [r3, #24]
 8042e94:	0a1b      	lsrs	r3, r3, #8
 8042e96:	f003 030f 	and.w	r3, r3, #15
 8042e9a:	490f      	ldr	r1, [pc, #60]	@ (8042ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8042e9c:	5ccb      	ldrb	r3, [r1, r3]
 8042e9e:	f003 031f 	and.w	r3, r3, #31
 8042ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8042ea6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8042ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8042eaa:	699b      	ldr	r3, [r3, #24]
 8042eac:	f003 030f 	and.w	r3, r3, #15
 8042eb0:	4a09      	ldr	r2, [pc, #36]	@ (8042ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8042eb2:	5cd3      	ldrb	r3, [r2, r3]
 8042eb4:	f003 031f 	and.w	r3, r3, #31
 8042eb8:	687a      	ldr	r2, [r7, #4]
 8042eba:	fa22 f303 	lsr.w	r3, r2, r3
 8042ebe:	4a07      	ldr	r2, [pc, #28]	@ (8042edc <HAL_RCC_GetHCLKFreq+0x58>)
 8042ec0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042ec2:	4a07      	ldr	r2, [pc, #28]	@ (8042ee0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8042ec4:	687b      	ldr	r3, [r7, #4]
 8042ec6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8042ec8:	4b04      	ldr	r3, [pc, #16]	@ (8042edc <HAL_RCC_GetHCLKFreq+0x58>)
 8042eca:	681b      	ldr	r3, [r3, #0]
}
 8042ecc:	4618      	mov	r0, r3
 8042ece:	3708      	adds	r7, #8
 8042ed0:	46bd      	mov	sp, r7
 8042ed2:	bd80      	pop	{r7, pc}
 8042ed4:	58024400 	.word	0x58024400
 8042ed8:	08047834 	.word	0x08047834
 8042edc:	24000004 	.word	0x24000004
 8042ee0:	24000000 	.word	0x24000000

08042ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042ee4:	b580      	push	{r7, lr}
 8042ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8042ee8:	f7ff ffcc 	bl	8042e84 <HAL_RCC_GetHCLKFreq>
 8042eec:	4602      	mov	r2, r0
 8042eee:	4b06      	ldr	r3, [pc, #24]	@ (8042f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8042ef0:	69db      	ldr	r3, [r3, #28]
 8042ef2:	0a1b      	lsrs	r3, r3, #8
 8042ef4:	f003 0307 	and.w	r3, r3, #7
 8042ef8:	4904      	ldr	r1, [pc, #16]	@ (8042f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8042efa:	5ccb      	ldrb	r3, [r1, r3]
 8042efc:	f003 031f 	and.w	r3, r3, #31
 8042f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8042f04:	4618      	mov	r0, r3
 8042f06:	bd80      	pop	{r7, pc}
 8042f08:	58024400 	.word	0x58024400
 8042f0c:	08047834 	.word	0x08047834

08042f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8042f10:	b480      	push	{r7}
 8042f12:	b083      	sub	sp, #12
 8042f14:	af00      	add	r7, sp, #0
 8042f16:	6078      	str	r0, [r7, #4]
 8042f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8042f1a:	687b      	ldr	r3, [r7, #4]
 8042f1c:	223f      	movs	r2, #63	@ 0x3f
 8042f1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8042f20:	4b1a      	ldr	r3, [pc, #104]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f22:	691b      	ldr	r3, [r3, #16]
 8042f24:	f003 0207 	and.w	r2, r3, #7
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8042f2c:	4b17      	ldr	r3, [pc, #92]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f2e:	699b      	ldr	r3, [r3, #24]
 8042f30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8042f34:	687b      	ldr	r3, [r7, #4]
 8042f36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8042f38:	4b14      	ldr	r3, [pc, #80]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f3a:	699b      	ldr	r3, [r3, #24]
 8042f3c:	f003 020f 	and.w	r2, r3, #15
 8042f40:	687b      	ldr	r3, [r7, #4]
 8042f42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8042f44:	4b11      	ldr	r3, [pc, #68]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f46:	699b      	ldr	r3, [r3, #24]
 8042f48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8042f4c:	687b      	ldr	r3, [r7, #4]
 8042f4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8042f50:	4b0e      	ldr	r3, [pc, #56]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f52:	69db      	ldr	r3, [r3, #28]
 8042f54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8042f58:	687b      	ldr	r3, [r7, #4]
 8042f5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8042f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f5e:	69db      	ldr	r3, [r3, #28]
 8042f60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8042f68:	4b08      	ldr	r3, [pc, #32]	@ (8042f8c <HAL_RCC_GetClockConfig+0x7c>)
 8042f6a:	6a1b      	ldr	r3, [r3, #32]
 8042f6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8042f70:	687b      	ldr	r3, [r7, #4]
 8042f72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8042f74:	4b06      	ldr	r3, [pc, #24]	@ (8042f90 <HAL_RCC_GetClockConfig+0x80>)
 8042f76:	681b      	ldr	r3, [r3, #0]
 8042f78:	f003 020f 	and.w	r2, r3, #15
 8042f7c:	683b      	ldr	r3, [r7, #0]
 8042f7e:	601a      	str	r2, [r3, #0]
}
 8042f80:	bf00      	nop
 8042f82:	370c      	adds	r7, #12
 8042f84:	46bd      	mov	sp, r7
 8042f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f8a:	4770      	bx	lr
 8042f8c:	58024400 	.word	0x58024400
 8042f90:	52002000 	.word	0x52002000

08042f94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042f98:	b0c6      	sub	sp, #280	@ 0x118
 8042f9a:	af00      	add	r7, sp, #0
 8042f9c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8042fa0:	2300      	movs	r3, #0
 8042fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8042fa6:	2300      	movs	r3, #0
 8042fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8042fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042fb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8042fb8:	2500      	movs	r5, #0
 8042fba:	ea54 0305 	orrs.w	r3, r4, r5
 8042fbe:	d049      	beq.n	8043054 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8042fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8042fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8042fc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8042fca:	d02f      	beq.n	804302c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8042fcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8042fd0:	d828      	bhi.n	8043024 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8042fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8042fd6:	d01a      	beq.n	804300e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8042fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8042fdc:	d822      	bhi.n	8043024 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8042fde:	2b00      	cmp	r3, #0
 8042fe0:	d003      	beq.n	8042fea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8042fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042fe6:	d007      	beq.n	8042ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8042fe8:	e01c      	b.n	8043024 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042fea:	4bab      	ldr	r3, [pc, #684]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8042fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042fee:	4aaa      	ldr	r2, [pc, #680]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8042ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8042ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8042ff6:	e01a      	b.n	804302e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8042ffc:	3308      	adds	r3, #8
 8042ffe:	2102      	movs	r1, #2
 8043000:	4618      	mov	r0, r3
 8043002:	f001 f967 	bl	80442d4 <RCCEx_PLL2_Config>
 8043006:	4603      	mov	r3, r0
 8043008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 804300c:	e00f      	b.n	804302e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804300e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043012:	3328      	adds	r3, #40	@ 0x28
 8043014:	2102      	movs	r1, #2
 8043016:	4618      	mov	r0, r3
 8043018:	f001 fa0e 	bl	8044438 <RCCEx_PLL3_Config>
 804301c:	4603      	mov	r3, r0
 804301e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8043022:	e004      	b.n	804302e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043024:	2301      	movs	r3, #1
 8043026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 804302a:	e000      	b.n	804302e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 804302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 804302e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043032:	2b00      	cmp	r3, #0
 8043034:	d10a      	bne.n	804304c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8043036:	4b98      	ldr	r3, [pc, #608]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804303a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 804303e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8043044:	4a94      	ldr	r2, [pc, #592]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043046:	430b      	orrs	r3, r1
 8043048:	6513      	str	r3, [r2, #80]	@ 0x50
 804304a:	e003      	b.n	8043054 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804304c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8043054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043058:	e9d3 2300 	ldrd	r2, r3, [r3]
 804305c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8043060:	f04f 0900 	mov.w	r9, #0
 8043064:	ea58 0309 	orrs.w	r3, r8, r9
 8043068:	d047      	beq.n	80430fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 804306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043070:	2b04      	cmp	r3, #4
 8043072:	d82a      	bhi.n	80430ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8043074:	a201      	add	r2, pc, #4	@ (adr r2, 804307c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8043076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804307a:	bf00      	nop
 804307c:	08043091 	.word	0x08043091
 8043080:	0804309f 	.word	0x0804309f
 8043084:	080430b5 	.word	0x080430b5
 8043088:	080430d3 	.word	0x080430d3
 804308c:	080430d3 	.word	0x080430d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043090:	4b81      	ldr	r3, [pc, #516]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043094:	4a80      	ldr	r2, [pc, #512]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804309a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804309c:	e01a      	b.n	80430d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804309e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80430a2:	3308      	adds	r3, #8
 80430a4:	2100      	movs	r1, #0
 80430a6:	4618      	mov	r0, r3
 80430a8:	f001 f914 	bl	80442d4 <RCCEx_PLL2_Config>
 80430ac:	4603      	mov	r3, r0
 80430ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80430b2:	e00f      	b.n	80430d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80430b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80430b8:	3328      	adds	r3, #40	@ 0x28
 80430ba:	2100      	movs	r1, #0
 80430bc:	4618      	mov	r0, r3
 80430be:	f001 f9bb 	bl	8044438 <RCCEx_PLL3_Config>
 80430c2:	4603      	mov	r3, r0
 80430c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80430c8:	e004      	b.n	80430d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80430ca:	2301      	movs	r3, #1
 80430cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80430d0:	e000      	b.n	80430d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80430d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80430d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80430d8:	2b00      	cmp	r3, #0
 80430da:	d10a      	bne.n	80430f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80430dc:	4b6e      	ldr	r3, [pc, #440]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80430de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80430e0:	f023 0107 	bic.w	r1, r3, #7
 80430e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80430e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80430ea:	4a6b      	ldr	r2, [pc, #428]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80430ec:	430b      	orrs	r3, r1
 80430ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80430f0:	e003      	b.n	80430fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80430f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80430f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80430fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80430fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043102:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8043106:	f04f 0b00 	mov.w	fp, #0
 804310a:	ea5a 030b 	orrs.w	r3, sl, fp
 804310e:	d05b      	beq.n	80431c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8043110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8043118:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 804311c:	d03b      	beq.n	8043196 <HAL_RCCEx_PeriphCLKConfig+0x202>
 804311e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8043122:	d834      	bhi.n	804318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8043124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8043128:	d037      	beq.n	804319a <HAL_RCCEx_PeriphCLKConfig+0x206>
 804312a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 804312e:	d82e      	bhi.n	804318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8043130:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8043134:	d033      	beq.n	804319e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8043136:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 804313a:	d828      	bhi.n	804318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 804313c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8043140:	d01a      	beq.n	8043178 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8043142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8043146:	d822      	bhi.n	804318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8043148:	2b00      	cmp	r3, #0
 804314a:	d003      	beq.n	8043154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 804314c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8043150:	d007      	beq.n	8043162 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8043152:	e01c      	b.n	804318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043154:	4b50      	ldr	r3, [pc, #320]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043158:	4a4f      	ldr	r2, [pc, #316]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 804315a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804315e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8043160:	e01e      	b.n	80431a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043166:	3308      	adds	r3, #8
 8043168:	2100      	movs	r1, #0
 804316a:	4618      	mov	r0, r3
 804316c:	f001 f8b2 	bl	80442d4 <RCCEx_PLL2_Config>
 8043170:	4603      	mov	r3, r0
 8043172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8043176:	e013      	b.n	80431a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8043178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804317c:	3328      	adds	r3, #40	@ 0x28
 804317e:	2100      	movs	r1, #0
 8043180:	4618      	mov	r0, r3
 8043182:	f001 f959 	bl	8044438 <RCCEx_PLL3_Config>
 8043186:	4603      	mov	r3, r0
 8043188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804318c:	e008      	b.n	80431a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 804318e:	2301      	movs	r3, #1
 8043190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043194:	e004      	b.n	80431a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8043196:	bf00      	nop
 8043198:	e002      	b.n	80431a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 804319a:	bf00      	nop
 804319c:	e000      	b.n	80431a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 804319e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80431a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80431a4:	2b00      	cmp	r3, #0
 80431a6:	d10b      	bne.n	80431c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80431a8:	4b3b      	ldr	r3, [pc, #236]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80431aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80431ac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80431b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80431b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80431b8:	4a37      	ldr	r2, [pc, #220]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80431ba:	430b      	orrs	r3, r1
 80431bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80431be:	e003      	b.n	80431c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80431c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80431c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80431c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80431cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431d0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80431d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80431d8:	2300      	movs	r3, #0
 80431da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80431de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80431e2:	460b      	mov	r3, r1
 80431e4:	4313      	orrs	r3, r2
 80431e6:	d05d      	beq.n	80432a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80431e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80431ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80431f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80431f4:	d03b      	beq.n	804326e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80431f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80431fa:	d834      	bhi.n	8043266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80431fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8043200:	d037      	beq.n	8043272 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8043202:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8043206:	d82e      	bhi.n	8043266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8043208:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 804320c:	d033      	beq.n	8043276 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 804320e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8043212:	d828      	bhi.n	8043266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8043214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8043218:	d01a      	beq.n	8043250 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 804321a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 804321e:	d822      	bhi.n	8043266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8043220:	2b00      	cmp	r3, #0
 8043222:	d003      	beq.n	804322c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8043224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8043228:	d007      	beq.n	804323a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 804322a:	e01c      	b.n	8043266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804322c:	4b1a      	ldr	r3, [pc, #104]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 804322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043230:	4a19      	ldr	r2, [pc, #100]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8043238:	e01e      	b.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804323a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804323e:	3308      	adds	r3, #8
 8043240:	2100      	movs	r1, #0
 8043242:	4618      	mov	r0, r3
 8043244:	f001 f846 	bl	80442d4 <RCCEx_PLL2_Config>
 8043248:	4603      	mov	r3, r0
 804324a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 804324e:	e013      	b.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8043250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043254:	3328      	adds	r3, #40	@ 0x28
 8043256:	2100      	movs	r1, #0
 8043258:	4618      	mov	r0, r3
 804325a:	f001 f8ed 	bl	8044438 <RCCEx_PLL3_Config>
 804325e:	4603      	mov	r3, r0
 8043260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8043264:	e008      	b.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8043266:	2301      	movs	r3, #1
 8043268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 804326c:	e004      	b.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 804326e:	bf00      	nop
 8043270:	e002      	b.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8043272:	bf00      	nop
 8043274:	e000      	b.n	8043278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8043276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804327c:	2b00      	cmp	r3, #0
 804327e:	d10d      	bne.n	804329c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8043280:	4b05      	ldr	r3, [pc, #20]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043284:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8043288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804328c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8043290:	4a01      	ldr	r2, [pc, #4]	@ (8043298 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8043292:	430b      	orrs	r3, r1
 8043294:	6593      	str	r3, [r2, #88]	@ 0x58
 8043296:	e005      	b.n	80432a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8043298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 804329c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80432a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80432a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80432a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80432b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80432b4:	2300      	movs	r3, #0
 80432b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80432ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80432be:	460b      	mov	r3, r1
 80432c0:	4313      	orrs	r3, r2
 80432c2:	d03a      	beq.n	804333a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80432c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80432c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80432ca:	2b30      	cmp	r3, #48	@ 0x30
 80432cc:	d01f      	beq.n	804330e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80432ce:	2b30      	cmp	r3, #48	@ 0x30
 80432d0:	d819      	bhi.n	8043306 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80432d2:	2b20      	cmp	r3, #32
 80432d4:	d00c      	beq.n	80432f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80432d6:	2b20      	cmp	r3, #32
 80432d8:	d815      	bhi.n	8043306 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80432da:	2b00      	cmp	r3, #0
 80432dc:	d019      	beq.n	8043312 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80432de:	2b10      	cmp	r3, #16
 80432e0:	d111      	bne.n	8043306 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80432e2:	4baa      	ldr	r3, [pc, #680]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80432e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80432e6:	4aa9      	ldr	r2, [pc, #676]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80432e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80432ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80432ee:	e011      	b.n	8043314 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80432f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80432f4:	3308      	adds	r3, #8
 80432f6:	2102      	movs	r1, #2
 80432f8:	4618      	mov	r0, r3
 80432fa:	f000 ffeb 	bl	80442d4 <RCCEx_PLL2_Config>
 80432fe:	4603      	mov	r3, r0
 8043300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8043304:	e006      	b.n	8043314 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8043306:	2301      	movs	r3, #1
 8043308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 804330c:	e002      	b.n	8043314 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 804330e:	bf00      	nop
 8043310:	e000      	b.n	8043314 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8043312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043318:	2b00      	cmp	r3, #0
 804331a:	d10a      	bne.n	8043332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 804331c:	4b9b      	ldr	r3, [pc, #620]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 804331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8043320:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8043324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804332a:	4a98      	ldr	r2, [pc, #608]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 804332c:	430b      	orrs	r3, r1
 804332e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8043330:	e003      	b.n	804333a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043336:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 804333a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043342:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8043346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 804334a:	2300      	movs	r3, #0
 804334c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8043350:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8043354:	460b      	mov	r3, r1
 8043356:	4313      	orrs	r3, r2
 8043358:	d051      	beq.n	80433fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 804335a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8043360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8043364:	d035      	beq.n	80433d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8043366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804336a:	d82e      	bhi.n	80433ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 804336c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8043370:	d031      	beq.n	80433d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8043372:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8043376:	d828      	bhi.n	80433ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8043378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804337c:	d01a      	beq.n	80433b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 804337e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8043382:	d822      	bhi.n	80433ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8043384:	2b00      	cmp	r3, #0
 8043386:	d003      	beq.n	8043390 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8043388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804338c:	d007      	beq.n	804339e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 804338e:	e01c      	b.n	80433ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043390:	4b7e      	ldr	r3, [pc, #504]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8043392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043394:	4a7d      	ldr	r2, [pc, #500]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8043396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804339a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 804339c:	e01c      	b.n	80433d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80433a2:	3308      	adds	r3, #8
 80433a4:	2100      	movs	r1, #0
 80433a6:	4618      	mov	r0, r3
 80433a8:	f000 ff94 	bl	80442d4 <RCCEx_PLL2_Config>
 80433ac:	4603      	mov	r3, r0
 80433ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80433b2:	e011      	b.n	80433d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80433b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80433b8:	3328      	adds	r3, #40	@ 0x28
 80433ba:	2100      	movs	r1, #0
 80433bc:	4618      	mov	r0, r3
 80433be:	f001 f83b 	bl	8044438 <RCCEx_PLL3_Config>
 80433c2:	4603      	mov	r3, r0
 80433c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80433c8:	e006      	b.n	80433d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80433ca:	2301      	movs	r3, #1
 80433cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80433d0:	e002      	b.n	80433d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80433d2:	bf00      	nop
 80433d4:	e000      	b.n	80433d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80433d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80433d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80433dc:	2b00      	cmp	r3, #0
 80433de:	d10a      	bne.n	80433f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80433e0:	4b6a      	ldr	r3, [pc, #424]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80433e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80433e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80433e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80433ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80433ee:	4a67      	ldr	r2, [pc, #412]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80433f0:	430b      	orrs	r3, r1
 80433f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80433f4:	e003      	b.n	80433fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80433f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80433fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80433fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043406:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 804340a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 804340e:	2300      	movs	r3, #0
 8043410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8043414:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8043418:	460b      	mov	r3, r1
 804341a:	4313      	orrs	r3, r2
 804341c:	d053      	beq.n	80434c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 804341e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8043424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8043428:	d033      	beq.n	8043492 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 804342a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 804342e:	d82c      	bhi.n	804348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8043430:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8043434:	d02f      	beq.n	8043496 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8043436:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 804343a:	d826      	bhi.n	804348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 804343c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8043440:	d02b      	beq.n	804349a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8043442:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8043446:	d820      	bhi.n	804348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8043448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 804344c:	d012      	beq.n	8043474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 804344e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8043452:	d81a      	bhi.n	804348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8043454:	2b00      	cmp	r3, #0
 8043456:	d022      	beq.n	804349e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8043458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804345c:	d115      	bne.n	804348a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 804345e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043462:	3308      	adds	r3, #8
 8043464:	2101      	movs	r1, #1
 8043466:	4618      	mov	r0, r3
 8043468:	f000 ff34 	bl	80442d4 <RCCEx_PLL2_Config>
 804346c:	4603      	mov	r3, r0
 804346e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8043472:	e015      	b.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043478:	3328      	adds	r3, #40	@ 0x28
 804347a:	2101      	movs	r1, #1
 804347c:	4618      	mov	r0, r3
 804347e:	f000 ffdb 	bl	8044438 <RCCEx_PLL3_Config>
 8043482:	4603      	mov	r3, r0
 8043484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8043488:	e00a      	b.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804348a:	2301      	movs	r3, #1
 804348c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043490:	e006      	b.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8043492:	bf00      	nop
 8043494:	e004      	b.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8043496:	bf00      	nop
 8043498:	e002      	b.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 804349a:	bf00      	nop
 804349c:	e000      	b.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 804349e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80434a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80434a4:	2b00      	cmp	r3, #0
 80434a6:	d10a      	bne.n	80434be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80434a8:	4b38      	ldr	r3, [pc, #224]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80434aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80434ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80434b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80434b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80434b6:	4a35      	ldr	r2, [pc, #212]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80434b8:	430b      	orrs	r3, r1
 80434ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80434bc:	e003      	b.n	80434c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80434be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80434c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80434c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80434ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80434ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80434d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80434d6:	2300      	movs	r3, #0
 80434d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80434dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80434e0:	460b      	mov	r3, r1
 80434e2:	4313      	orrs	r3, r2
 80434e4:	d058      	beq.n	8043598 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80434e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80434ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80434ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80434f2:	d033      	beq.n	804355c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80434f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80434f8:	d82c      	bhi.n	8043554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80434fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80434fe:	d02f      	beq.n	8043560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8043500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8043504:	d826      	bhi.n	8043554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8043506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 804350a:	d02b      	beq.n	8043564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 804350c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8043510:	d820      	bhi.n	8043554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8043512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8043516:	d012      	beq.n	804353e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8043518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804351c:	d81a      	bhi.n	8043554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 804351e:	2b00      	cmp	r3, #0
 8043520:	d022      	beq.n	8043568 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8043522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8043526:	d115      	bne.n	8043554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804352c:	3308      	adds	r3, #8
 804352e:	2101      	movs	r1, #1
 8043530:	4618      	mov	r0, r3
 8043532:	f000 fecf 	bl	80442d4 <RCCEx_PLL2_Config>
 8043536:	4603      	mov	r3, r0
 8043538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 804353c:	e015      	b.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804353e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043542:	3328      	adds	r3, #40	@ 0x28
 8043544:	2101      	movs	r1, #1
 8043546:	4618      	mov	r0, r3
 8043548:	f000 ff76 	bl	8044438 <RCCEx_PLL3_Config>
 804354c:	4603      	mov	r3, r0
 804354e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8043552:	e00a      	b.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8043554:	2301      	movs	r3, #1
 8043556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 804355a:	e006      	b.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 804355c:	bf00      	nop
 804355e:	e004      	b.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8043560:	bf00      	nop
 8043562:	e002      	b.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8043564:	bf00      	nop
 8043566:	e000      	b.n	804356a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8043568:	bf00      	nop
    }

    if (ret == HAL_OK)
 804356a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804356e:	2b00      	cmp	r3, #0
 8043570:	d10e      	bne.n	8043590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8043572:	4b06      	ldr	r3, [pc, #24]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8043574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043576:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 804357a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804357e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8043582:	4a02      	ldr	r2, [pc, #8]	@ (804358c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8043584:	430b      	orrs	r3, r1
 8043586:	6593      	str	r3, [r2, #88]	@ 0x58
 8043588:	e006      	b.n	8043598 <HAL_RCCEx_PeriphCLKConfig+0x604>
 804358a:	bf00      	nop
 804358c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8043598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80435a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80435a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80435a8:	2300      	movs	r3, #0
 80435aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80435ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80435b2:	460b      	mov	r3, r1
 80435b4:	4313      	orrs	r3, r2
 80435b6:	d037      	beq.n	8043628 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80435b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80435bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80435be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80435c2:	d00e      	beq.n	80435e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80435c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80435c8:	d816      	bhi.n	80435f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80435ca:	2b00      	cmp	r3, #0
 80435cc:	d018      	beq.n	8043600 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80435ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80435d2:	d111      	bne.n	80435f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80435d4:	4bc4      	ldr	r3, [pc, #784]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80435d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80435d8:	4ac3      	ldr	r2, [pc, #780]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80435da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80435de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80435e0:	e00f      	b.n	8043602 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80435e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80435e6:	3308      	adds	r3, #8
 80435e8:	2101      	movs	r1, #1
 80435ea:	4618      	mov	r0, r3
 80435ec:	f000 fe72 	bl	80442d4 <RCCEx_PLL2_Config>
 80435f0:	4603      	mov	r3, r0
 80435f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80435f6:	e004      	b.n	8043602 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80435f8:	2301      	movs	r3, #1
 80435fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80435fe:	e000      	b.n	8043602 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8043600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043606:	2b00      	cmp	r3, #0
 8043608:	d10a      	bne.n	8043620 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 804360a:	4bb7      	ldr	r3, [pc, #732]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 804360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804360e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8043612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8043618:	4ab3      	ldr	r2, [pc, #716]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 804361a:	430b      	orrs	r3, r1
 804361c:	6513      	str	r3, [r2, #80]	@ 0x50
 804361e:	e003      	b.n	8043628 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8043628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043630:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8043634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8043638:	2300      	movs	r3, #0
 804363a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 804363e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8043642:	460b      	mov	r3, r1
 8043644:	4313      	orrs	r3, r2
 8043646:	d039      	beq.n	80436bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8043648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804364c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804364e:	2b03      	cmp	r3, #3
 8043650:	d81c      	bhi.n	804368c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8043652:	a201      	add	r2, pc, #4	@ (adr r2, 8043658 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8043654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043658:	08043695 	.word	0x08043695
 804365c:	08043669 	.word	0x08043669
 8043660:	08043677 	.word	0x08043677
 8043664:	08043695 	.word	0x08043695
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043668:	4b9f      	ldr	r3, [pc, #636]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 804366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804366c:	4a9e      	ldr	r2, [pc, #632]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 804366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8043674:	e00f      	b.n	8043696 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8043676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804367a:	3308      	adds	r3, #8
 804367c:	2102      	movs	r1, #2
 804367e:	4618      	mov	r0, r3
 8043680:	f000 fe28 	bl	80442d4 <RCCEx_PLL2_Config>
 8043684:	4603      	mov	r3, r0
 8043686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 804368a:	e004      	b.n	8043696 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804368c:	2301      	movs	r3, #1
 804368e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043692:	e000      	b.n	8043696 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8043694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804369a:	2b00      	cmp	r3, #0
 804369c:	d10a      	bne.n	80436b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 804369e:	4b92      	ldr	r3, [pc, #584]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80436a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80436a2:	f023 0103 	bic.w	r1, r3, #3
 80436a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80436aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80436ac:	4a8e      	ldr	r2, [pc, #568]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80436ae:	430b      	orrs	r3, r1
 80436b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80436b2:	e003      	b.n	80436bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80436b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80436b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80436bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80436c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80436c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80436c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80436cc:	2300      	movs	r3, #0
 80436ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80436d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80436d6:	460b      	mov	r3, r1
 80436d8:	4313      	orrs	r3, r2
 80436da:	f000 8099 	beq.w	8043810 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80436de:	4b83      	ldr	r3, [pc, #524]	@ (80438ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80436e0:	681b      	ldr	r3, [r3, #0]
 80436e2:	4a82      	ldr	r2, [pc, #520]	@ (80438ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80436e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80436e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80436ea:	f7fd fa21 	bl	8040b30 <HAL_GetTick>
 80436ee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80436f2:	e00b      	b.n	804370c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80436f4:	f7fd fa1c 	bl	8040b30 <HAL_GetTick>
 80436f8:	4602      	mov	r2, r0
 80436fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80436fe:	1ad3      	subs	r3, r2, r3
 8043700:	2b64      	cmp	r3, #100	@ 0x64
 8043702:	d903      	bls.n	804370c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8043704:	2303      	movs	r3, #3
 8043706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 804370a:	e005      	b.n	8043718 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804370c:	4b77      	ldr	r3, [pc, #476]	@ (80438ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 804370e:	681b      	ldr	r3, [r3, #0]
 8043710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8043714:	2b00      	cmp	r3, #0
 8043716:	d0ed      	beq.n	80436f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8043718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804371c:	2b00      	cmp	r3, #0
 804371e:	d173      	bne.n	8043808 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8043720:	4b71      	ldr	r3, [pc, #452]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043722:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8043724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 804372c:	4053      	eors	r3, r2
 804372e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8043732:	2b00      	cmp	r3, #0
 8043734:	d015      	beq.n	8043762 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8043736:	4b6c      	ldr	r3, [pc, #432]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804373a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 804373e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8043742:	4b69      	ldr	r3, [pc, #420]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043746:	4a68      	ldr	r2, [pc, #416]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804374c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 804374e:	4b66      	ldr	r3, [pc, #408]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043752:	4a65      	ldr	r2, [pc, #404]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8043758:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 804375a:	4a63      	ldr	r2, [pc, #396]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 804375c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8043760:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8043762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 804376a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804376e:	d118      	bne.n	80437a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043770:	f7fd f9de 	bl	8040b30 <HAL_GetTick>
 8043774:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8043778:	e00d      	b.n	8043796 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804377a:	f7fd f9d9 	bl	8040b30 <HAL_GetTick>
 804377e:	4602      	mov	r2, r0
 8043780:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8043784:	1ad2      	subs	r2, r2, r3
 8043786:	f241 3388 	movw	r3, #5000	@ 0x1388
 804378a:	429a      	cmp	r2, r3
 804378c:	d903      	bls.n	8043796 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 804378e:	2303      	movs	r3, #3
 8043790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8043794:	e005      	b.n	80437a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8043796:	4b54      	ldr	r3, [pc, #336]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8043798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804379a:	f003 0302 	and.w	r3, r3, #2
 804379e:	2b00      	cmp	r3, #0
 80437a0:	d0eb      	beq.n	804377a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80437a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80437a6:	2b00      	cmp	r3, #0
 80437a8:	d129      	bne.n	80437fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80437aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80437ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80437b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80437b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80437ba:	d10e      	bne.n	80437da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80437bc:	4b4a      	ldr	r3, [pc, #296]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80437be:	691b      	ldr	r3, [r3, #16]
 80437c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80437c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80437c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80437cc:	091a      	lsrs	r2, r3, #4
 80437ce:	4b48      	ldr	r3, [pc, #288]	@ (80438f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80437d0:	4013      	ands	r3, r2
 80437d2:	4a45      	ldr	r2, [pc, #276]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80437d4:	430b      	orrs	r3, r1
 80437d6:	6113      	str	r3, [r2, #16]
 80437d8:	e005      	b.n	80437e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80437da:	4b43      	ldr	r3, [pc, #268]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80437dc:	691b      	ldr	r3, [r3, #16]
 80437de:	4a42      	ldr	r2, [pc, #264]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80437e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80437e4:	6113      	str	r3, [r2, #16]
 80437e6:	4b40      	ldr	r3, [pc, #256]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80437e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80437ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80437ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80437f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80437f6:	4a3c      	ldr	r2, [pc, #240]	@ (80438e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80437f8:	430b      	orrs	r3, r1
 80437fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80437fc:	e008      	b.n	8043810 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80437fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8043806:	e003      	b.n	8043810 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804380c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8043810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043818:	f002 0301 	and.w	r3, r2, #1
 804381c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8043820:	2300      	movs	r3, #0
 8043822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8043826:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 804382a:	460b      	mov	r3, r1
 804382c:	4313      	orrs	r3, r2
 804382e:	f000 808f 	beq.w	8043950 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8043832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8043838:	2b28      	cmp	r3, #40	@ 0x28
 804383a:	d871      	bhi.n	8043920 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 804383c:	a201      	add	r2, pc, #4	@ (adr r2, 8043844 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 804383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043842:	bf00      	nop
 8043844:	08043929 	.word	0x08043929
 8043848:	08043921 	.word	0x08043921
 804384c:	08043921 	.word	0x08043921
 8043850:	08043921 	.word	0x08043921
 8043854:	08043921 	.word	0x08043921
 8043858:	08043921 	.word	0x08043921
 804385c:	08043921 	.word	0x08043921
 8043860:	08043921 	.word	0x08043921
 8043864:	080438f5 	.word	0x080438f5
 8043868:	08043921 	.word	0x08043921
 804386c:	08043921 	.word	0x08043921
 8043870:	08043921 	.word	0x08043921
 8043874:	08043921 	.word	0x08043921
 8043878:	08043921 	.word	0x08043921
 804387c:	08043921 	.word	0x08043921
 8043880:	08043921 	.word	0x08043921
 8043884:	0804390b 	.word	0x0804390b
 8043888:	08043921 	.word	0x08043921
 804388c:	08043921 	.word	0x08043921
 8043890:	08043921 	.word	0x08043921
 8043894:	08043921 	.word	0x08043921
 8043898:	08043921 	.word	0x08043921
 804389c:	08043921 	.word	0x08043921
 80438a0:	08043921 	.word	0x08043921
 80438a4:	08043929 	.word	0x08043929
 80438a8:	08043921 	.word	0x08043921
 80438ac:	08043921 	.word	0x08043921
 80438b0:	08043921 	.word	0x08043921
 80438b4:	08043921 	.word	0x08043921
 80438b8:	08043921 	.word	0x08043921
 80438bc:	08043921 	.word	0x08043921
 80438c0:	08043921 	.word	0x08043921
 80438c4:	08043929 	.word	0x08043929
 80438c8:	08043921 	.word	0x08043921
 80438cc:	08043921 	.word	0x08043921
 80438d0:	08043921 	.word	0x08043921
 80438d4:	08043921 	.word	0x08043921
 80438d8:	08043921 	.word	0x08043921
 80438dc:	08043921 	.word	0x08043921
 80438e0:	08043921 	.word	0x08043921
 80438e4:	08043929 	.word	0x08043929
 80438e8:	58024400 	.word	0x58024400
 80438ec:	58024800 	.word	0x58024800
 80438f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80438f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80438f8:	3308      	adds	r3, #8
 80438fa:	2101      	movs	r1, #1
 80438fc:	4618      	mov	r0, r3
 80438fe:	f000 fce9 	bl	80442d4 <RCCEx_PLL2_Config>
 8043902:	4603      	mov	r3, r0
 8043904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8043908:	e00f      	b.n	804392a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804390e:	3328      	adds	r3, #40	@ 0x28
 8043910:	2101      	movs	r1, #1
 8043912:	4618      	mov	r0, r3
 8043914:	f000 fd90 	bl	8044438 <RCCEx_PLL3_Config>
 8043918:	4603      	mov	r3, r0
 804391a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 804391e:	e004      	b.n	804392a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043920:	2301      	movs	r3, #1
 8043922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043926:	e000      	b.n	804392a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8043928:	bf00      	nop
    }

    if (ret == HAL_OK)
 804392a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804392e:	2b00      	cmp	r3, #0
 8043930:	d10a      	bne.n	8043948 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8043932:	4bbf      	ldr	r3, [pc, #764]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8043936:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 804393a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804393e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8043940:	4abb      	ldr	r2, [pc, #748]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043942:	430b      	orrs	r3, r1
 8043944:	6553      	str	r3, [r2, #84]	@ 0x54
 8043946:	e003      	b.n	8043950 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 804394c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8043950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043958:	f002 0302 	and.w	r3, r2, #2
 804395c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8043960:	2300      	movs	r3, #0
 8043962:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8043966:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 804396a:	460b      	mov	r3, r1
 804396c:	4313      	orrs	r3, r2
 804396e:	d041      	beq.n	80439f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8043970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043976:	2b05      	cmp	r3, #5
 8043978:	d824      	bhi.n	80439c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 804397a:	a201      	add	r2, pc, #4	@ (adr r2, 8043980 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 804397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043980:	080439cd 	.word	0x080439cd
 8043984:	08043999 	.word	0x08043999
 8043988:	080439af 	.word	0x080439af
 804398c:	080439cd 	.word	0x080439cd
 8043990:	080439cd 	.word	0x080439cd
 8043994:	080439cd 	.word	0x080439cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804399c:	3308      	adds	r3, #8
 804399e:	2101      	movs	r1, #1
 80439a0:	4618      	mov	r0, r3
 80439a2:	f000 fc97 	bl	80442d4 <RCCEx_PLL2_Config>
 80439a6:	4603      	mov	r3, r0
 80439a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80439ac:	e00f      	b.n	80439ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80439ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80439b2:	3328      	adds	r3, #40	@ 0x28
 80439b4:	2101      	movs	r1, #1
 80439b6:	4618      	mov	r0, r3
 80439b8:	f000 fd3e 	bl	8044438 <RCCEx_PLL3_Config>
 80439bc:	4603      	mov	r3, r0
 80439be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80439c2:	e004      	b.n	80439ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80439c4:	2301      	movs	r3, #1
 80439c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80439ca:	e000      	b.n	80439ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80439cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80439ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80439d2:	2b00      	cmp	r3, #0
 80439d4:	d10a      	bne.n	80439ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80439d6:	4b96      	ldr	r3, [pc, #600]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80439d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80439da:	f023 0107 	bic.w	r1, r3, #7
 80439de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80439e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80439e4:	4a92      	ldr	r2, [pc, #584]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80439e6:	430b      	orrs	r3, r1
 80439e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80439ea:	e003      	b.n	80439f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80439ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80439f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80439f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80439f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80439fc:	f002 0304 	and.w	r3, r2, #4
 8043a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8043a04:	2300      	movs	r3, #0
 8043a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8043a0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8043a0e:	460b      	mov	r3, r1
 8043a10:	4313      	orrs	r3, r2
 8043a12:	d044      	beq.n	8043a9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8043a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8043a1c:	2b05      	cmp	r3, #5
 8043a1e:	d825      	bhi.n	8043a6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8043a20:	a201      	add	r2, pc, #4	@ (adr r2, 8043a28 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8043a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043a26:	bf00      	nop
 8043a28:	08043a75 	.word	0x08043a75
 8043a2c:	08043a41 	.word	0x08043a41
 8043a30:	08043a57 	.word	0x08043a57
 8043a34:	08043a75 	.word	0x08043a75
 8043a38:	08043a75 	.word	0x08043a75
 8043a3c:	08043a75 	.word	0x08043a75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043a44:	3308      	adds	r3, #8
 8043a46:	2101      	movs	r1, #1
 8043a48:	4618      	mov	r0, r3
 8043a4a:	f000 fc43 	bl	80442d4 <RCCEx_PLL2_Config>
 8043a4e:	4603      	mov	r3, r0
 8043a50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8043a54:	e00f      	b.n	8043a76 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043a5a:	3328      	adds	r3, #40	@ 0x28
 8043a5c:	2101      	movs	r1, #1
 8043a5e:	4618      	mov	r0, r3
 8043a60:	f000 fcea 	bl	8044438 <RCCEx_PLL3_Config>
 8043a64:	4603      	mov	r3, r0
 8043a66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8043a6a:	e004      	b.n	8043a76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043a6c:	2301      	movs	r3, #1
 8043a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043a72:	e000      	b.n	8043a76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8043a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043a76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043a7a:	2b00      	cmp	r3, #0
 8043a7c:	d10b      	bne.n	8043a96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8043a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043a82:	f023 0107 	bic.w	r1, r3, #7
 8043a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8043a8e:	4a68      	ldr	r2, [pc, #416]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043a90:	430b      	orrs	r3, r1
 8043a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8043a94:	e003      	b.n	8043a9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043a9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8043a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043aa6:	f002 0320 	and.w	r3, r2, #32
 8043aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8043aae:	2300      	movs	r3, #0
 8043ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8043ab4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8043ab8:	460b      	mov	r3, r1
 8043aba:	4313      	orrs	r3, r2
 8043abc:	d055      	beq.n	8043b6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8043abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8043ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8043aca:	d033      	beq.n	8043b34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8043acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8043ad0:	d82c      	bhi.n	8043b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8043ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8043ad6:	d02f      	beq.n	8043b38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8043ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8043adc:	d826      	bhi.n	8043b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8043ade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8043ae2:	d02b      	beq.n	8043b3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8043ae4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8043ae8:	d820      	bhi.n	8043b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8043aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8043aee:	d012      	beq.n	8043b16 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8043af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8043af4:	d81a      	bhi.n	8043b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8043af6:	2b00      	cmp	r3, #0
 8043af8:	d022      	beq.n	8043b40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8043afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8043afe:	d115      	bne.n	8043b2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043b04:	3308      	adds	r3, #8
 8043b06:	2100      	movs	r1, #0
 8043b08:	4618      	mov	r0, r3
 8043b0a:	f000 fbe3 	bl	80442d4 <RCCEx_PLL2_Config>
 8043b0e:	4603      	mov	r3, r0
 8043b10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8043b14:	e015      	b.n	8043b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043b1a:	3328      	adds	r3, #40	@ 0x28
 8043b1c:	2102      	movs	r1, #2
 8043b1e:	4618      	mov	r0, r3
 8043b20:	f000 fc8a 	bl	8044438 <RCCEx_PLL3_Config>
 8043b24:	4603      	mov	r3, r0
 8043b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8043b2a:	e00a      	b.n	8043b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043b2c:	2301      	movs	r3, #1
 8043b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043b32:	e006      	b.n	8043b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8043b34:	bf00      	nop
 8043b36:	e004      	b.n	8043b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8043b38:	bf00      	nop
 8043b3a:	e002      	b.n	8043b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8043b3c:	bf00      	nop
 8043b3e:	e000      	b.n	8043b42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8043b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043b46:	2b00      	cmp	r3, #0
 8043b48:	d10b      	bne.n	8043b62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8043b4a:	4b39      	ldr	r3, [pc, #228]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8043b4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8043b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8043b5a:	4a35      	ldr	r2, [pc, #212]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043b5c:	430b      	orrs	r3, r1
 8043b5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8043b60:	e003      	b.n	8043b6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043b66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8043b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043b72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8043b76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8043b7a:	2300      	movs	r3, #0
 8043b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8043b80:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8043b84:	460b      	mov	r3, r1
 8043b86:	4313      	orrs	r3, r2
 8043b88:	d058      	beq.n	8043c3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8043b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8043b92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8043b96:	d033      	beq.n	8043c00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8043b98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8043b9c:	d82c      	bhi.n	8043bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8043b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8043ba2:	d02f      	beq.n	8043c04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8043ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8043ba8:	d826      	bhi.n	8043bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8043baa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8043bae:	d02b      	beq.n	8043c08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8043bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8043bb4:	d820      	bhi.n	8043bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8043bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8043bba:	d012      	beq.n	8043be2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8043bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8043bc0:	d81a      	bhi.n	8043bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8043bc2:	2b00      	cmp	r3, #0
 8043bc4:	d022      	beq.n	8043c0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8043bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8043bca:	d115      	bne.n	8043bf8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043bd0:	3308      	adds	r3, #8
 8043bd2:	2100      	movs	r1, #0
 8043bd4:	4618      	mov	r0, r3
 8043bd6:	f000 fb7d 	bl	80442d4 <RCCEx_PLL2_Config>
 8043bda:	4603      	mov	r3, r0
 8043bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043be0:	e015      	b.n	8043c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043be6:	3328      	adds	r3, #40	@ 0x28
 8043be8:	2102      	movs	r1, #2
 8043bea:	4618      	mov	r0, r3
 8043bec:	f000 fc24 	bl	8044438 <RCCEx_PLL3_Config>
 8043bf0:	4603      	mov	r3, r0
 8043bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043bf6:	e00a      	b.n	8043c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043bf8:	2301      	movs	r3, #1
 8043bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043bfe:	e006      	b.n	8043c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8043c00:	bf00      	nop
 8043c02:	e004      	b.n	8043c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8043c04:	bf00      	nop
 8043c06:	e002      	b.n	8043c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8043c08:	bf00      	nop
 8043c0a:	e000      	b.n	8043c0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8043c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043c12:	2b00      	cmp	r3, #0
 8043c14:	d10e      	bne.n	8043c34 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8043c16:	4b06      	ldr	r3, [pc, #24]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043c1a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8043c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8043c26:	4a02      	ldr	r2, [pc, #8]	@ (8043c30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8043c28:	430b      	orrs	r3, r1
 8043c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8043c2c:	e006      	b.n	8043c3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8043c2e:	bf00      	nop
 8043c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043c38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8043c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043c44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8043c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8043c4c:	2300      	movs	r3, #0
 8043c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8043c52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8043c56:	460b      	mov	r3, r1
 8043c58:	4313      	orrs	r3, r2
 8043c5a:	d055      	beq.n	8043d08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8043c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8043c64:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8043c68:	d033      	beq.n	8043cd2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8043c6a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8043c6e:	d82c      	bhi.n	8043cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8043c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8043c74:	d02f      	beq.n	8043cd6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8043c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8043c7a:	d826      	bhi.n	8043cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8043c7c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8043c80:	d02b      	beq.n	8043cda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8043c82:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8043c86:	d820      	bhi.n	8043cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8043c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8043c8c:	d012      	beq.n	8043cb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8043c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8043c92:	d81a      	bhi.n	8043cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8043c94:	2b00      	cmp	r3, #0
 8043c96:	d022      	beq.n	8043cde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8043c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8043c9c:	d115      	bne.n	8043cca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043ca2:	3308      	adds	r3, #8
 8043ca4:	2100      	movs	r1, #0
 8043ca6:	4618      	mov	r0, r3
 8043ca8:	f000 fb14 	bl	80442d4 <RCCEx_PLL2_Config>
 8043cac:	4603      	mov	r3, r0
 8043cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8043cb2:	e015      	b.n	8043ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043cb8:	3328      	adds	r3, #40	@ 0x28
 8043cba:	2102      	movs	r1, #2
 8043cbc:	4618      	mov	r0, r3
 8043cbe:	f000 fbbb 	bl	8044438 <RCCEx_PLL3_Config>
 8043cc2:	4603      	mov	r3, r0
 8043cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8043cc8:	e00a      	b.n	8043ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043cca:	2301      	movs	r3, #1
 8043ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043cd0:	e006      	b.n	8043ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8043cd2:	bf00      	nop
 8043cd4:	e004      	b.n	8043ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8043cd6:	bf00      	nop
 8043cd8:	e002      	b.n	8043ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8043cda:	bf00      	nop
 8043cdc:	e000      	b.n	8043ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8043cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043ce4:	2b00      	cmp	r3, #0
 8043ce6:	d10b      	bne.n	8043d00 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8043ce8:	4ba0      	ldr	r3, [pc, #640]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043cec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8043cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8043cf8:	4a9c      	ldr	r2, [pc, #624]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043cfa:	430b      	orrs	r3, r1
 8043cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8043cfe:	e003      	b.n	8043d08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8043d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043d10:	f002 0308 	and.w	r3, r2, #8
 8043d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043d18:	2300      	movs	r3, #0
 8043d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8043d1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8043d22:	460b      	mov	r3, r1
 8043d24:	4313      	orrs	r3, r2
 8043d26:	d01e      	beq.n	8043d66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8043d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8043d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8043d34:	d10c      	bne.n	8043d50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8043d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d3a:	3328      	adds	r3, #40	@ 0x28
 8043d3c:	2102      	movs	r1, #2
 8043d3e:	4618      	mov	r0, r3
 8043d40:	f000 fb7a 	bl	8044438 <RCCEx_PLL3_Config>
 8043d44:	4603      	mov	r3, r0
 8043d46:	2b00      	cmp	r3, #0
 8043d48:	d002      	beq.n	8043d50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8043d4a:	2301      	movs	r3, #1
 8043d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8043d50:	4b86      	ldr	r3, [pc, #536]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8043d54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8043d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8043d60:	4a82      	ldr	r2, [pc, #520]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043d62:	430b      	orrs	r3, r1
 8043d64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8043d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043d6e:	f002 0310 	and.w	r3, r2, #16
 8043d72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8043d76:	2300      	movs	r3, #0
 8043d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8043d7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8043d80:	460b      	mov	r3, r1
 8043d82:	4313      	orrs	r3, r2
 8043d84:	d01e      	beq.n	8043dc4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8043d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8043d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8043d92:	d10c      	bne.n	8043dae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8043d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043d98:	3328      	adds	r3, #40	@ 0x28
 8043d9a:	2102      	movs	r1, #2
 8043d9c:	4618      	mov	r0, r3
 8043d9e:	f000 fb4b 	bl	8044438 <RCCEx_PLL3_Config>
 8043da2:	4603      	mov	r3, r0
 8043da4:	2b00      	cmp	r3, #0
 8043da6:	d002      	beq.n	8043dae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8043da8:	2301      	movs	r3, #1
 8043daa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8043dae:	4b6f      	ldr	r3, [pc, #444]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043db2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8043db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8043dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043dc0:	430b      	orrs	r3, r1
 8043dc2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8043dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043dcc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8043dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8043dd2:	2300      	movs	r3, #0
 8043dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8043dd6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8043dda:	460b      	mov	r3, r1
 8043ddc:	4313      	orrs	r3, r2
 8043dde:	d03e      	beq.n	8043e5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8043de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8043de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8043dec:	d022      	beq.n	8043e34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8043dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8043df2:	d81b      	bhi.n	8043e2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8043df4:	2b00      	cmp	r3, #0
 8043df6:	d003      	beq.n	8043e00 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8043df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043dfc:	d00b      	beq.n	8043e16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8043dfe:	e015      	b.n	8043e2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043e04:	3308      	adds	r3, #8
 8043e06:	2100      	movs	r1, #0
 8043e08:	4618      	mov	r0, r3
 8043e0a:	f000 fa63 	bl	80442d4 <RCCEx_PLL2_Config>
 8043e0e:	4603      	mov	r3, r0
 8043e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8043e14:	e00f      	b.n	8043e36 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043e1a:	3328      	adds	r3, #40	@ 0x28
 8043e1c:	2102      	movs	r1, #2
 8043e1e:	4618      	mov	r0, r3
 8043e20:	f000 fb0a 	bl	8044438 <RCCEx_PLL3_Config>
 8043e24:	4603      	mov	r3, r0
 8043e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8043e2a:	e004      	b.n	8043e36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043e2c:	2301      	movs	r3, #1
 8043e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043e32:	e000      	b.n	8043e36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8043e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043e3a:	2b00      	cmp	r3, #0
 8043e3c:	d10b      	bne.n	8043e56 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8043e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8043e42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8043e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8043e4e:	4a47      	ldr	r2, [pc, #284]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043e50:	430b      	orrs	r3, r1
 8043e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8043e54:	e003      	b.n	8043e5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043e5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8043e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043e66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8043e6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8043e6c:	2300      	movs	r3, #0
 8043e6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8043e70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8043e74:	460b      	mov	r3, r1
 8043e76:	4313      	orrs	r3, r2
 8043e78:	d03b      	beq.n	8043ef2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8043e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8043e82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8043e86:	d01f      	beq.n	8043ec8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8043e88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8043e8c:	d818      	bhi.n	8043ec0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8043e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8043e92:	d003      	beq.n	8043e9c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8043e94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8043e98:	d007      	beq.n	8043eaa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8043e9a:	e011      	b.n	8043ec0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043e9c:	4b33      	ldr	r3, [pc, #204]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043ea0:	4a32      	ldr	r2, [pc, #200]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8043ea8:	e00f      	b.n	8043eca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043eae:	3328      	adds	r3, #40	@ 0x28
 8043eb0:	2101      	movs	r1, #1
 8043eb2:	4618      	mov	r0, r3
 8043eb4:	f000 fac0 	bl	8044438 <RCCEx_PLL3_Config>
 8043eb8:	4603      	mov	r3, r0
 8043eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8043ebe:	e004      	b.n	8043eca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043ec0:	2301      	movs	r3, #1
 8043ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043ec6:	e000      	b.n	8043eca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8043ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043ece:	2b00      	cmp	r3, #0
 8043ed0:	d10b      	bne.n	8043eea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8043ed2:	4b26      	ldr	r3, [pc, #152]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8043ed6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8043eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8043ee2:	4a22      	ldr	r2, [pc, #136]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043ee4:	430b      	orrs	r3, r1
 8043ee6:	6553      	str	r3, [r2, #84]	@ 0x54
 8043ee8:	e003      	b.n	8043ef2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043eea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043eee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8043ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043efa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8043efe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8043f00:	2300      	movs	r3, #0
 8043f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8043f04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8043f08:	460b      	mov	r3, r1
 8043f0a:	4313      	orrs	r3, r2
 8043f0c:	d034      	beq.n	8043f78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8043f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8043f14:	2b00      	cmp	r3, #0
 8043f16:	d003      	beq.n	8043f20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8043f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8043f1c:	d007      	beq.n	8043f2e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8043f1e:	e011      	b.n	8043f44 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043f20:	4b12      	ldr	r3, [pc, #72]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043f24:	4a11      	ldr	r2, [pc, #68]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8043f2c:	e00e      	b.n	8043f4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8043f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043f32:	3308      	adds	r3, #8
 8043f34:	2102      	movs	r1, #2
 8043f36:	4618      	mov	r0, r3
 8043f38:	f000 f9cc 	bl	80442d4 <RCCEx_PLL2_Config>
 8043f3c:	4603      	mov	r3, r0
 8043f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8043f42:	e003      	b.n	8043f4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8043f44:	2301      	movs	r3, #1
 8043f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8043f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043f50:	2b00      	cmp	r3, #0
 8043f52:	d10d      	bne.n	8043f70 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8043f54:	4b05      	ldr	r3, [pc, #20]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8043f58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8043f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8043f62:	4a02      	ldr	r2, [pc, #8]	@ (8043f6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8043f64:	430b      	orrs	r3, r1
 8043f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8043f68:	e006      	b.n	8043f78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8043f6a:	bf00      	nop
 8043f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8043f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8043f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043f80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8043f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8043f86:	2300      	movs	r3, #0
 8043f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8043f8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8043f8e:	460b      	mov	r3, r1
 8043f90:	4313      	orrs	r3, r2
 8043f92:	d00c      	beq.n	8043fae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8043f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043f98:	3328      	adds	r3, #40	@ 0x28
 8043f9a:	2102      	movs	r1, #2
 8043f9c:	4618      	mov	r0, r3
 8043f9e:	f000 fa4b 	bl	8044438 <RCCEx_PLL3_Config>
 8043fa2:	4603      	mov	r3, r0
 8043fa4:	2b00      	cmp	r3, #0
 8043fa6:	d002      	beq.n	8043fae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8043fa8:	2301      	movs	r3, #1
 8043faa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8043fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043fb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8043fba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8043fbc:	2300      	movs	r3, #0
 8043fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8043fc0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8043fc4:	460b      	mov	r3, r1
 8043fc6:	4313      	orrs	r3, r2
 8043fc8:	d036      	beq.n	8044038 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8043fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8043fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8043fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8043fd4:	d018      	beq.n	8044008 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8043fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8043fda:	d811      	bhi.n	8044000 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8043fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8043fe0:	d014      	beq.n	804400c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8043fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8043fe6:	d80b      	bhi.n	8044000 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8043fe8:	2b00      	cmp	r3, #0
 8043fea:	d011      	beq.n	8044010 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8043fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8043ff0:	d106      	bne.n	8044000 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043ff2:	4bb7      	ldr	r3, [pc, #732]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8043ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043ff6:	4ab6      	ldr	r2, [pc, #728]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8043ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8043ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8043ffe:	e008      	b.n	8044012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044000:	2301      	movs	r3, #1
 8044002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8044006:	e004      	b.n	8044012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8044008:	bf00      	nop
 804400a:	e002      	b.n	8044012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 804400c:	bf00      	nop
 804400e:	e000      	b.n	8044012 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8044010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044016:	2b00      	cmp	r3, #0
 8044018:	d10a      	bne.n	8044030 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804401a:	4bad      	ldr	r3, [pc, #692]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 804401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804401e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8044022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044028:	4aa9      	ldr	r2, [pc, #676]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 804402a:	430b      	orrs	r3, r1
 804402c:	6553      	str	r3, [r2, #84]	@ 0x54
 804402e:	e003      	b.n	8044038 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8044038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044040:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8044044:	653b      	str	r3, [r7, #80]	@ 0x50
 8044046:	2300      	movs	r3, #0
 8044048:	657b      	str	r3, [r7, #84]	@ 0x54
 804404a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 804404e:	460b      	mov	r3, r1
 8044050:	4313      	orrs	r3, r2
 8044052:	d009      	beq.n	8044068 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8044054:	4b9e      	ldr	r3, [pc, #632]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8044056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 804405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8044062:	4a9b      	ldr	r2, [pc, #620]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8044064:	430b      	orrs	r3, r1
 8044066:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8044068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044070:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8044074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8044076:	2300      	movs	r3, #0
 8044078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804407a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 804407e:	460b      	mov	r3, r1
 8044080:	4313      	orrs	r3, r2
 8044082:	d009      	beq.n	8044098 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8044084:	4b92      	ldr	r3, [pc, #584]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8044086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044088:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 804408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8044092:	4a8f      	ldr	r2, [pc, #572]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8044094:	430b      	orrs	r3, r1
 8044096:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8044098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80440a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80440a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80440a6:	2300      	movs	r3, #0
 80440a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80440aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80440ae:	460b      	mov	r3, r1
 80440b0:	4313      	orrs	r3, r2
 80440b2:	d00e      	beq.n	80440d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80440b4:	4b86      	ldr	r3, [pc, #536]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80440b6:	691b      	ldr	r3, [r3, #16]
 80440b8:	4a85      	ldr	r2, [pc, #532]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80440ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80440be:	6113      	str	r3, [r2, #16]
 80440c0:	4b83      	ldr	r3, [pc, #524]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80440c2:	6919      	ldr	r1, [r3, #16]
 80440c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80440c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80440cc:	4a80      	ldr	r2, [pc, #512]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80440ce:	430b      	orrs	r3, r1
 80440d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80440d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80440d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80440da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80440de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80440e0:	2300      	movs	r3, #0
 80440e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80440e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80440e8:	460b      	mov	r3, r1
 80440ea:	4313      	orrs	r3, r2
 80440ec:	d009      	beq.n	8044102 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80440ee:	4b78      	ldr	r3, [pc, #480]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80440f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80440f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80440f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80440fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80440fc:	4a74      	ldr	r2, [pc, #464]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80440fe:	430b      	orrs	r3, r1
 8044100:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8044102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044106:	e9d3 2300 	ldrd	r2, r3, [r3]
 804410a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 804410e:	633b      	str	r3, [r7, #48]	@ 0x30
 8044110:	2300      	movs	r3, #0
 8044112:	637b      	str	r3, [r7, #52]	@ 0x34
 8044114:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8044118:	460b      	mov	r3, r1
 804411a:	4313      	orrs	r3, r2
 804411c:	d00a      	beq.n	8044134 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 804411e:	4b6c      	ldr	r3, [pc, #432]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8044120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044122:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8044126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 804412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 804412e:	4a68      	ldr	r2, [pc, #416]	@ (80442d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8044130:	430b      	orrs	r3, r1
 8044132:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8044134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044138:	e9d3 2300 	ldrd	r2, r3, [r3]
 804413c:	2100      	movs	r1, #0
 804413e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8044140:	f003 0301 	and.w	r3, r3, #1
 8044144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8044146:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 804414a:	460b      	mov	r3, r1
 804414c:	4313      	orrs	r3, r2
 804414e:	d011      	beq.n	8044174 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044154:	3308      	adds	r3, #8
 8044156:	2100      	movs	r1, #0
 8044158:	4618      	mov	r0, r3
 804415a:	f000 f8bb 	bl	80442d4 <RCCEx_PLL2_Config>
 804415e:	4603      	mov	r3, r0
 8044160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8044164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044168:	2b00      	cmp	r3, #0
 804416a:	d003      	beq.n	8044174 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804416c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8044174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044178:	e9d3 2300 	ldrd	r2, r3, [r3]
 804417c:	2100      	movs	r1, #0
 804417e:	6239      	str	r1, [r7, #32]
 8044180:	f003 0302 	and.w	r3, r3, #2
 8044184:	627b      	str	r3, [r7, #36]	@ 0x24
 8044186:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 804418a:	460b      	mov	r3, r1
 804418c:	4313      	orrs	r3, r2
 804418e:	d011      	beq.n	80441b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044194:	3308      	adds	r3, #8
 8044196:	2101      	movs	r1, #1
 8044198:	4618      	mov	r0, r3
 804419a:	f000 f89b 	bl	80442d4 <RCCEx_PLL2_Config>
 804419e:	4603      	mov	r3, r0
 80441a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80441a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80441a8:	2b00      	cmp	r3, #0
 80441aa:	d003      	beq.n	80441b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80441ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80441b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80441b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80441b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80441bc:	2100      	movs	r1, #0
 80441be:	61b9      	str	r1, [r7, #24]
 80441c0:	f003 0304 	and.w	r3, r3, #4
 80441c4:	61fb      	str	r3, [r7, #28]
 80441c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80441ca:	460b      	mov	r3, r1
 80441cc:	4313      	orrs	r3, r2
 80441ce:	d011      	beq.n	80441f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80441d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80441d4:	3308      	adds	r3, #8
 80441d6:	2102      	movs	r1, #2
 80441d8:	4618      	mov	r0, r3
 80441da:	f000 f87b 	bl	80442d4 <RCCEx_PLL2_Config>
 80441de:	4603      	mov	r3, r0
 80441e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80441e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80441e8:	2b00      	cmp	r3, #0
 80441ea:	d003      	beq.n	80441f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80441ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80441f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80441f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80441f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80441fc:	2100      	movs	r1, #0
 80441fe:	6139      	str	r1, [r7, #16]
 8044200:	f003 0308 	and.w	r3, r3, #8
 8044204:	617b      	str	r3, [r7, #20]
 8044206:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 804420a:	460b      	mov	r3, r1
 804420c:	4313      	orrs	r3, r2
 804420e:	d011      	beq.n	8044234 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044214:	3328      	adds	r3, #40	@ 0x28
 8044216:	2100      	movs	r1, #0
 8044218:	4618      	mov	r0, r3
 804421a:	f000 f90d 	bl	8044438 <RCCEx_PLL3_Config>
 804421e:	4603      	mov	r3, r0
 8044220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8044224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044228:	2b00      	cmp	r3, #0
 804422a:	d003      	beq.n	8044234 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804422c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8044234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044238:	e9d3 2300 	ldrd	r2, r3, [r3]
 804423c:	2100      	movs	r1, #0
 804423e:	60b9      	str	r1, [r7, #8]
 8044240:	f003 0310 	and.w	r3, r3, #16
 8044244:	60fb      	str	r3, [r7, #12]
 8044246:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 804424a:	460b      	mov	r3, r1
 804424c:	4313      	orrs	r3, r2
 804424e:	d011      	beq.n	8044274 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044254:	3328      	adds	r3, #40	@ 0x28
 8044256:	2101      	movs	r1, #1
 8044258:	4618      	mov	r0, r3
 804425a:	f000 f8ed 	bl	8044438 <RCCEx_PLL3_Config>
 804425e:	4603      	mov	r3, r0
 8044260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8044264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044268:	2b00      	cmp	r3, #0
 804426a:	d003      	beq.n	8044274 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8044270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8044274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044278:	e9d3 2300 	ldrd	r2, r3, [r3]
 804427c:	2100      	movs	r1, #0
 804427e:	6039      	str	r1, [r7, #0]
 8044280:	f003 0320 	and.w	r3, r3, #32
 8044284:	607b      	str	r3, [r7, #4]
 8044286:	e9d7 1200 	ldrd	r1, r2, [r7]
 804428a:	460b      	mov	r3, r1
 804428c:	4313      	orrs	r3, r2
 804428e:	d011      	beq.n	80442b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8044294:	3328      	adds	r3, #40	@ 0x28
 8044296:	2102      	movs	r1, #2
 8044298:	4618      	mov	r0, r3
 804429a:	f000 f8cd 	bl	8044438 <RCCEx_PLL3_Config>
 804429e:	4603      	mov	r3, r0
 80442a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80442a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80442a8:	2b00      	cmp	r3, #0
 80442aa:	d003      	beq.n	80442b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80442ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80442b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80442b4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80442b8:	2b00      	cmp	r3, #0
 80442ba:	d101      	bne.n	80442c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80442bc:	2300      	movs	r3, #0
 80442be:	e000      	b.n	80442c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80442c0:	2301      	movs	r3, #1
}
 80442c2:	4618      	mov	r0, r3
 80442c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80442c8:	46bd      	mov	sp, r7
 80442ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80442ce:	bf00      	nop
 80442d0:	58024400 	.word	0x58024400

080442d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80442d4:	b580      	push	{r7, lr}
 80442d6:	b084      	sub	sp, #16
 80442d8:	af00      	add	r7, sp, #0
 80442da:	6078      	str	r0, [r7, #4]
 80442dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80442de:	2300      	movs	r3, #0
 80442e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80442e2:	4b53      	ldr	r3, [pc, #332]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80442e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80442e6:	f003 0303 	and.w	r3, r3, #3
 80442ea:	2b03      	cmp	r3, #3
 80442ec:	d101      	bne.n	80442f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80442ee:	2301      	movs	r3, #1
 80442f0:	e099      	b.n	8044426 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80442f2:	4b4f      	ldr	r3, [pc, #316]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80442f4:	681b      	ldr	r3, [r3, #0]
 80442f6:	4a4e      	ldr	r2, [pc, #312]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80442f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80442fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80442fe:	f7fc fc17 	bl	8040b30 <HAL_GetTick>
 8044302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8044304:	e008      	b.n	8044318 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8044306:	f7fc fc13 	bl	8040b30 <HAL_GetTick>
 804430a:	4602      	mov	r2, r0
 804430c:	68bb      	ldr	r3, [r7, #8]
 804430e:	1ad3      	subs	r3, r2, r3
 8044310:	2b02      	cmp	r3, #2
 8044312:	d901      	bls.n	8044318 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8044314:	2303      	movs	r3, #3
 8044316:	e086      	b.n	8044426 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8044318:	4b45      	ldr	r3, [pc, #276]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 804431a:	681b      	ldr	r3, [r3, #0]
 804431c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8044320:	2b00      	cmp	r3, #0
 8044322:	d1f0      	bne.n	8044306 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8044324:	4b42      	ldr	r3, [pc, #264]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 8044326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8044328:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 804432c:	687b      	ldr	r3, [r7, #4]
 804432e:	681b      	ldr	r3, [r3, #0]
 8044330:	031b      	lsls	r3, r3, #12
 8044332:	493f      	ldr	r1, [pc, #252]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 8044334:	4313      	orrs	r3, r2
 8044336:	628b      	str	r3, [r1, #40]	@ 0x28
 8044338:	687b      	ldr	r3, [r7, #4]
 804433a:	685b      	ldr	r3, [r3, #4]
 804433c:	3b01      	subs	r3, #1
 804433e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8044342:	687b      	ldr	r3, [r7, #4]
 8044344:	689b      	ldr	r3, [r3, #8]
 8044346:	3b01      	subs	r3, #1
 8044348:	025b      	lsls	r3, r3, #9
 804434a:	b29b      	uxth	r3, r3
 804434c:	431a      	orrs	r2, r3
 804434e:	687b      	ldr	r3, [r7, #4]
 8044350:	68db      	ldr	r3, [r3, #12]
 8044352:	3b01      	subs	r3, #1
 8044354:	041b      	lsls	r3, r3, #16
 8044356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 804435a:	431a      	orrs	r2, r3
 804435c:	687b      	ldr	r3, [r7, #4]
 804435e:	691b      	ldr	r3, [r3, #16]
 8044360:	3b01      	subs	r3, #1
 8044362:	061b      	lsls	r3, r3, #24
 8044364:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8044368:	4931      	ldr	r1, [pc, #196]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 804436a:	4313      	orrs	r3, r2
 804436c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 804436e:	4b30      	ldr	r3, [pc, #192]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 8044370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044372:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8044376:	687b      	ldr	r3, [r7, #4]
 8044378:	695b      	ldr	r3, [r3, #20]
 804437a:	492d      	ldr	r1, [pc, #180]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 804437c:	4313      	orrs	r3, r2
 804437e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8044380:	4b2b      	ldr	r3, [pc, #172]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 8044382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044384:	f023 0220 	bic.w	r2, r3, #32
 8044388:	687b      	ldr	r3, [r7, #4]
 804438a:	699b      	ldr	r3, [r3, #24]
 804438c:	4928      	ldr	r1, [pc, #160]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 804438e:	4313      	orrs	r3, r2
 8044390:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8044392:	4b27      	ldr	r3, [pc, #156]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 8044394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044396:	4a26      	ldr	r2, [pc, #152]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 8044398:	f023 0310 	bic.w	r3, r3, #16
 804439c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 804439e:	4b24      	ldr	r3, [pc, #144]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80443a2:	4b24      	ldr	r3, [pc, #144]	@ (8044434 <RCCEx_PLL2_Config+0x160>)
 80443a4:	4013      	ands	r3, r2
 80443a6:	687a      	ldr	r2, [r7, #4]
 80443a8:	69d2      	ldr	r2, [r2, #28]
 80443aa:	00d2      	lsls	r2, r2, #3
 80443ac:	4920      	ldr	r1, [pc, #128]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443ae:	4313      	orrs	r3, r2
 80443b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80443b2:	4b1f      	ldr	r3, [pc, #124]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443b6:	4a1e      	ldr	r2, [pc, #120]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443b8:	f043 0310 	orr.w	r3, r3, #16
 80443bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80443be:	683b      	ldr	r3, [r7, #0]
 80443c0:	2b00      	cmp	r3, #0
 80443c2:	d106      	bne.n	80443d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80443c4:	4b1a      	ldr	r3, [pc, #104]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443c8:	4a19      	ldr	r2, [pc, #100]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80443ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80443d0:	e00f      	b.n	80443f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80443d2:	683b      	ldr	r3, [r7, #0]
 80443d4:	2b01      	cmp	r3, #1
 80443d6:	d106      	bne.n	80443e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80443d8:	4b15      	ldr	r3, [pc, #84]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443dc:	4a14      	ldr	r2, [pc, #80]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80443e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80443e4:	e005      	b.n	80443f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80443e6:	4b12      	ldr	r3, [pc, #72]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80443ea:	4a11      	ldr	r2, [pc, #68]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80443f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80443f2:	4b0f      	ldr	r3, [pc, #60]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443f4:	681b      	ldr	r3, [r3, #0]
 80443f6:	4a0e      	ldr	r2, [pc, #56]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 80443f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80443fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80443fe:	f7fc fb97 	bl	8040b30 <HAL_GetTick>
 8044402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8044404:	e008      	b.n	8044418 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8044406:	f7fc fb93 	bl	8040b30 <HAL_GetTick>
 804440a:	4602      	mov	r2, r0
 804440c:	68bb      	ldr	r3, [r7, #8]
 804440e:	1ad3      	subs	r3, r2, r3
 8044410:	2b02      	cmp	r3, #2
 8044412:	d901      	bls.n	8044418 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8044414:	2303      	movs	r3, #3
 8044416:	e006      	b.n	8044426 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8044418:	4b05      	ldr	r3, [pc, #20]	@ (8044430 <RCCEx_PLL2_Config+0x15c>)
 804441a:	681b      	ldr	r3, [r3, #0]
 804441c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8044420:	2b00      	cmp	r3, #0
 8044422:	d0f0      	beq.n	8044406 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8044424:	7bfb      	ldrb	r3, [r7, #15]
}
 8044426:	4618      	mov	r0, r3
 8044428:	3710      	adds	r7, #16
 804442a:	46bd      	mov	sp, r7
 804442c:	bd80      	pop	{r7, pc}
 804442e:	bf00      	nop
 8044430:	58024400 	.word	0x58024400
 8044434:	ffff0007 	.word	0xffff0007

08044438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8044438:	b580      	push	{r7, lr}
 804443a:	b084      	sub	sp, #16
 804443c:	af00      	add	r7, sp, #0
 804443e:	6078      	str	r0, [r7, #4]
 8044440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8044442:	2300      	movs	r3, #0
 8044444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8044446:	4b53      	ldr	r3, [pc, #332]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804444a:	f003 0303 	and.w	r3, r3, #3
 804444e:	2b03      	cmp	r3, #3
 8044450:	d101      	bne.n	8044456 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8044452:	2301      	movs	r3, #1
 8044454:	e099      	b.n	804458a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8044456:	4b4f      	ldr	r3, [pc, #316]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044458:	681b      	ldr	r3, [r3, #0]
 804445a:	4a4e      	ldr	r2, [pc, #312]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804445c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8044460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044462:	f7fc fb65 	bl	8040b30 <HAL_GetTick>
 8044466:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8044468:	e008      	b.n	804447c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 804446a:	f7fc fb61 	bl	8040b30 <HAL_GetTick>
 804446e:	4602      	mov	r2, r0
 8044470:	68bb      	ldr	r3, [r7, #8]
 8044472:	1ad3      	subs	r3, r2, r3
 8044474:	2b02      	cmp	r3, #2
 8044476:	d901      	bls.n	804447c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8044478:	2303      	movs	r3, #3
 804447a:	e086      	b.n	804458a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 804447c:	4b45      	ldr	r3, [pc, #276]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804447e:	681b      	ldr	r3, [r3, #0]
 8044480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8044484:	2b00      	cmp	r3, #0
 8044486:	d1f0      	bne.n	804446a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8044488:	4b42      	ldr	r3, [pc, #264]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804448c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8044490:	687b      	ldr	r3, [r7, #4]
 8044492:	681b      	ldr	r3, [r3, #0]
 8044494:	051b      	lsls	r3, r3, #20
 8044496:	493f      	ldr	r1, [pc, #252]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044498:	4313      	orrs	r3, r2
 804449a:	628b      	str	r3, [r1, #40]	@ 0x28
 804449c:	687b      	ldr	r3, [r7, #4]
 804449e:	685b      	ldr	r3, [r3, #4]
 80444a0:	3b01      	subs	r3, #1
 80444a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80444a6:	687b      	ldr	r3, [r7, #4]
 80444a8:	689b      	ldr	r3, [r3, #8]
 80444aa:	3b01      	subs	r3, #1
 80444ac:	025b      	lsls	r3, r3, #9
 80444ae:	b29b      	uxth	r3, r3
 80444b0:	431a      	orrs	r2, r3
 80444b2:	687b      	ldr	r3, [r7, #4]
 80444b4:	68db      	ldr	r3, [r3, #12]
 80444b6:	3b01      	subs	r3, #1
 80444b8:	041b      	lsls	r3, r3, #16
 80444ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80444be:	431a      	orrs	r2, r3
 80444c0:	687b      	ldr	r3, [r7, #4]
 80444c2:	691b      	ldr	r3, [r3, #16]
 80444c4:	3b01      	subs	r3, #1
 80444c6:	061b      	lsls	r3, r3, #24
 80444c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80444cc:	4931      	ldr	r1, [pc, #196]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444ce:	4313      	orrs	r3, r2
 80444d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80444d2:	4b30      	ldr	r3, [pc, #192]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80444d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80444da:	687b      	ldr	r3, [r7, #4]
 80444dc:	695b      	ldr	r3, [r3, #20]
 80444de:	492d      	ldr	r1, [pc, #180]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444e0:	4313      	orrs	r3, r2
 80444e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80444e4:	4b2b      	ldr	r3, [pc, #172]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80444e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80444ec:	687b      	ldr	r3, [r7, #4]
 80444ee:	699b      	ldr	r3, [r3, #24]
 80444f0:	4928      	ldr	r1, [pc, #160]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444f2:	4313      	orrs	r3, r2
 80444f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80444f6:	4b27      	ldr	r3, [pc, #156]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80444fa:	4a26      	ldr	r2, [pc, #152]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 80444fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8044500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8044502:	4b24      	ldr	r3, [pc, #144]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8044506:	4b24      	ldr	r3, [pc, #144]	@ (8044598 <RCCEx_PLL3_Config+0x160>)
 8044508:	4013      	ands	r3, r2
 804450a:	687a      	ldr	r2, [r7, #4]
 804450c:	69d2      	ldr	r2, [r2, #28]
 804450e:	00d2      	lsls	r2, r2, #3
 8044510:	4920      	ldr	r1, [pc, #128]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044512:	4313      	orrs	r3, r2
 8044514:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8044516:	4b1f      	ldr	r3, [pc, #124]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804451a:	4a1e      	ldr	r2, [pc, #120]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8044520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8044522:	683b      	ldr	r3, [r7, #0]
 8044524:	2b00      	cmp	r3, #0
 8044526:	d106      	bne.n	8044536 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8044528:	4b1a      	ldr	r3, [pc, #104]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804452c:	4a19      	ldr	r2, [pc, #100]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804452e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8044532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8044534:	e00f      	b.n	8044556 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8044536:	683b      	ldr	r3, [r7, #0]
 8044538:	2b01      	cmp	r3, #1
 804453a:	d106      	bne.n	804454a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 804453c:	4b15      	ldr	r3, [pc, #84]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044540:	4a14      	ldr	r2, [pc, #80]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044542:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8044546:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8044548:	e005      	b.n	8044556 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 804454a:	4b12      	ldr	r3, [pc, #72]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804454e:	4a11      	ldr	r2, [pc, #68]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044550:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8044554:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8044556:	4b0f      	ldr	r3, [pc, #60]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 8044558:	681b      	ldr	r3, [r3, #0]
 804455a:	4a0e      	ldr	r2, [pc, #56]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804455c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8044560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044562:	f7fc fae5 	bl	8040b30 <HAL_GetTick>
 8044566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8044568:	e008      	b.n	804457c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 804456a:	f7fc fae1 	bl	8040b30 <HAL_GetTick>
 804456e:	4602      	mov	r2, r0
 8044570:	68bb      	ldr	r3, [r7, #8]
 8044572:	1ad3      	subs	r3, r2, r3
 8044574:	2b02      	cmp	r3, #2
 8044576:	d901      	bls.n	804457c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8044578:	2303      	movs	r3, #3
 804457a:	e006      	b.n	804458a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 804457c:	4b05      	ldr	r3, [pc, #20]	@ (8044594 <RCCEx_PLL3_Config+0x15c>)
 804457e:	681b      	ldr	r3, [r3, #0]
 8044580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8044584:	2b00      	cmp	r3, #0
 8044586:	d0f0      	beq.n	804456a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8044588:	7bfb      	ldrb	r3, [r7, #15]
}
 804458a:	4618      	mov	r0, r3
 804458c:	3710      	adds	r7, #16
 804458e:	46bd      	mov	sp, r7
 8044590:	bd80      	pop	{r7, pc}
 8044592:	bf00      	nop
 8044594:	58024400 	.word	0x58024400
 8044598:	ffff0007 	.word	0xffff0007

0804459c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 804459c:	b580      	push	{r7, lr}
 804459e:	b082      	sub	sp, #8
 80445a0:	af00      	add	r7, sp, #0
 80445a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80445a4:	687b      	ldr	r3, [r7, #4]
 80445a6:	2b00      	cmp	r3, #0
 80445a8:	d101      	bne.n	80445ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80445aa:	2301      	movs	r3, #1
 80445ac:	e049      	b.n	8044642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80445ae:	687b      	ldr	r3, [r7, #4]
 80445b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80445b4:	b2db      	uxtb	r3, r3
 80445b6:	2b00      	cmp	r3, #0
 80445b8:	d106      	bne.n	80445c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80445ba:	687b      	ldr	r3, [r7, #4]
 80445bc:	2200      	movs	r2, #0
 80445be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80445c2:	6878      	ldr	r0, [r7, #4]
 80445c4:	f000 f841 	bl	804464a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80445c8:	687b      	ldr	r3, [r7, #4]
 80445ca:	2202      	movs	r2, #2
 80445cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80445d0:	687b      	ldr	r3, [r7, #4]
 80445d2:	681a      	ldr	r2, [r3, #0]
 80445d4:	687b      	ldr	r3, [r7, #4]
 80445d6:	3304      	adds	r3, #4
 80445d8:	4619      	mov	r1, r3
 80445da:	4610      	mov	r0, r2
 80445dc:	f000 f9f6 	bl	80449cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80445e0:	687b      	ldr	r3, [r7, #4]
 80445e2:	2201      	movs	r2, #1
 80445e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80445e8:	687b      	ldr	r3, [r7, #4]
 80445ea:	2201      	movs	r2, #1
 80445ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80445f0:	687b      	ldr	r3, [r7, #4]
 80445f2:	2201      	movs	r2, #1
 80445f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80445f8:	687b      	ldr	r3, [r7, #4]
 80445fa:	2201      	movs	r2, #1
 80445fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8044600:	687b      	ldr	r3, [r7, #4]
 8044602:	2201      	movs	r2, #1
 8044604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8044608:	687b      	ldr	r3, [r7, #4]
 804460a:	2201      	movs	r2, #1
 804460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8044610:	687b      	ldr	r3, [r7, #4]
 8044612:	2201      	movs	r2, #1
 8044614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8044618:	687b      	ldr	r3, [r7, #4]
 804461a:	2201      	movs	r2, #1
 804461c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8044620:	687b      	ldr	r3, [r7, #4]
 8044622:	2201      	movs	r2, #1
 8044624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8044628:	687b      	ldr	r3, [r7, #4]
 804462a:	2201      	movs	r2, #1
 804462c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8044630:	687b      	ldr	r3, [r7, #4]
 8044632:	2201      	movs	r2, #1
 8044634:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8044638:	687b      	ldr	r3, [r7, #4]
 804463a:	2201      	movs	r2, #1
 804463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8044640:	2300      	movs	r3, #0
}
 8044642:	4618      	mov	r0, r3
 8044644:	3708      	adds	r7, #8
 8044646:	46bd      	mov	sp, r7
 8044648:	bd80      	pop	{r7, pc}

0804464a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 804464a:	b480      	push	{r7}
 804464c:	b083      	sub	sp, #12
 804464e:	af00      	add	r7, sp, #0
 8044650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8044652:	bf00      	nop
 8044654:	370c      	adds	r7, #12
 8044656:	46bd      	mov	sp, r7
 8044658:	f85d 7b04 	ldr.w	r7, [sp], #4
 804465c:	4770      	bx	lr
	...

08044660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8044660:	b480      	push	{r7}
 8044662:	b085      	sub	sp, #20
 8044664:	af00      	add	r7, sp, #0
 8044666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8044668:	687b      	ldr	r3, [r7, #4]
 804466a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 804466e:	b2db      	uxtb	r3, r3
 8044670:	2b01      	cmp	r3, #1
 8044672:	d001      	beq.n	8044678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8044674:	2301      	movs	r3, #1
 8044676:	e05e      	b.n	8044736 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8044678:	687b      	ldr	r3, [r7, #4]
 804467a:	2202      	movs	r2, #2
 804467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8044680:	687b      	ldr	r3, [r7, #4]
 8044682:	681b      	ldr	r3, [r3, #0]
 8044684:	68da      	ldr	r2, [r3, #12]
 8044686:	687b      	ldr	r3, [r7, #4]
 8044688:	681b      	ldr	r3, [r3, #0]
 804468a:	f042 0201 	orr.w	r2, r2, #1
 804468e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8044690:	687b      	ldr	r3, [r7, #4]
 8044692:	681b      	ldr	r3, [r3, #0]
 8044694:	4a2b      	ldr	r2, [pc, #172]	@ (8044744 <HAL_TIM_Base_Start_IT+0xe4>)
 8044696:	4293      	cmp	r3, r2
 8044698:	d02c      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 804469a:	687b      	ldr	r3, [r7, #4]
 804469c:	681b      	ldr	r3, [r3, #0]
 804469e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80446a2:	d027      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446a4:	687b      	ldr	r3, [r7, #4]
 80446a6:	681b      	ldr	r3, [r3, #0]
 80446a8:	4a27      	ldr	r2, [pc, #156]	@ (8044748 <HAL_TIM_Base_Start_IT+0xe8>)
 80446aa:	4293      	cmp	r3, r2
 80446ac:	d022      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446ae:	687b      	ldr	r3, [r7, #4]
 80446b0:	681b      	ldr	r3, [r3, #0]
 80446b2:	4a26      	ldr	r2, [pc, #152]	@ (804474c <HAL_TIM_Base_Start_IT+0xec>)
 80446b4:	4293      	cmp	r3, r2
 80446b6:	d01d      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446b8:	687b      	ldr	r3, [r7, #4]
 80446ba:	681b      	ldr	r3, [r3, #0]
 80446bc:	4a24      	ldr	r2, [pc, #144]	@ (8044750 <HAL_TIM_Base_Start_IT+0xf0>)
 80446be:	4293      	cmp	r3, r2
 80446c0:	d018      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446c2:	687b      	ldr	r3, [r7, #4]
 80446c4:	681b      	ldr	r3, [r3, #0]
 80446c6:	4a23      	ldr	r2, [pc, #140]	@ (8044754 <HAL_TIM_Base_Start_IT+0xf4>)
 80446c8:	4293      	cmp	r3, r2
 80446ca:	d013      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446cc:	687b      	ldr	r3, [r7, #4]
 80446ce:	681b      	ldr	r3, [r3, #0]
 80446d0:	4a21      	ldr	r2, [pc, #132]	@ (8044758 <HAL_TIM_Base_Start_IT+0xf8>)
 80446d2:	4293      	cmp	r3, r2
 80446d4:	d00e      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446d6:	687b      	ldr	r3, [r7, #4]
 80446d8:	681b      	ldr	r3, [r3, #0]
 80446da:	4a20      	ldr	r2, [pc, #128]	@ (804475c <HAL_TIM_Base_Start_IT+0xfc>)
 80446dc:	4293      	cmp	r3, r2
 80446de:	d009      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446e0:	687b      	ldr	r3, [r7, #4]
 80446e2:	681b      	ldr	r3, [r3, #0]
 80446e4:	4a1e      	ldr	r2, [pc, #120]	@ (8044760 <HAL_TIM_Base_Start_IT+0x100>)
 80446e6:	4293      	cmp	r3, r2
 80446e8:	d004      	beq.n	80446f4 <HAL_TIM_Base_Start_IT+0x94>
 80446ea:	687b      	ldr	r3, [r7, #4]
 80446ec:	681b      	ldr	r3, [r3, #0]
 80446ee:	4a1d      	ldr	r2, [pc, #116]	@ (8044764 <HAL_TIM_Base_Start_IT+0x104>)
 80446f0:	4293      	cmp	r3, r2
 80446f2:	d115      	bne.n	8044720 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80446f4:	687b      	ldr	r3, [r7, #4]
 80446f6:	681b      	ldr	r3, [r3, #0]
 80446f8:	689a      	ldr	r2, [r3, #8]
 80446fa:	4b1b      	ldr	r3, [pc, #108]	@ (8044768 <HAL_TIM_Base_Start_IT+0x108>)
 80446fc:	4013      	ands	r3, r2
 80446fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044700:	68fb      	ldr	r3, [r7, #12]
 8044702:	2b06      	cmp	r3, #6
 8044704:	d015      	beq.n	8044732 <HAL_TIM_Base_Start_IT+0xd2>
 8044706:	68fb      	ldr	r3, [r7, #12]
 8044708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804470c:	d011      	beq.n	8044732 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 804470e:	687b      	ldr	r3, [r7, #4]
 8044710:	681b      	ldr	r3, [r3, #0]
 8044712:	681a      	ldr	r2, [r3, #0]
 8044714:	687b      	ldr	r3, [r7, #4]
 8044716:	681b      	ldr	r3, [r3, #0]
 8044718:	f042 0201 	orr.w	r2, r2, #1
 804471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804471e:	e008      	b.n	8044732 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8044720:	687b      	ldr	r3, [r7, #4]
 8044722:	681b      	ldr	r3, [r3, #0]
 8044724:	681a      	ldr	r2, [r3, #0]
 8044726:	687b      	ldr	r3, [r7, #4]
 8044728:	681b      	ldr	r3, [r3, #0]
 804472a:	f042 0201 	orr.w	r2, r2, #1
 804472e:	601a      	str	r2, [r3, #0]
 8044730:	e000      	b.n	8044734 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8044732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8044734:	2300      	movs	r3, #0
}
 8044736:	4618      	mov	r0, r3
 8044738:	3714      	adds	r7, #20
 804473a:	46bd      	mov	sp, r7
 804473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044740:	4770      	bx	lr
 8044742:	bf00      	nop
 8044744:	40010000 	.word	0x40010000
 8044748:	40000400 	.word	0x40000400
 804474c:	40000800 	.word	0x40000800
 8044750:	40000c00 	.word	0x40000c00
 8044754:	40010400 	.word	0x40010400
 8044758:	40001800 	.word	0x40001800
 804475c:	40014000 	.word	0x40014000
 8044760:	4000e000 	.word	0x4000e000
 8044764:	4000e400 	.word	0x4000e400
 8044768:	00010007 	.word	0x00010007

0804476c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 804476c:	b580      	push	{r7, lr}
 804476e:	b084      	sub	sp, #16
 8044770:	af00      	add	r7, sp, #0
 8044772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8044774:	687b      	ldr	r3, [r7, #4]
 8044776:	681b      	ldr	r3, [r3, #0]
 8044778:	68db      	ldr	r3, [r3, #12]
 804477a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 804477c:	687b      	ldr	r3, [r7, #4]
 804477e:	681b      	ldr	r3, [r3, #0]
 8044780:	691b      	ldr	r3, [r3, #16]
 8044782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8044784:	68bb      	ldr	r3, [r7, #8]
 8044786:	f003 0302 	and.w	r3, r3, #2
 804478a:	2b00      	cmp	r3, #0
 804478c:	d020      	beq.n	80447d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 804478e:	68fb      	ldr	r3, [r7, #12]
 8044790:	f003 0302 	and.w	r3, r3, #2
 8044794:	2b00      	cmp	r3, #0
 8044796:	d01b      	beq.n	80447d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8044798:	687b      	ldr	r3, [r7, #4]
 804479a:	681b      	ldr	r3, [r3, #0]
 804479c:	f06f 0202 	mvn.w	r2, #2
 80447a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80447a2:	687b      	ldr	r3, [r7, #4]
 80447a4:	2201      	movs	r2, #1
 80447a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80447a8:	687b      	ldr	r3, [r7, #4]
 80447aa:	681b      	ldr	r3, [r3, #0]
 80447ac:	699b      	ldr	r3, [r3, #24]
 80447ae:	f003 0303 	and.w	r3, r3, #3
 80447b2:	2b00      	cmp	r3, #0
 80447b4:	d003      	beq.n	80447be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80447b6:	6878      	ldr	r0, [r7, #4]
 80447b8:	f000 f8e9 	bl	804498e <HAL_TIM_IC_CaptureCallback>
 80447bc:	e005      	b.n	80447ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80447be:	6878      	ldr	r0, [r7, #4]
 80447c0:	f000 f8db 	bl	804497a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80447c4:	6878      	ldr	r0, [r7, #4]
 80447c6:	f000 f8ec 	bl	80449a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80447ca:	687b      	ldr	r3, [r7, #4]
 80447cc:	2200      	movs	r2, #0
 80447ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80447d0:	68bb      	ldr	r3, [r7, #8]
 80447d2:	f003 0304 	and.w	r3, r3, #4
 80447d6:	2b00      	cmp	r3, #0
 80447d8:	d020      	beq.n	804481c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80447da:	68fb      	ldr	r3, [r7, #12]
 80447dc:	f003 0304 	and.w	r3, r3, #4
 80447e0:	2b00      	cmp	r3, #0
 80447e2:	d01b      	beq.n	804481c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80447e4:	687b      	ldr	r3, [r7, #4]
 80447e6:	681b      	ldr	r3, [r3, #0]
 80447e8:	f06f 0204 	mvn.w	r2, #4
 80447ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80447ee:	687b      	ldr	r3, [r7, #4]
 80447f0:	2202      	movs	r2, #2
 80447f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80447f4:	687b      	ldr	r3, [r7, #4]
 80447f6:	681b      	ldr	r3, [r3, #0]
 80447f8:	699b      	ldr	r3, [r3, #24]
 80447fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80447fe:	2b00      	cmp	r3, #0
 8044800:	d003      	beq.n	804480a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8044802:	6878      	ldr	r0, [r7, #4]
 8044804:	f000 f8c3 	bl	804498e <HAL_TIM_IC_CaptureCallback>
 8044808:	e005      	b.n	8044816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804480a:	6878      	ldr	r0, [r7, #4]
 804480c:	f000 f8b5 	bl	804497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8044810:	6878      	ldr	r0, [r7, #4]
 8044812:	f000 f8c6 	bl	80449a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044816:	687b      	ldr	r3, [r7, #4]
 8044818:	2200      	movs	r2, #0
 804481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 804481c:	68bb      	ldr	r3, [r7, #8]
 804481e:	f003 0308 	and.w	r3, r3, #8
 8044822:	2b00      	cmp	r3, #0
 8044824:	d020      	beq.n	8044868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8044826:	68fb      	ldr	r3, [r7, #12]
 8044828:	f003 0308 	and.w	r3, r3, #8
 804482c:	2b00      	cmp	r3, #0
 804482e:	d01b      	beq.n	8044868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8044830:	687b      	ldr	r3, [r7, #4]
 8044832:	681b      	ldr	r3, [r3, #0]
 8044834:	f06f 0208 	mvn.w	r2, #8
 8044838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804483a:	687b      	ldr	r3, [r7, #4]
 804483c:	2204      	movs	r2, #4
 804483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8044840:	687b      	ldr	r3, [r7, #4]
 8044842:	681b      	ldr	r3, [r3, #0]
 8044844:	69db      	ldr	r3, [r3, #28]
 8044846:	f003 0303 	and.w	r3, r3, #3
 804484a:	2b00      	cmp	r3, #0
 804484c:	d003      	beq.n	8044856 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804484e:	6878      	ldr	r0, [r7, #4]
 8044850:	f000 f89d 	bl	804498e <HAL_TIM_IC_CaptureCallback>
 8044854:	e005      	b.n	8044862 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8044856:	6878      	ldr	r0, [r7, #4]
 8044858:	f000 f88f 	bl	804497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804485c:	6878      	ldr	r0, [r7, #4]
 804485e:	f000 f8a0 	bl	80449a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8044862:	687b      	ldr	r3, [r7, #4]
 8044864:	2200      	movs	r2, #0
 8044866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8044868:	68bb      	ldr	r3, [r7, #8]
 804486a:	f003 0310 	and.w	r3, r3, #16
 804486e:	2b00      	cmp	r3, #0
 8044870:	d020      	beq.n	80448b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8044872:	68fb      	ldr	r3, [r7, #12]
 8044874:	f003 0310 	and.w	r3, r3, #16
 8044878:	2b00      	cmp	r3, #0
 804487a:	d01b      	beq.n	80448b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 804487c:	687b      	ldr	r3, [r7, #4]
 804487e:	681b      	ldr	r3, [r3, #0]
 8044880:	f06f 0210 	mvn.w	r2, #16
 8044884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8044886:	687b      	ldr	r3, [r7, #4]
 8044888:	2208      	movs	r2, #8
 804488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804488c:	687b      	ldr	r3, [r7, #4]
 804488e:	681b      	ldr	r3, [r3, #0]
 8044890:	69db      	ldr	r3, [r3, #28]
 8044892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044896:	2b00      	cmp	r3, #0
 8044898:	d003      	beq.n	80448a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804489a:	6878      	ldr	r0, [r7, #4]
 804489c:	f000 f877 	bl	804498e <HAL_TIM_IC_CaptureCallback>
 80448a0:	e005      	b.n	80448ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80448a2:	6878      	ldr	r0, [r7, #4]
 80448a4:	f000 f869 	bl	804497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80448a8:	6878      	ldr	r0, [r7, #4]
 80448aa:	f000 f87a 	bl	80449a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80448ae:	687b      	ldr	r3, [r7, #4]
 80448b0:	2200      	movs	r2, #0
 80448b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80448b4:	68bb      	ldr	r3, [r7, #8]
 80448b6:	f003 0301 	and.w	r3, r3, #1
 80448ba:	2b00      	cmp	r3, #0
 80448bc:	d00c      	beq.n	80448d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80448be:	68fb      	ldr	r3, [r7, #12]
 80448c0:	f003 0301 	and.w	r3, r3, #1
 80448c4:	2b00      	cmp	r3, #0
 80448c6:	d007      	beq.n	80448d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80448c8:	687b      	ldr	r3, [r7, #4]
 80448ca:	681b      	ldr	r3, [r3, #0]
 80448cc:	f06f 0201 	mvn.w	r2, #1
 80448d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80448d2:	6878      	ldr	r0, [r7, #4]
 80448d4:	f7fb ff38 	bl	8040748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80448d8:	68bb      	ldr	r3, [r7, #8]
 80448da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80448de:	2b00      	cmp	r3, #0
 80448e0:	d104      	bne.n	80448ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80448e2:	68bb      	ldr	r3, [r7, #8]
 80448e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80448e8:	2b00      	cmp	r3, #0
 80448ea:	d00c      	beq.n	8044906 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80448ec:	68fb      	ldr	r3, [r7, #12]
 80448ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80448f2:	2b00      	cmp	r3, #0
 80448f4:	d007      	beq.n	8044906 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80448f6:	687b      	ldr	r3, [r7, #4]
 80448f8:	681b      	ldr	r3, [r3, #0]
 80448fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80448fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8044900:	6878      	ldr	r0, [r7, #4]
 8044902:	f000 f919 	bl	8044b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8044906:	68bb      	ldr	r3, [r7, #8]
 8044908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804490c:	2b00      	cmp	r3, #0
 804490e:	d00c      	beq.n	804492a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8044910:	68fb      	ldr	r3, [r7, #12]
 8044912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8044916:	2b00      	cmp	r3, #0
 8044918:	d007      	beq.n	804492a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804491a:	687b      	ldr	r3, [r7, #4]
 804491c:	681b      	ldr	r3, [r3, #0]
 804491e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8044922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8044924:	6878      	ldr	r0, [r7, #4]
 8044926:	f000 f911 	bl	8044b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 804492a:	68bb      	ldr	r3, [r7, #8]
 804492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8044930:	2b00      	cmp	r3, #0
 8044932:	d00c      	beq.n	804494e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8044934:	68fb      	ldr	r3, [r7, #12]
 8044936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804493a:	2b00      	cmp	r3, #0
 804493c:	d007      	beq.n	804494e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 804493e:	687b      	ldr	r3, [r7, #4]
 8044940:	681b      	ldr	r3, [r3, #0]
 8044942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8044946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8044948:	6878      	ldr	r0, [r7, #4]
 804494a:	f000 f834 	bl	80449b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 804494e:	68bb      	ldr	r3, [r7, #8]
 8044950:	f003 0320 	and.w	r3, r3, #32
 8044954:	2b00      	cmp	r3, #0
 8044956:	d00c      	beq.n	8044972 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8044958:	68fb      	ldr	r3, [r7, #12]
 804495a:	f003 0320 	and.w	r3, r3, #32
 804495e:	2b00      	cmp	r3, #0
 8044960:	d007      	beq.n	8044972 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8044962:	687b      	ldr	r3, [r7, #4]
 8044964:	681b      	ldr	r3, [r3, #0]
 8044966:	f06f 0220 	mvn.w	r2, #32
 804496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 804496c:	6878      	ldr	r0, [r7, #4]
 804496e:	f000 f8d9 	bl	8044b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8044972:	bf00      	nop
 8044974:	3710      	adds	r7, #16
 8044976:	46bd      	mov	sp, r7
 8044978:	bd80      	pop	{r7, pc}

0804497a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804497a:	b480      	push	{r7}
 804497c:	b083      	sub	sp, #12
 804497e:	af00      	add	r7, sp, #0
 8044980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8044982:	bf00      	nop
 8044984:	370c      	adds	r7, #12
 8044986:	46bd      	mov	sp, r7
 8044988:	f85d 7b04 	ldr.w	r7, [sp], #4
 804498c:	4770      	bx	lr

0804498e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804498e:	b480      	push	{r7}
 8044990:	b083      	sub	sp, #12
 8044992:	af00      	add	r7, sp, #0
 8044994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8044996:	bf00      	nop
 8044998:	370c      	adds	r7, #12
 804499a:	46bd      	mov	sp, r7
 804499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449a0:	4770      	bx	lr

080449a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80449a2:	b480      	push	{r7}
 80449a4:	b083      	sub	sp, #12
 80449a6:	af00      	add	r7, sp, #0
 80449a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80449aa:	bf00      	nop
 80449ac:	370c      	adds	r7, #12
 80449ae:	46bd      	mov	sp, r7
 80449b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449b4:	4770      	bx	lr

080449b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80449b6:	b480      	push	{r7}
 80449b8:	b083      	sub	sp, #12
 80449ba:	af00      	add	r7, sp, #0
 80449bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80449be:	bf00      	nop
 80449c0:	370c      	adds	r7, #12
 80449c2:	46bd      	mov	sp, r7
 80449c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449c8:	4770      	bx	lr
	...

080449cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80449cc:	b480      	push	{r7}
 80449ce:	b085      	sub	sp, #20
 80449d0:	af00      	add	r7, sp, #0
 80449d2:	6078      	str	r0, [r7, #4]
 80449d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80449d6:	687b      	ldr	r3, [r7, #4]
 80449d8:	681b      	ldr	r3, [r3, #0]
 80449da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80449dc:	687b      	ldr	r3, [r7, #4]
 80449de:	4a47      	ldr	r2, [pc, #284]	@ (8044afc <TIM_Base_SetConfig+0x130>)
 80449e0:	4293      	cmp	r3, r2
 80449e2:	d013      	beq.n	8044a0c <TIM_Base_SetConfig+0x40>
 80449e4:	687b      	ldr	r3, [r7, #4]
 80449e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80449ea:	d00f      	beq.n	8044a0c <TIM_Base_SetConfig+0x40>
 80449ec:	687b      	ldr	r3, [r7, #4]
 80449ee:	4a44      	ldr	r2, [pc, #272]	@ (8044b00 <TIM_Base_SetConfig+0x134>)
 80449f0:	4293      	cmp	r3, r2
 80449f2:	d00b      	beq.n	8044a0c <TIM_Base_SetConfig+0x40>
 80449f4:	687b      	ldr	r3, [r7, #4]
 80449f6:	4a43      	ldr	r2, [pc, #268]	@ (8044b04 <TIM_Base_SetConfig+0x138>)
 80449f8:	4293      	cmp	r3, r2
 80449fa:	d007      	beq.n	8044a0c <TIM_Base_SetConfig+0x40>
 80449fc:	687b      	ldr	r3, [r7, #4]
 80449fe:	4a42      	ldr	r2, [pc, #264]	@ (8044b08 <TIM_Base_SetConfig+0x13c>)
 8044a00:	4293      	cmp	r3, r2
 8044a02:	d003      	beq.n	8044a0c <TIM_Base_SetConfig+0x40>
 8044a04:	687b      	ldr	r3, [r7, #4]
 8044a06:	4a41      	ldr	r2, [pc, #260]	@ (8044b0c <TIM_Base_SetConfig+0x140>)
 8044a08:	4293      	cmp	r3, r2
 8044a0a:	d108      	bne.n	8044a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8044a0c:	68fb      	ldr	r3, [r7, #12]
 8044a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8044a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8044a14:	683b      	ldr	r3, [r7, #0]
 8044a16:	685b      	ldr	r3, [r3, #4]
 8044a18:	68fa      	ldr	r2, [r7, #12]
 8044a1a:	4313      	orrs	r3, r2
 8044a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8044a1e:	687b      	ldr	r3, [r7, #4]
 8044a20:	4a36      	ldr	r2, [pc, #216]	@ (8044afc <TIM_Base_SetConfig+0x130>)
 8044a22:	4293      	cmp	r3, r2
 8044a24:	d027      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a26:	687b      	ldr	r3, [r7, #4]
 8044a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044a2c:	d023      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a2e:	687b      	ldr	r3, [r7, #4]
 8044a30:	4a33      	ldr	r2, [pc, #204]	@ (8044b00 <TIM_Base_SetConfig+0x134>)
 8044a32:	4293      	cmp	r3, r2
 8044a34:	d01f      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a36:	687b      	ldr	r3, [r7, #4]
 8044a38:	4a32      	ldr	r2, [pc, #200]	@ (8044b04 <TIM_Base_SetConfig+0x138>)
 8044a3a:	4293      	cmp	r3, r2
 8044a3c:	d01b      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a3e:	687b      	ldr	r3, [r7, #4]
 8044a40:	4a31      	ldr	r2, [pc, #196]	@ (8044b08 <TIM_Base_SetConfig+0x13c>)
 8044a42:	4293      	cmp	r3, r2
 8044a44:	d017      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a46:	687b      	ldr	r3, [r7, #4]
 8044a48:	4a30      	ldr	r2, [pc, #192]	@ (8044b0c <TIM_Base_SetConfig+0x140>)
 8044a4a:	4293      	cmp	r3, r2
 8044a4c:	d013      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a4e:	687b      	ldr	r3, [r7, #4]
 8044a50:	4a2f      	ldr	r2, [pc, #188]	@ (8044b10 <TIM_Base_SetConfig+0x144>)
 8044a52:	4293      	cmp	r3, r2
 8044a54:	d00f      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a56:	687b      	ldr	r3, [r7, #4]
 8044a58:	4a2e      	ldr	r2, [pc, #184]	@ (8044b14 <TIM_Base_SetConfig+0x148>)
 8044a5a:	4293      	cmp	r3, r2
 8044a5c:	d00b      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a5e:	687b      	ldr	r3, [r7, #4]
 8044a60:	4a2d      	ldr	r2, [pc, #180]	@ (8044b18 <TIM_Base_SetConfig+0x14c>)
 8044a62:	4293      	cmp	r3, r2
 8044a64:	d007      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a66:	687b      	ldr	r3, [r7, #4]
 8044a68:	4a2c      	ldr	r2, [pc, #176]	@ (8044b1c <TIM_Base_SetConfig+0x150>)
 8044a6a:	4293      	cmp	r3, r2
 8044a6c:	d003      	beq.n	8044a76 <TIM_Base_SetConfig+0xaa>
 8044a6e:	687b      	ldr	r3, [r7, #4]
 8044a70:	4a2b      	ldr	r2, [pc, #172]	@ (8044b20 <TIM_Base_SetConfig+0x154>)
 8044a72:	4293      	cmp	r3, r2
 8044a74:	d108      	bne.n	8044a88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8044a76:	68fb      	ldr	r3, [r7, #12]
 8044a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8044a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8044a7e:	683b      	ldr	r3, [r7, #0]
 8044a80:	68db      	ldr	r3, [r3, #12]
 8044a82:	68fa      	ldr	r2, [r7, #12]
 8044a84:	4313      	orrs	r3, r2
 8044a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8044a88:	68fb      	ldr	r3, [r7, #12]
 8044a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8044a8e:	683b      	ldr	r3, [r7, #0]
 8044a90:	695b      	ldr	r3, [r3, #20]
 8044a92:	4313      	orrs	r3, r2
 8044a94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8044a96:	683b      	ldr	r3, [r7, #0]
 8044a98:	689a      	ldr	r2, [r3, #8]
 8044a9a:	687b      	ldr	r3, [r7, #4]
 8044a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8044a9e:	683b      	ldr	r3, [r7, #0]
 8044aa0:	681a      	ldr	r2, [r3, #0]
 8044aa2:	687b      	ldr	r3, [r7, #4]
 8044aa4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8044aa6:	687b      	ldr	r3, [r7, #4]
 8044aa8:	4a14      	ldr	r2, [pc, #80]	@ (8044afc <TIM_Base_SetConfig+0x130>)
 8044aaa:	4293      	cmp	r3, r2
 8044aac:	d00f      	beq.n	8044ace <TIM_Base_SetConfig+0x102>
 8044aae:	687b      	ldr	r3, [r7, #4]
 8044ab0:	4a16      	ldr	r2, [pc, #88]	@ (8044b0c <TIM_Base_SetConfig+0x140>)
 8044ab2:	4293      	cmp	r3, r2
 8044ab4:	d00b      	beq.n	8044ace <TIM_Base_SetConfig+0x102>
 8044ab6:	687b      	ldr	r3, [r7, #4]
 8044ab8:	4a15      	ldr	r2, [pc, #84]	@ (8044b10 <TIM_Base_SetConfig+0x144>)
 8044aba:	4293      	cmp	r3, r2
 8044abc:	d007      	beq.n	8044ace <TIM_Base_SetConfig+0x102>
 8044abe:	687b      	ldr	r3, [r7, #4]
 8044ac0:	4a14      	ldr	r2, [pc, #80]	@ (8044b14 <TIM_Base_SetConfig+0x148>)
 8044ac2:	4293      	cmp	r3, r2
 8044ac4:	d003      	beq.n	8044ace <TIM_Base_SetConfig+0x102>
 8044ac6:	687b      	ldr	r3, [r7, #4]
 8044ac8:	4a13      	ldr	r2, [pc, #76]	@ (8044b18 <TIM_Base_SetConfig+0x14c>)
 8044aca:	4293      	cmp	r3, r2
 8044acc:	d103      	bne.n	8044ad6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8044ace:	683b      	ldr	r3, [r7, #0]
 8044ad0:	691a      	ldr	r2, [r3, #16]
 8044ad2:	687b      	ldr	r3, [r7, #4]
 8044ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8044ad6:	687b      	ldr	r3, [r7, #4]
 8044ad8:	681b      	ldr	r3, [r3, #0]
 8044ada:	f043 0204 	orr.w	r2, r3, #4
 8044ade:	687b      	ldr	r3, [r7, #4]
 8044ae0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8044ae2:	687b      	ldr	r3, [r7, #4]
 8044ae4:	2201      	movs	r2, #1
 8044ae6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8044ae8:	687b      	ldr	r3, [r7, #4]
 8044aea:	68fa      	ldr	r2, [r7, #12]
 8044aec:	601a      	str	r2, [r3, #0]
}
 8044aee:	bf00      	nop
 8044af0:	3714      	adds	r7, #20
 8044af2:	46bd      	mov	sp, r7
 8044af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044af8:	4770      	bx	lr
 8044afa:	bf00      	nop
 8044afc:	40010000 	.word	0x40010000
 8044b00:	40000400 	.word	0x40000400
 8044b04:	40000800 	.word	0x40000800
 8044b08:	40000c00 	.word	0x40000c00
 8044b0c:	40010400 	.word	0x40010400
 8044b10:	40014000 	.word	0x40014000
 8044b14:	40014400 	.word	0x40014400
 8044b18:	40014800 	.word	0x40014800
 8044b1c:	4000e000 	.word	0x4000e000
 8044b20:	4000e400 	.word	0x4000e400

08044b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8044b24:	b480      	push	{r7}
 8044b26:	b083      	sub	sp, #12
 8044b28:	af00      	add	r7, sp, #0
 8044b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8044b2c:	bf00      	nop
 8044b2e:	370c      	adds	r7, #12
 8044b30:	46bd      	mov	sp, r7
 8044b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b36:	4770      	bx	lr

08044b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8044b38:	b480      	push	{r7}
 8044b3a:	b083      	sub	sp, #12
 8044b3c:	af00      	add	r7, sp, #0
 8044b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8044b40:	bf00      	nop
 8044b42:	370c      	adds	r7, #12
 8044b44:	46bd      	mov	sp, r7
 8044b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b4a:	4770      	bx	lr

08044b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8044b4c:	b480      	push	{r7}
 8044b4e:	b083      	sub	sp, #12
 8044b50:	af00      	add	r7, sp, #0
 8044b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8044b54:	bf00      	nop
 8044b56:	370c      	adds	r7, #12
 8044b58:	46bd      	mov	sp, r7
 8044b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b5e:	4770      	bx	lr

08044b60 <__NVIC_SetPriority>:
{
 8044b60:	b480      	push	{r7}
 8044b62:	b083      	sub	sp, #12
 8044b64:	af00      	add	r7, sp, #0
 8044b66:	4603      	mov	r3, r0
 8044b68:	6039      	str	r1, [r7, #0]
 8044b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8044b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8044b70:	2b00      	cmp	r3, #0
 8044b72:	db0a      	blt.n	8044b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8044b74:	683b      	ldr	r3, [r7, #0]
 8044b76:	b2da      	uxtb	r2, r3
 8044b78:	490c      	ldr	r1, [pc, #48]	@ (8044bac <__NVIC_SetPriority+0x4c>)
 8044b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8044b7e:	0112      	lsls	r2, r2, #4
 8044b80:	b2d2      	uxtb	r2, r2
 8044b82:	440b      	add	r3, r1
 8044b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8044b88:	e00a      	b.n	8044ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8044b8a:	683b      	ldr	r3, [r7, #0]
 8044b8c:	b2da      	uxtb	r2, r3
 8044b8e:	4908      	ldr	r1, [pc, #32]	@ (8044bb0 <__NVIC_SetPriority+0x50>)
 8044b90:	88fb      	ldrh	r3, [r7, #6]
 8044b92:	f003 030f 	and.w	r3, r3, #15
 8044b96:	3b04      	subs	r3, #4
 8044b98:	0112      	lsls	r2, r2, #4
 8044b9a:	b2d2      	uxtb	r2, r2
 8044b9c:	440b      	add	r3, r1
 8044b9e:	761a      	strb	r2, [r3, #24]
}
 8044ba0:	bf00      	nop
 8044ba2:	370c      	adds	r7, #12
 8044ba4:	46bd      	mov	sp, r7
 8044ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044baa:	4770      	bx	lr
 8044bac:	e000e100 	.word	0xe000e100
 8044bb0:	e000ed00 	.word	0xe000ed00

08044bb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8044bb4:	b580      	push	{r7, lr}
 8044bb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8044bb8:	4b05      	ldr	r3, [pc, #20]	@ (8044bd0 <SysTick_Handler+0x1c>)
 8044bba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8044bbc:	f001 fd18 	bl	80465f0 <xTaskGetSchedulerState>
 8044bc0:	4603      	mov	r3, r0
 8044bc2:	2b01      	cmp	r3, #1
 8044bc4:	d001      	beq.n	8044bca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8044bc6:	f002 fb0f 	bl	80471e8 <xPortSysTickHandler>
  }
}
 8044bca:	bf00      	nop
 8044bcc:	bd80      	pop	{r7, pc}
 8044bce:	bf00      	nop
 8044bd0:	e000e010 	.word	0xe000e010

08044bd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8044bd4:	b580      	push	{r7, lr}
 8044bd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8044bd8:	2100      	movs	r1, #0
 8044bda:	f06f 0004 	mvn.w	r0, #4
 8044bde:	f7ff ffbf 	bl	8044b60 <__NVIC_SetPriority>
#endif
}
 8044be2:	bf00      	nop
 8044be4:	bd80      	pop	{r7, pc}
	...

08044be8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8044be8:	b480      	push	{r7}
 8044bea:	b083      	sub	sp, #12
 8044bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8044bee:	f3ef 8305 	mrs	r3, IPSR
 8044bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8044bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8044bf6:	2b00      	cmp	r3, #0
 8044bf8:	d003      	beq.n	8044c02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8044bfa:	f06f 0305 	mvn.w	r3, #5
 8044bfe:	607b      	str	r3, [r7, #4]
 8044c00:	e00c      	b.n	8044c1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8044c02:	4b0a      	ldr	r3, [pc, #40]	@ (8044c2c <osKernelInitialize+0x44>)
 8044c04:	681b      	ldr	r3, [r3, #0]
 8044c06:	2b00      	cmp	r3, #0
 8044c08:	d105      	bne.n	8044c16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8044c0a:	4b08      	ldr	r3, [pc, #32]	@ (8044c2c <osKernelInitialize+0x44>)
 8044c0c:	2201      	movs	r2, #1
 8044c0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8044c10:	2300      	movs	r3, #0
 8044c12:	607b      	str	r3, [r7, #4]
 8044c14:	e002      	b.n	8044c1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8044c16:	f04f 33ff 	mov.w	r3, #4294967295
 8044c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8044c1c:	687b      	ldr	r3, [r7, #4]
}
 8044c1e:	4618      	mov	r0, r3
 8044c20:	370c      	adds	r7, #12
 8044c22:	46bd      	mov	sp, r7
 8044c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044c28:	4770      	bx	lr
 8044c2a:	bf00      	nop
 8044c2c:	24000130 	.word	0x24000130

08044c30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8044c30:	b580      	push	{r7, lr}
 8044c32:	b082      	sub	sp, #8
 8044c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8044c36:	f3ef 8305 	mrs	r3, IPSR
 8044c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8044c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8044c3e:	2b00      	cmp	r3, #0
 8044c40:	d003      	beq.n	8044c4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8044c42:	f06f 0305 	mvn.w	r3, #5
 8044c46:	607b      	str	r3, [r7, #4]
 8044c48:	e010      	b.n	8044c6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8044c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8044c78 <osKernelStart+0x48>)
 8044c4c:	681b      	ldr	r3, [r3, #0]
 8044c4e:	2b01      	cmp	r3, #1
 8044c50:	d109      	bne.n	8044c66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8044c52:	f7ff ffbf 	bl	8044bd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8044c56:	4b08      	ldr	r3, [pc, #32]	@ (8044c78 <osKernelStart+0x48>)
 8044c58:	2202      	movs	r2, #2
 8044c5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8044c5c:	f001 f87a 	bl	8045d54 <vTaskStartScheduler>
      stat = osOK;
 8044c60:	2300      	movs	r3, #0
 8044c62:	607b      	str	r3, [r7, #4]
 8044c64:	e002      	b.n	8044c6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8044c66:	f04f 33ff 	mov.w	r3, #4294967295
 8044c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8044c6c:	687b      	ldr	r3, [r7, #4]
}
 8044c6e:	4618      	mov	r0, r3
 8044c70:	3708      	adds	r7, #8
 8044c72:	46bd      	mov	sp, r7
 8044c74:	bd80      	pop	{r7, pc}
 8044c76:	bf00      	nop
 8044c78:	24000130 	.word	0x24000130

08044c7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8044c7c:	b580      	push	{r7, lr}
 8044c7e:	b08e      	sub	sp, #56	@ 0x38
 8044c80:	af04      	add	r7, sp, #16
 8044c82:	60f8      	str	r0, [r7, #12]
 8044c84:	60b9      	str	r1, [r7, #8]
 8044c86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8044c88:	2300      	movs	r3, #0
 8044c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8044c8c:	f3ef 8305 	mrs	r3, IPSR
 8044c90:	617b      	str	r3, [r7, #20]
  return(result);
 8044c92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8044c94:	2b00      	cmp	r3, #0
 8044c96:	d17e      	bne.n	8044d96 <osThreadNew+0x11a>
 8044c98:	68fb      	ldr	r3, [r7, #12]
 8044c9a:	2b00      	cmp	r3, #0
 8044c9c:	d07b      	beq.n	8044d96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8044c9e:	2380      	movs	r3, #128	@ 0x80
 8044ca0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8044ca2:	2318      	movs	r3, #24
 8044ca4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8044ca6:	2300      	movs	r3, #0
 8044ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8044caa:	f04f 33ff 	mov.w	r3, #4294967295
 8044cae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8044cb0:	687b      	ldr	r3, [r7, #4]
 8044cb2:	2b00      	cmp	r3, #0
 8044cb4:	d045      	beq.n	8044d42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8044cb6:	687b      	ldr	r3, [r7, #4]
 8044cb8:	681b      	ldr	r3, [r3, #0]
 8044cba:	2b00      	cmp	r3, #0
 8044cbc:	d002      	beq.n	8044cc4 <osThreadNew+0x48>
        name = attr->name;
 8044cbe:	687b      	ldr	r3, [r7, #4]
 8044cc0:	681b      	ldr	r3, [r3, #0]
 8044cc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8044cc4:	687b      	ldr	r3, [r7, #4]
 8044cc6:	699b      	ldr	r3, [r3, #24]
 8044cc8:	2b00      	cmp	r3, #0
 8044cca:	d002      	beq.n	8044cd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8044ccc:	687b      	ldr	r3, [r7, #4]
 8044cce:	699b      	ldr	r3, [r3, #24]
 8044cd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8044cd2:	69fb      	ldr	r3, [r7, #28]
 8044cd4:	2b00      	cmp	r3, #0
 8044cd6:	d008      	beq.n	8044cea <osThreadNew+0x6e>
 8044cd8:	69fb      	ldr	r3, [r7, #28]
 8044cda:	2b38      	cmp	r3, #56	@ 0x38
 8044cdc:	d805      	bhi.n	8044cea <osThreadNew+0x6e>
 8044cde:	687b      	ldr	r3, [r7, #4]
 8044ce0:	685b      	ldr	r3, [r3, #4]
 8044ce2:	f003 0301 	and.w	r3, r3, #1
 8044ce6:	2b00      	cmp	r3, #0
 8044ce8:	d001      	beq.n	8044cee <osThreadNew+0x72>
        return (NULL);
 8044cea:	2300      	movs	r3, #0
 8044cec:	e054      	b.n	8044d98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8044cee:	687b      	ldr	r3, [r7, #4]
 8044cf0:	695b      	ldr	r3, [r3, #20]
 8044cf2:	2b00      	cmp	r3, #0
 8044cf4:	d003      	beq.n	8044cfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8044cf6:	687b      	ldr	r3, [r7, #4]
 8044cf8:	695b      	ldr	r3, [r3, #20]
 8044cfa:	089b      	lsrs	r3, r3, #2
 8044cfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8044cfe:	687b      	ldr	r3, [r7, #4]
 8044d00:	689b      	ldr	r3, [r3, #8]
 8044d02:	2b00      	cmp	r3, #0
 8044d04:	d00e      	beq.n	8044d24 <osThreadNew+0xa8>
 8044d06:	687b      	ldr	r3, [r7, #4]
 8044d08:	68db      	ldr	r3, [r3, #12]
 8044d0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8044d0c:	d90a      	bls.n	8044d24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8044d0e:	687b      	ldr	r3, [r7, #4]
 8044d10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8044d12:	2b00      	cmp	r3, #0
 8044d14:	d006      	beq.n	8044d24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8044d16:	687b      	ldr	r3, [r7, #4]
 8044d18:	695b      	ldr	r3, [r3, #20]
 8044d1a:	2b00      	cmp	r3, #0
 8044d1c:	d002      	beq.n	8044d24 <osThreadNew+0xa8>
        mem = 1;
 8044d1e:	2301      	movs	r3, #1
 8044d20:	61bb      	str	r3, [r7, #24]
 8044d22:	e010      	b.n	8044d46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8044d24:	687b      	ldr	r3, [r7, #4]
 8044d26:	689b      	ldr	r3, [r3, #8]
 8044d28:	2b00      	cmp	r3, #0
 8044d2a:	d10c      	bne.n	8044d46 <osThreadNew+0xca>
 8044d2c:	687b      	ldr	r3, [r7, #4]
 8044d2e:	68db      	ldr	r3, [r3, #12]
 8044d30:	2b00      	cmp	r3, #0
 8044d32:	d108      	bne.n	8044d46 <osThreadNew+0xca>
 8044d34:	687b      	ldr	r3, [r7, #4]
 8044d36:	691b      	ldr	r3, [r3, #16]
 8044d38:	2b00      	cmp	r3, #0
 8044d3a:	d104      	bne.n	8044d46 <osThreadNew+0xca>
          mem = 0;
 8044d3c:	2300      	movs	r3, #0
 8044d3e:	61bb      	str	r3, [r7, #24]
 8044d40:	e001      	b.n	8044d46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8044d42:	2300      	movs	r3, #0
 8044d44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8044d46:	69bb      	ldr	r3, [r7, #24]
 8044d48:	2b01      	cmp	r3, #1
 8044d4a:	d110      	bne.n	8044d6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8044d4c:	687b      	ldr	r3, [r7, #4]
 8044d4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8044d50:	687a      	ldr	r2, [r7, #4]
 8044d52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8044d54:	9202      	str	r2, [sp, #8]
 8044d56:	9301      	str	r3, [sp, #4]
 8044d58:	69fb      	ldr	r3, [r7, #28]
 8044d5a:	9300      	str	r3, [sp, #0]
 8044d5c:	68bb      	ldr	r3, [r7, #8]
 8044d5e:	6a3a      	ldr	r2, [r7, #32]
 8044d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8044d62:	68f8      	ldr	r0, [r7, #12]
 8044d64:	f000 fe1a 	bl	804599c <xTaskCreateStatic>
 8044d68:	4603      	mov	r3, r0
 8044d6a:	613b      	str	r3, [r7, #16]
 8044d6c:	e013      	b.n	8044d96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8044d6e:	69bb      	ldr	r3, [r7, #24]
 8044d70:	2b00      	cmp	r3, #0
 8044d72:	d110      	bne.n	8044d96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8044d74:	6a3b      	ldr	r3, [r7, #32]
 8044d76:	b29a      	uxth	r2, r3
 8044d78:	f107 0310 	add.w	r3, r7, #16
 8044d7c:	9301      	str	r3, [sp, #4]
 8044d7e:	69fb      	ldr	r3, [r7, #28]
 8044d80:	9300      	str	r3, [sp, #0]
 8044d82:	68bb      	ldr	r3, [r7, #8]
 8044d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8044d86:	68f8      	ldr	r0, [r7, #12]
 8044d88:	f000 fe68 	bl	8045a5c <xTaskCreate>
 8044d8c:	4603      	mov	r3, r0
 8044d8e:	2b01      	cmp	r3, #1
 8044d90:	d001      	beq.n	8044d96 <osThreadNew+0x11a>
            hTask = NULL;
 8044d92:	2300      	movs	r3, #0
 8044d94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8044d96:	693b      	ldr	r3, [r7, #16]
}
 8044d98:	4618      	mov	r0, r3
 8044d9a:	3728      	adds	r7, #40	@ 0x28
 8044d9c:	46bd      	mov	sp, r7
 8044d9e:	bd80      	pop	{r7, pc}

08044da0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8044da0:	b580      	push	{r7, lr}
 8044da2:	b084      	sub	sp, #16
 8044da4:	af00      	add	r7, sp, #0
 8044da6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8044da8:	f3ef 8305 	mrs	r3, IPSR
 8044dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8044dae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8044db0:	2b00      	cmp	r3, #0
 8044db2:	d003      	beq.n	8044dbc <osDelay+0x1c>
    stat = osErrorISR;
 8044db4:	f06f 0305 	mvn.w	r3, #5
 8044db8:	60fb      	str	r3, [r7, #12]
 8044dba:	e007      	b.n	8044dcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8044dbc:	2300      	movs	r3, #0
 8044dbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8044dc0:	687b      	ldr	r3, [r7, #4]
 8044dc2:	2b00      	cmp	r3, #0
 8044dc4:	d002      	beq.n	8044dcc <osDelay+0x2c>
      vTaskDelay(ticks);
 8044dc6:	6878      	ldr	r0, [r7, #4]
 8044dc8:	f000 ff8e 	bl	8045ce8 <vTaskDelay>
    }
  }

  return (stat);
 8044dcc:	68fb      	ldr	r3, [r7, #12]
}
 8044dce:	4618      	mov	r0, r3
 8044dd0:	3710      	adds	r7, #16
 8044dd2:	46bd      	mov	sp, r7
 8044dd4:	bd80      	pop	{r7, pc}
	...

08044dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8044dd8:	b480      	push	{r7}
 8044dda:	b085      	sub	sp, #20
 8044ddc:	af00      	add	r7, sp, #0
 8044dde:	60f8      	str	r0, [r7, #12]
 8044de0:	60b9      	str	r1, [r7, #8]
 8044de2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8044de4:	68fb      	ldr	r3, [r7, #12]
 8044de6:	4a07      	ldr	r2, [pc, #28]	@ (8044e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8044de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8044dea:	68bb      	ldr	r3, [r7, #8]
 8044dec:	4a06      	ldr	r2, [pc, #24]	@ (8044e08 <vApplicationGetIdleTaskMemory+0x30>)
 8044dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8044df0:	687b      	ldr	r3, [r7, #4]
 8044df2:	2280      	movs	r2, #128	@ 0x80
 8044df4:	601a      	str	r2, [r3, #0]
}
 8044df6:	bf00      	nop
 8044df8:	3714      	adds	r7, #20
 8044dfa:	46bd      	mov	sp, r7
 8044dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e00:	4770      	bx	lr
 8044e02:	bf00      	nop
 8044e04:	24000134 	.word	0x24000134
 8044e08:	24000190 	.word	0x24000190

08044e0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8044e0c:	b480      	push	{r7}
 8044e0e:	b085      	sub	sp, #20
 8044e10:	af00      	add	r7, sp, #0
 8044e12:	60f8      	str	r0, [r7, #12]
 8044e14:	60b9      	str	r1, [r7, #8]
 8044e16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8044e18:	68fb      	ldr	r3, [r7, #12]
 8044e1a:	4a07      	ldr	r2, [pc, #28]	@ (8044e38 <vApplicationGetTimerTaskMemory+0x2c>)
 8044e1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8044e1e:	68bb      	ldr	r3, [r7, #8]
 8044e20:	4a06      	ldr	r2, [pc, #24]	@ (8044e3c <vApplicationGetTimerTaskMemory+0x30>)
 8044e22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8044e24:	687b      	ldr	r3, [r7, #4]
 8044e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8044e2a:	601a      	str	r2, [r3, #0]
}
 8044e2c:	bf00      	nop
 8044e2e:	3714      	adds	r7, #20
 8044e30:	46bd      	mov	sp, r7
 8044e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e36:	4770      	bx	lr
 8044e38:	24000390 	.word	0x24000390
 8044e3c:	240003ec 	.word	0x240003ec

08044e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8044e40:	b480      	push	{r7}
 8044e42:	b083      	sub	sp, #12
 8044e44:	af00      	add	r7, sp, #0
 8044e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8044e48:	687b      	ldr	r3, [r7, #4]
 8044e4a:	f103 0208 	add.w	r2, r3, #8
 8044e4e:	687b      	ldr	r3, [r7, #4]
 8044e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8044e52:	687b      	ldr	r3, [r7, #4]
 8044e54:	f04f 32ff 	mov.w	r2, #4294967295
 8044e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8044e5a:	687b      	ldr	r3, [r7, #4]
 8044e5c:	f103 0208 	add.w	r2, r3, #8
 8044e60:	687b      	ldr	r3, [r7, #4]
 8044e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8044e64:	687b      	ldr	r3, [r7, #4]
 8044e66:	f103 0208 	add.w	r2, r3, #8
 8044e6a:	687b      	ldr	r3, [r7, #4]
 8044e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8044e6e:	687b      	ldr	r3, [r7, #4]
 8044e70:	2200      	movs	r2, #0
 8044e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8044e74:	bf00      	nop
 8044e76:	370c      	adds	r7, #12
 8044e78:	46bd      	mov	sp, r7
 8044e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e7e:	4770      	bx	lr

08044e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8044e80:	b480      	push	{r7}
 8044e82:	b083      	sub	sp, #12
 8044e84:	af00      	add	r7, sp, #0
 8044e86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8044e88:	687b      	ldr	r3, [r7, #4]
 8044e8a:	2200      	movs	r2, #0
 8044e8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8044e8e:	bf00      	nop
 8044e90:	370c      	adds	r7, #12
 8044e92:	46bd      	mov	sp, r7
 8044e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e98:	4770      	bx	lr

08044e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8044e9a:	b480      	push	{r7}
 8044e9c:	b085      	sub	sp, #20
 8044e9e:	af00      	add	r7, sp, #0
 8044ea0:	6078      	str	r0, [r7, #4]
 8044ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8044ea4:	687b      	ldr	r3, [r7, #4]
 8044ea6:	685b      	ldr	r3, [r3, #4]
 8044ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8044eaa:	683b      	ldr	r3, [r7, #0]
 8044eac:	68fa      	ldr	r2, [r7, #12]
 8044eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8044eb0:	68fb      	ldr	r3, [r7, #12]
 8044eb2:	689a      	ldr	r2, [r3, #8]
 8044eb4:	683b      	ldr	r3, [r7, #0]
 8044eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8044eb8:	68fb      	ldr	r3, [r7, #12]
 8044eba:	689b      	ldr	r3, [r3, #8]
 8044ebc:	683a      	ldr	r2, [r7, #0]
 8044ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8044ec0:	68fb      	ldr	r3, [r7, #12]
 8044ec2:	683a      	ldr	r2, [r7, #0]
 8044ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8044ec6:	683b      	ldr	r3, [r7, #0]
 8044ec8:	687a      	ldr	r2, [r7, #4]
 8044eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8044ecc:	687b      	ldr	r3, [r7, #4]
 8044ece:	681b      	ldr	r3, [r3, #0]
 8044ed0:	1c5a      	adds	r2, r3, #1
 8044ed2:	687b      	ldr	r3, [r7, #4]
 8044ed4:	601a      	str	r2, [r3, #0]
}
 8044ed6:	bf00      	nop
 8044ed8:	3714      	adds	r7, #20
 8044eda:	46bd      	mov	sp, r7
 8044edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ee0:	4770      	bx	lr

08044ee2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8044ee2:	b480      	push	{r7}
 8044ee4:	b085      	sub	sp, #20
 8044ee6:	af00      	add	r7, sp, #0
 8044ee8:	6078      	str	r0, [r7, #4]
 8044eea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8044eec:	683b      	ldr	r3, [r7, #0]
 8044eee:	681b      	ldr	r3, [r3, #0]
 8044ef0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8044ef2:	68bb      	ldr	r3, [r7, #8]
 8044ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044ef8:	d103      	bne.n	8044f02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8044efa:	687b      	ldr	r3, [r7, #4]
 8044efc:	691b      	ldr	r3, [r3, #16]
 8044efe:	60fb      	str	r3, [r7, #12]
 8044f00:	e00c      	b.n	8044f1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8044f02:	687b      	ldr	r3, [r7, #4]
 8044f04:	3308      	adds	r3, #8
 8044f06:	60fb      	str	r3, [r7, #12]
 8044f08:	e002      	b.n	8044f10 <vListInsert+0x2e>
 8044f0a:	68fb      	ldr	r3, [r7, #12]
 8044f0c:	685b      	ldr	r3, [r3, #4]
 8044f0e:	60fb      	str	r3, [r7, #12]
 8044f10:	68fb      	ldr	r3, [r7, #12]
 8044f12:	685b      	ldr	r3, [r3, #4]
 8044f14:	681b      	ldr	r3, [r3, #0]
 8044f16:	68ba      	ldr	r2, [r7, #8]
 8044f18:	429a      	cmp	r2, r3
 8044f1a:	d2f6      	bcs.n	8044f0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8044f1c:	68fb      	ldr	r3, [r7, #12]
 8044f1e:	685a      	ldr	r2, [r3, #4]
 8044f20:	683b      	ldr	r3, [r7, #0]
 8044f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8044f24:	683b      	ldr	r3, [r7, #0]
 8044f26:	685b      	ldr	r3, [r3, #4]
 8044f28:	683a      	ldr	r2, [r7, #0]
 8044f2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8044f2c:	683b      	ldr	r3, [r7, #0]
 8044f2e:	68fa      	ldr	r2, [r7, #12]
 8044f30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8044f32:	68fb      	ldr	r3, [r7, #12]
 8044f34:	683a      	ldr	r2, [r7, #0]
 8044f36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8044f38:	683b      	ldr	r3, [r7, #0]
 8044f3a:	687a      	ldr	r2, [r7, #4]
 8044f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8044f3e:	687b      	ldr	r3, [r7, #4]
 8044f40:	681b      	ldr	r3, [r3, #0]
 8044f42:	1c5a      	adds	r2, r3, #1
 8044f44:	687b      	ldr	r3, [r7, #4]
 8044f46:	601a      	str	r2, [r3, #0]
}
 8044f48:	bf00      	nop
 8044f4a:	3714      	adds	r7, #20
 8044f4c:	46bd      	mov	sp, r7
 8044f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f52:	4770      	bx	lr

08044f54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8044f54:	b480      	push	{r7}
 8044f56:	b085      	sub	sp, #20
 8044f58:	af00      	add	r7, sp, #0
 8044f5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8044f5c:	687b      	ldr	r3, [r7, #4]
 8044f5e:	691b      	ldr	r3, [r3, #16]
 8044f60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8044f62:	687b      	ldr	r3, [r7, #4]
 8044f64:	685b      	ldr	r3, [r3, #4]
 8044f66:	687a      	ldr	r2, [r7, #4]
 8044f68:	6892      	ldr	r2, [r2, #8]
 8044f6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8044f6c:	687b      	ldr	r3, [r7, #4]
 8044f6e:	689b      	ldr	r3, [r3, #8]
 8044f70:	687a      	ldr	r2, [r7, #4]
 8044f72:	6852      	ldr	r2, [r2, #4]
 8044f74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8044f76:	68fb      	ldr	r3, [r7, #12]
 8044f78:	685b      	ldr	r3, [r3, #4]
 8044f7a:	687a      	ldr	r2, [r7, #4]
 8044f7c:	429a      	cmp	r2, r3
 8044f7e:	d103      	bne.n	8044f88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8044f80:	687b      	ldr	r3, [r7, #4]
 8044f82:	689a      	ldr	r2, [r3, #8]
 8044f84:	68fb      	ldr	r3, [r7, #12]
 8044f86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8044f88:	687b      	ldr	r3, [r7, #4]
 8044f8a:	2200      	movs	r2, #0
 8044f8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8044f8e:	68fb      	ldr	r3, [r7, #12]
 8044f90:	681b      	ldr	r3, [r3, #0]
 8044f92:	1e5a      	subs	r2, r3, #1
 8044f94:	68fb      	ldr	r3, [r7, #12]
 8044f96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8044f98:	68fb      	ldr	r3, [r7, #12]
 8044f9a:	681b      	ldr	r3, [r3, #0]
}
 8044f9c:	4618      	mov	r0, r3
 8044f9e:	3714      	adds	r7, #20
 8044fa0:	46bd      	mov	sp, r7
 8044fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044fa6:	4770      	bx	lr

08044fa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8044fa8:	b580      	push	{r7, lr}
 8044faa:	b084      	sub	sp, #16
 8044fac:	af00      	add	r7, sp, #0
 8044fae:	6078      	str	r0, [r7, #4]
 8044fb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8044fb2:	687b      	ldr	r3, [r7, #4]
 8044fb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8044fb6:	68fb      	ldr	r3, [r7, #12]
 8044fb8:	2b00      	cmp	r3, #0
 8044fba:	d10b      	bne.n	8044fd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8044fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8044fc0:	f383 8811 	msr	BASEPRI, r3
 8044fc4:	f3bf 8f6f 	isb	sy
 8044fc8:	f3bf 8f4f 	dsb	sy
 8044fcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8044fce:	bf00      	nop
 8044fd0:	bf00      	nop
 8044fd2:	e7fd      	b.n	8044fd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8044fd4:	f002 f878 	bl	80470c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8044fd8:	68fb      	ldr	r3, [r7, #12]
 8044fda:	681a      	ldr	r2, [r3, #0]
 8044fdc:	68fb      	ldr	r3, [r7, #12]
 8044fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8044fe0:	68f9      	ldr	r1, [r7, #12]
 8044fe2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8044fe4:	fb01 f303 	mul.w	r3, r1, r3
 8044fe8:	441a      	add	r2, r3
 8044fea:	68fb      	ldr	r3, [r7, #12]
 8044fec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8044fee:	68fb      	ldr	r3, [r7, #12]
 8044ff0:	2200      	movs	r2, #0
 8044ff2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8044ff4:	68fb      	ldr	r3, [r7, #12]
 8044ff6:	681a      	ldr	r2, [r3, #0]
 8044ff8:	68fb      	ldr	r3, [r7, #12]
 8044ffa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8044ffc:	68fb      	ldr	r3, [r7, #12]
 8044ffe:	681a      	ldr	r2, [r3, #0]
 8045000:	68fb      	ldr	r3, [r7, #12]
 8045002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8045004:	3b01      	subs	r3, #1
 8045006:	68f9      	ldr	r1, [r7, #12]
 8045008:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 804500a:	fb01 f303 	mul.w	r3, r1, r3
 804500e:	441a      	add	r2, r3
 8045010:	68fb      	ldr	r3, [r7, #12]
 8045012:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8045014:	68fb      	ldr	r3, [r7, #12]
 8045016:	22ff      	movs	r2, #255	@ 0xff
 8045018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 804501c:	68fb      	ldr	r3, [r7, #12]
 804501e:	22ff      	movs	r2, #255	@ 0xff
 8045020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8045024:	683b      	ldr	r3, [r7, #0]
 8045026:	2b00      	cmp	r3, #0
 8045028:	d114      	bne.n	8045054 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 804502a:	68fb      	ldr	r3, [r7, #12]
 804502c:	691b      	ldr	r3, [r3, #16]
 804502e:	2b00      	cmp	r3, #0
 8045030:	d01a      	beq.n	8045068 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8045032:	68fb      	ldr	r3, [r7, #12]
 8045034:	3310      	adds	r3, #16
 8045036:	4618      	mov	r0, r3
 8045038:	f001 f91a 	bl	8046270 <xTaskRemoveFromEventList>
 804503c:	4603      	mov	r3, r0
 804503e:	2b00      	cmp	r3, #0
 8045040:	d012      	beq.n	8045068 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8045042:	4b0d      	ldr	r3, [pc, #52]	@ (8045078 <xQueueGenericReset+0xd0>)
 8045044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8045048:	601a      	str	r2, [r3, #0]
 804504a:	f3bf 8f4f 	dsb	sy
 804504e:	f3bf 8f6f 	isb	sy
 8045052:	e009      	b.n	8045068 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8045054:	68fb      	ldr	r3, [r7, #12]
 8045056:	3310      	adds	r3, #16
 8045058:	4618      	mov	r0, r3
 804505a:	f7ff fef1 	bl	8044e40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 804505e:	68fb      	ldr	r3, [r7, #12]
 8045060:	3324      	adds	r3, #36	@ 0x24
 8045062:	4618      	mov	r0, r3
 8045064:	f7ff feec 	bl	8044e40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8045068:	f002 f860 	bl	804712c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 804506c:	2301      	movs	r3, #1
}
 804506e:	4618      	mov	r0, r3
 8045070:	3710      	adds	r7, #16
 8045072:	46bd      	mov	sp, r7
 8045074:	bd80      	pop	{r7, pc}
 8045076:	bf00      	nop
 8045078:	e000ed04 	.word	0xe000ed04

0804507c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 804507c:	b580      	push	{r7, lr}
 804507e:	b08e      	sub	sp, #56	@ 0x38
 8045080:	af02      	add	r7, sp, #8
 8045082:	60f8      	str	r0, [r7, #12]
 8045084:	60b9      	str	r1, [r7, #8]
 8045086:	607a      	str	r2, [r7, #4]
 8045088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 804508a:	68fb      	ldr	r3, [r7, #12]
 804508c:	2b00      	cmp	r3, #0
 804508e:	d10b      	bne.n	80450a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8045090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045094:	f383 8811 	msr	BASEPRI, r3
 8045098:	f3bf 8f6f 	isb	sy
 804509c:	f3bf 8f4f 	dsb	sy
 80450a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80450a2:	bf00      	nop
 80450a4:	bf00      	nop
 80450a6:	e7fd      	b.n	80450a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80450a8:	683b      	ldr	r3, [r7, #0]
 80450aa:	2b00      	cmp	r3, #0
 80450ac:	d10b      	bne.n	80450c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80450ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80450b2:	f383 8811 	msr	BASEPRI, r3
 80450b6:	f3bf 8f6f 	isb	sy
 80450ba:	f3bf 8f4f 	dsb	sy
 80450be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80450c0:	bf00      	nop
 80450c2:	bf00      	nop
 80450c4:	e7fd      	b.n	80450c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80450c6:	687b      	ldr	r3, [r7, #4]
 80450c8:	2b00      	cmp	r3, #0
 80450ca:	d002      	beq.n	80450d2 <xQueueGenericCreateStatic+0x56>
 80450cc:	68bb      	ldr	r3, [r7, #8]
 80450ce:	2b00      	cmp	r3, #0
 80450d0:	d001      	beq.n	80450d6 <xQueueGenericCreateStatic+0x5a>
 80450d2:	2301      	movs	r3, #1
 80450d4:	e000      	b.n	80450d8 <xQueueGenericCreateStatic+0x5c>
 80450d6:	2300      	movs	r3, #0
 80450d8:	2b00      	cmp	r3, #0
 80450da:	d10b      	bne.n	80450f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80450dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80450e0:	f383 8811 	msr	BASEPRI, r3
 80450e4:	f3bf 8f6f 	isb	sy
 80450e8:	f3bf 8f4f 	dsb	sy
 80450ec:	623b      	str	r3, [r7, #32]
}
 80450ee:	bf00      	nop
 80450f0:	bf00      	nop
 80450f2:	e7fd      	b.n	80450f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80450f4:	687b      	ldr	r3, [r7, #4]
 80450f6:	2b00      	cmp	r3, #0
 80450f8:	d102      	bne.n	8045100 <xQueueGenericCreateStatic+0x84>
 80450fa:	68bb      	ldr	r3, [r7, #8]
 80450fc:	2b00      	cmp	r3, #0
 80450fe:	d101      	bne.n	8045104 <xQueueGenericCreateStatic+0x88>
 8045100:	2301      	movs	r3, #1
 8045102:	e000      	b.n	8045106 <xQueueGenericCreateStatic+0x8a>
 8045104:	2300      	movs	r3, #0
 8045106:	2b00      	cmp	r3, #0
 8045108:	d10b      	bne.n	8045122 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 804510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804510e:	f383 8811 	msr	BASEPRI, r3
 8045112:	f3bf 8f6f 	isb	sy
 8045116:	f3bf 8f4f 	dsb	sy
 804511a:	61fb      	str	r3, [r7, #28]
}
 804511c:	bf00      	nop
 804511e:	bf00      	nop
 8045120:	e7fd      	b.n	804511e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8045122:	2350      	movs	r3, #80	@ 0x50
 8045124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8045126:	697b      	ldr	r3, [r7, #20]
 8045128:	2b50      	cmp	r3, #80	@ 0x50
 804512a:	d00b      	beq.n	8045144 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 804512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045130:	f383 8811 	msr	BASEPRI, r3
 8045134:	f3bf 8f6f 	isb	sy
 8045138:	f3bf 8f4f 	dsb	sy
 804513c:	61bb      	str	r3, [r7, #24]
}
 804513e:	bf00      	nop
 8045140:	bf00      	nop
 8045142:	e7fd      	b.n	8045140 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8045144:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8045146:	683b      	ldr	r3, [r7, #0]
 8045148:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 804514a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804514c:	2b00      	cmp	r3, #0
 804514e:	d00d      	beq.n	804516c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8045150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045152:	2201      	movs	r2, #1
 8045154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8045158:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 804515c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804515e:	9300      	str	r3, [sp, #0]
 8045160:	4613      	mov	r3, r2
 8045162:	687a      	ldr	r2, [r7, #4]
 8045164:	68b9      	ldr	r1, [r7, #8]
 8045166:	68f8      	ldr	r0, [r7, #12]
 8045168:	f000 f805 	bl	8045176 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 804516c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 804516e:	4618      	mov	r0, r3
 8045170:	3730      	adds	r7, #48	@ 0x30
 8045172:	46bd      	mov	sp, r7
 8045174:	bd80      	pop	{r7, pc}

08045176 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8045176:	b580      	push	{r7, lr}
 8045178:	b084      	sub	sp, #16
 804517a:	af00      	add	r7, sp, #0
 804517c:	60f8      	str	r0, [r7, #12]
 804517e:	60b9      	str	r1, [r7, #8]
 8045180:	607a      	str	r2, [r7, #4]
 8045182:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8045184:	68bb      	ldr	r3, [r7, #8]
 8045186:	2b00      	cmp	r3, #0
 8045188:	d103      	bne.n	8045192 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 804518a:	69bb      	ldr	r3, [r7, #24]
 804518c:	69ba      	ldr	r2, [r7, #24]
 804518e:	601a      	str	r2, [r3, #0]
 8045190:	e002      	b.n	8045198 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8045192:	69bb      	ldr	r3, [r7, #24]
 8045194:	687a      	ldr	r2, [r7, #4]
 8045196:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8045198:	69bb      	ldr	r3, [r7, #24]
 804519a:	68fa      	ldr	r2, [r7, #12]
 804519c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 804519e:	69bb      	ldr	r3, [r7, #24]
 80451a0:	68ba      	ldr	r2, [r7, #8]
 80451a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80451a4:	2101      	movs	r1, #1
 80451a6:	69b8      	ldr	r0, [r7, #24]
 80451a8:	f7ff fefe 	bl	8044fa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80451ac:	69bb      	ldr	r3, [r7, #24]
 80451ae:	78fa      	ldrb	r2, [r7, #3]
 80451b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80451b4:	bf00      	nop
 80451b6:	3710      	adds	r7, #16
 80451b8:	46bd      	mov	sp, r7
 80451ba:	bd80      	pop	{r7, pc}

080451bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80451bc:	b580      	push	{r7, lr}
 80451be:	b08e      	sub	sp, #56	@ 0x38
 80451c0:	af00      	add	r7, sp, #0
 80451c2:	60f8      	str	r0, [r7, #12]
 80451c4:	60b9      	str	r1, [r7, #8]
 80451c6:	607a      	str	r2, [r7, #4]
 80451c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80451ca:	2300      	movs	r3, #0
 80451cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80451ce:	68fb      	ldr	r3, [r7, #12]
 80451d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80451d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80451d4:	2b00      	cmp	r3, #0
 80451d6:	d10b      	bne.n	80451f0 <xQueueGenericSend+0x34>
	__asm volatile
 80451d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80451dc:	f383 8811 	msr	BASEPRI, r3
 80451e0:	f3bf 8f6f 	isb	sy
 80451e4:	f3bf 8f4f 	dsb	sy
 80451e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80451ea:	bf00      	nop
 80451ec:	bf00      	nop
 80451ee:	e7fd      	b.n	80451ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80451f0:	68bb      	ldr	r3, [r7, #8]
 80451f2:	2b00      	cmp	r3, #0
 80451f4:	d103      	bne.n	80451fe <xQueueGenericSend+0x42>
 80451f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80451f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80451fa:	2b00      	cmp	r3, #0
 80451fc:	d101      	bne.n	8045202 <xQueueGenericSend+0x46>
 80451fe:	2301      	movs	r3, #1
 8045200:	e000      	b.n	8045204 <xQueueGenericSend+0x48>
 8045202:	2300      	movs	r3, #0
 8045204:	2b00      	cmp	r3, #0
 8045206:	d10b      	bne.n	8045220 <xQueueGenericSend+0x64>
	__asm volatile
 8045208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804520c:	f383 8811 	msr	BASEPRI, r3
 8045210:	f3bf 8f6f 	isb	sy
 8045214:	f3bf 8f4f 	dsb	sy
 8045218:	627b      	str	r3, [r7, #36]	@ 0x24
}
 804521a:	bf00      	nop
 804521c:	bf00      	nop
 804521e:	e7fd      	b.n	804521c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8045220:	683b      	ldr	r3, [r7, #0]
 8045222:	2b02      	cmp	r3, #2
 8045224:	d103      	bne.n	804522e <xQueueGenericSend+0x72>
 8045226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804522a:	2b01      	cmp	r3, #1
 804522c:	d101      	bne.n	8045232 <xQueueGenericSend+0x76>
 804522e:	2301      	movs	r3, #1
 8045230:	e000      	b.n	8045234 <xQueueGenericSend+0x78>
 8045232:	2300      	movs	r3, #0
 8045234:	2b00      	cmp	r3, #0
 8045236:	d10b      	bne.n	8045250 <xQueueGenericSend+0x94>
	__asm volatile
 8045238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804523c:	f383 8811 	msr	BASEPRI, r3
 8045240:	f3bf 8f6f 	isb	sy
 8045244:	f3bf 8f4f 	dsb	sy
 8045248:	623b      	str	r3, [r7, #32]
}
 804524a:	bf00      	nop
 804524c:	bf00      	nop
 804524e:	e7fd      	b.n	804524c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8045250:	f001 f9ce 	bl	80465f0 <xTaskGetSchedulerState>
 8045254:	4603      	mov	r3, r0
 8045256:	2b00      	cmp	r3, #0
 8045258:	d102      	bne.n	8045260 <xQueueGenericSend+0xa4>
 804525a:	687b      	ldr	r3, [r7, #4]
 804525c:	2b00      	cmp	r3, #0
 804525e:	d101      	bne.n	8045264 <xQueueGenericSend+0xa8>
 8045260:	2301      	movs	r3, #1
 8045262:	e000      	b.n	8045266 <xQueueGenericSend+0xaa>
 8045264:	2300      	movs	r3, #0
 8045266:	2b00      	cmp	r3, #0
 8045268:	d10b      	bne.n	8045282 <xQueueGenericSend+0xc6>
	__asm volatile
 804526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804526e:	f383 8811 	msr	BASEPRI, r3
 8045272:	f3bf 8f6f 	isb	sy
 8045276:	f3bf 8f4f 	dsb	sy
 804527a:	61fb      	str	r3, [r7, #28]
}
 804527c:	bf00      	nop
 804527e:	bf00      	nop
 8045280:	e7fd      	b.n	804527e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8045282:	f001 ff21 	bl	80470c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8045286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804528c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804528e:	429a      	cmp	r2, r3
 8045290:	d302      	bcc.n	8045298 <xQueueGenericSend+0xdc>
 8045292:	683b      	ldr	r3, [r7, #0]
 8045294:	2b02      	cmp	r3, #2
 8045296:	d129      	bne.n	80452ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8045298:	683a      	ldr	r2, [r7, #0]
 804529a:	68b9      	ldr	r1, [r7, #8]
 804529c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 804529e:	f000 fa0f 	bl	80456c0 <prvCopyDataToQueue>
 80452a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80452a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80452a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80452a8:	2b00      	cmp	r3, #0
 80452aa:	d010      	beq.n	80452ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80452ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80452ae:	3324      	adds	r3, #36	@ 0x24
 80452b0:	4618      	mov	r0, r3
 80452b2:	f000 ffdd 	bl	8046270 <xTaskRemoveFromEventList>
 80452b6:	4603      	mov	r3, r0
 80452b8:	2b00      	cmp	r3, #0
 80452ba:	d013      	beq.n	80452e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80452bc:	4b3f      	ldr	r3, [pc, #252]	@ (80453bc <xQueueGenericSend+0x200>)
 80452be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80452c2:	601a      	str	r2, [r3, #0]
 80452c4:	f3bf 8f4f 	dsb	sy
 80452c8:	f3bf 8f6f 	isb	sy
 80452cc:	e00a      	b.n	80452e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80452ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80452d0:	2b00      	cmp	r3, #0
 80452d2:	d007      	beq.n	80452e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80452d4:	4b39      	ldr	r3, [pc, #228]	@ (80453bc <xQueueGenericSend+0x200>)
 80452d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80452da:	601a      	str	r2, [r3, #0]
 80452dc:	f3bf 8f4f 	dsb	sy
 80452e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80452e4:	f001 ff22 	bl	804712c <vPortExitCritical>
				return pdPASS;
 80452e8:	2301      	movs	r3, #1
 80452ea:	e063      	b.n	80453b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80452ec:	687b      	ldr	r3, [r7, #4]
 80452ee:	2b00      	cmp	r3, #0
 80452f0:	d103      	bne.n	80452fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80452f2:	f001 ff1b 	bl	804712c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80452f6:	2300      	movs	r3, #0
 80452f8:	e05c      	b.n	80453b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80452fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80452fc:	2b00      	cmp	r3, #0
 80452fe:	d106      	bne.n	804530e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8045300:	f107 0314 	add.w	r3, r7, #20
 8045304:	4618      	mov	r0, r3
 8045306:	f001 f817 	bl	8046338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 804530a:	2301      	movs	r3, #1
 804530c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 804530e:	f001 ff0d 	bl	804712c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8045312:	f000 fd87 	bl	8045e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8045316:	f001 fed7 	bl	80470c8 <vPortEnterCritical>
 804531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804531c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8045320:	b25b      	sxtb	r3, r3
 8045322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045326:	d103      	bne.n	8045330 <xQueueGenericSend+0x174>
 8045328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804532a:	2200      	movs	r2, #0
 804532c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8045330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8045336:	b25b      	sxtb	r3, r3
 8045338:	f1b3 3fff 	cmp.w	r3, #4294967295
 804533c:	d103      	bne.n	8045346 <xQueueGenericSend+0x18a>
 804533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045340:	2200      	movs	r2, #0
 8045342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8045346:	f001 fef1 	bl	804712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 804534a:	1d3a      	adds	r2, r7, #4
 804534c:	f107 0314 	add.w	r3, r7, #20
 8045350:	4611      	mov	r1, r2
 8045352:	4618      	mov	r0, r3
 8045354:	f001 f806 	bl	8046364 <xTaskCheckForTimeOut>
 8045358:	4603      	mov	r3, r0
 804535a:	2b00      	cmp	r3, #0
 804535c:	d124      	bne.n	80453a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 804535e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8045360:	f000 faa6 	bl	80458b0 <prvIsQueueFull>
 8045364:	4603      	mov	r3, r0
 8045366:	2b00      	cmp	r3, #0
 8045368:	d018      	beq.n	804539c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 804536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804536c:	3310      	adds	r3, #16
 804536e:	687a      	ldr	r2, [r7, #4]
 8045370:	4611      	mov	r1, r2
 8045372:	4618      	mov	r0, r3
 8045374:	f000 ff2a 	bl	80461cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8045378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 804537a:	f000 fa31 	bl	80457e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 804537e:	f000 fd5f 	bl	8045e40 <xTaskResumeAll>
 8045382:	4603      	mov	r3, r0
 8045384:	2b00      	cmp	r3, #0
 8045386:	f47f af7c 	bne.w	8045282 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 804538a:	4b0c      	ldr	r3, [pc, #48]	@ (80453bc <xQueueGenericSend+0x200>)
 804538c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8045390:	601a      	str	r2, [r3, #0]
 8045392:	f3bf 8f4f 	dsb	sy
 8045396:	f3bf 8f6f 	isb	sy
 804539a:	e772      	b.n	8045282 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 804539c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 804539e:	f000 fa1f 	bl	80457e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80453a2:	f000 fd4d 	bl	8045e40 <xTaskResumeAll>
 80453a6:	e76c      	b.n	8045282 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80453a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80453aa:	f000 fa19 	bl	80457e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80453ae:	f000 fd47 	bl	8045e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80453b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80453b4:	4618      	mov	r0, r3
 80453b6:	3738      	adds	r7, #56	@ 0x38
 80453b8:	46bd      	mov	sp, r7
 80453ba:	bd80      	pop	{r7, pc}
 80453bc:	e000ed04 	.word	0xe000ed04

080453c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80453c0:	b580      	push	{r7, lr}
 80453c2:	b090      	sub	sp, #64	@ 0x40
 80453c4:	af00      	add	r7, sp, #0
 80453c6:	60f8      	str	r0, [r7, #12]
 80453c8:	60b9      	str	r1, [r7, #8]
 80453ca:	607a      	str	r2, [r7, #4]
 80453cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80453ce:	68fb      	ldr	r3, [r7, #12]
 80453d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80453d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80453d4:	2b00      	cmp	r3, #0
 80453d6:	d10b      	bne.n	80453f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80453d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80453dc:	f383 8811 	msr	BASEPRI, r3
 80453e0:	f3bf 8f6f 	isb	sy
 80453e4:	f3bf 8f4f 	dsb	sy
 80453e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80453ea:	bf00      	nop
 80453ec:	bf00      	nop
 80453ee:	e7fd      	b.n	80453ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80453f0:	68bb      	ldr	r3, [r7, #8]
 80453f2:	2b00      	cmp	r3, #0
 80453f4:	d103      	bne.n	80453fe <xQueueGenericSendFromISR+0x3e>
 80453f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80453f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80453fa:	2b00      	cmp	r3, #0
 80453fc:	d101      	bne.n	8045402 <xQueueGenericSendFromISR+0x42>
 80453fe:	2301      	movs	r3, #1
 8045400:	e000      	b.n	8045404 <xQueueGenericSendFromISR+0x44>
 8045402:	2300      	movs	r3, #0
 8045404:	2b00      	cmp	r3, #0
 8045406:	d10b      	bne.n	8045420 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8045408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804540c:	f383 8811 	msr	BASEPRI, r3
 8045410:	f3bf 8f6f 	isb	sy
 8045414:	f3bf 8f4f 	dsb	sy
 8045418:	627b      	str	r3, [r7, #36]	@ 0x24
}
 804541a:	bf00      	nop
 804541c:	bf00      	nop
 804541e:	e7fd      	b.n	804541c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8045420:	683b      	ldr	r3, [r7, #0]
 8045422:	2b02      	cmp	r3, #2
 8045424:	d103      	bne.n	804542e <xQueueGenericSendFromISR+0x6e>
 8045426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804542a:	2b01      	cmp	r3, #1
 804542c:	d101      	bne.n	8045432 <xQueueGenericSendFromISR+0x72>
 804542e:	2301      	movs	r3, #1
 8045430:	e000      	b.n	8045434 <xQueueGenericSendFromISR+0x74>
 8045432:	2300      	movs	r3, #0
 8045434:	2b00      	cmp	r3, #0
 8045436:	d10b      	bne.n	8045450 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8045438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804543c:	f383 8811 	msr	BASEPRI, r3
 8045440:	f3bf 8f6f 	isb	sy
 8045444:	f3bf 8f4f 	dsb	sy
 8045448:	623b      	str	r3, [r7, #32]
}
 804544a:	bf00      	nop
 804544c:	bf00      	nop
 804544e:	e7fd      	b.n	804544c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8045450:	f001 ff1a 	bl	8047288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8045454:	f3ef 8211 	mrs	r2, BASEPRI
 8045458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804545c:	f383 8811 	msr	BASEPRI, r3
 8045460:	f3bf 8f6f 	isb	sy
 8045464:	f3bf 8f4f 	dsb	sy
 8045468:	61fa      	str	r2, [r7, #28]
 804546a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 804546c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 804546e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8045470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8045474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8045478:	429a      	cmp	r2, r3
 804547a:	d302      	bcc.n	8045482 <xQueueGenericSendFromISR+0xc2>
 804547c:	683b      	ldr	r3, [r7, #0]
 804547e:	2b02      	cmp	r3, #2
 8045480:	d12f      	bne.n	80454e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8045482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8045488:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 804548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045490:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8045492:	683a      	ldr	r2, [r7, #0]
 8045494:	68b9      	ldr	r1, [r7, #8]
 8045496:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8045498:	f000 f912 	bl	80456c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 804549c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80454a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80454a4:	d112      	bne.n	80454cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80454a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80454a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80454aa:	2b00      	cmp	r3, #0
 80454ac:	d016      	beq.n	80454dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80454ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80454b0:	3324      	adds	r3, #36	@ 0x24
 80454b2:	4618      	mov	r0, r3
 80454b4:	f000 fedc 	bl	8046270 <xTaskRemoveFromEventList>
 80454b8:	4603      	mov	r3, r0
 80454ba:	2b00      	cmp	r3, #0
 80454bc:	d00e      	beq.n	80454dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80454be:	687b      	ldr	r3, [r7, #4]
 80454c0:	2b00      	cmp	r3, #0
 80454c2:	d00b      	beq.n	80454dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80454c4:	687b      	ldr	r3, [r7, #4]
 80454c6:	2201      	movs	r2, #1
 80454c8:	601a      	str	r2, [r3, #0]
 80454ca:	e007      	b.n	80454dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80454cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80454d0:	3301      	adds	r3, #1
 80454d2:	b2db      	uxtb	r3, r3
 80454d4:	b25a      	sxtb	r2, r3
 80454d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80454d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80454dc:	2301      	movs	r3, #1
 80454de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80454e0:	e001      	b.n	80454e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80454e2:	2300      	movs	r3, #0
 80454e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80454e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80454e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80454ea:	697b      	ldr	r3, [r7, #20]
 80454ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80454f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80454f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80454f4:	4618      	mov	r0, r3
 80454f6:	3740      	adds	r7, #64	@ 0x40
 80454f8:	46bd      	mov	sp, r7
 80454fa:	bd80      	pop	{r7, pc}

080454fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80454fc:	b580      	push	{r7, lr}
 80454fe:	b08c      	sub	sp, #48	@ 0x30
 8045500:	af00      	add	r7, sp, #0
 8045502:	60f8      	str	r0, [r7, #12]
 8045504:	60b9      	str	r1, [r7, #8]
 8045506:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8045508:	2300      	movs	r3, #0
 804550a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 804550c:	68fb      	ldr	r3, [r7, #12]
 804550e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8045510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045512:	2b00      	cmp	r3, #0
 8045514:	d10b      	bne.n	804552e <xQueueReceive+0x32>
	__asm volatile
 8045516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804551a:	f383 8811 	msr	BASEPRI, r3
 804551e:	f3bf 8f6f 	isb	sy
 8045522:	f3bf 8f4f 	dsb	sy
 8045526:	623b      	str	r3, [r7, #32]
}
 8045528:	bf00      	nop
 804552a:	bf00      	nop
 804552c:	e7fd      	b.n	804552a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 804552e:	68bb      	ldr	r3, [r7, #8]
 8045530:	2b00      	cmp	r3, #0
 8045532:	d103      	bne.n	804553c <xQueueReceive+0x40>
 8045534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045538:	2b00      	cmp	r3, #0
 804553a:	d101      	bne.n	8045540 <xQueueReceive+0x44>
 804553c:	2301      	movs	r3, #1
 804553e:	e000      	b.n	8045542 <xQueueReceive+0x46>
 8045540:	2300      	movs	r3, #0
 8045542:	2b00      	cmp	r3, #0
 8045544:	d10b      	bne.n	804555e <xQueueReceive+0x62>
	__asm volatile
 8045546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804554a:	f383 8811 	msr	BASEPRI, r3
 804554e:	f3bf 8f6f 	isb	sy
 8045552:	f3bf 8f4f 	dsb	sy
 8045556:	61fb      	str	r3, [r7, #28]
}
 8045558:	bf00      	nop
 804555a:	bf00      	nop
 804555c:	e7fd      	b.n	804555a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 804555e:	f001 f847 	bl	80465f0 <xTaskGetSchedulerState>
 8045562:	4603      	mov	r3, r0
 8045564:	2b00      	cmp	r3, #0
 8045566:	d102      	bne.n	804556e <xQueueReceive+0x72>
 8045568:	687b      	ldr	r3, [r7, #4]
 804556a:	2b00      	cmp	r3, #0
 804556c:	d101      	bne.n	8045572 <xQueueReceive+0x76>
 804556e:	2301      	movs	r3, #1
 8045570:	e000      	b.n	8045574 <xQueueReceive+0x78>
 8045572:	2300      	movs	r3, #0
 8045574:	2b00      	cmp	r3, #0
 8045576:	d10b      	bne.n	8045590 <xQueueReceive+0x94>
	__asm volatile
 8045578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804557c:	f383 8811 	msr	BASEPRI, r3
 8045580:	f3bf 8f6f 	isb	sy
 8045584:	f3bf 8f4f 	dsb	sy
 8045588:	61bb      	str	r3, [r7, #24]
}
 804558a:	bf00      	nop
 804558c:	bf00      	nop
 804558e:	e7fd      	b.n	804558c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8045590:	f001 fd9a 	bl	80470c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8045594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045598:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 804559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804559c:	2b00      	cmp	r3, #0
 804559e:	d01f      	beq.n	80455e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80455a0:	68b9      	ldr	r1, [r7, #8]
 80455a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80455a4:	f000 f8f6 	bl	8045794 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80455a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80455aa:	1e5a      	subs	r2, r3, #1
 80455ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80455ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80455b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80455b2:	691b      	ldr	r3, [r3, #16]
 80455b4:	2b00      	cmp	r3, #0
 80455b6:	d00f      	beq.n	80455d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80455b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80455ba:	3310      	adds	r3, #16
 80455bc:	4618      	mov	r0, r3
 80455be:	f000 fe57 	bl	8046270 <xTaskRemoveFromEventList>
 80455c2:	4603      	mov	r3, r0
 80455c4:	2b00      	cmp	r3, #0
 80455c6:	d007      	beq.n	80455d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80455c8:	4b3c      	ldr	r3, [pc, #240]	@ (80456bc <xQueueReceive+0x1c0>)
 80455ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80455ce:	601a      	str	r2, [r3, #0]
 80455d0:	f3bf 8f4f 	dsb	sy
 80455d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80455d8:	f001 fda8 	bl	804712c <vPortExitCritical>
				return pdPASS;
 80455dc:	2301      	movs	r3, #1
 80455de:	e069      	b.n	80456b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80455e0:	687b      	ldr	r3, [r7, #4]
 80455e2:	2b00      	cmp	r3, #0
 80455e4:	d103      	bne.n	80455ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80455e6:	f001 fda1 	bl	804712c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80455ea:	2300      	movs	r3, #0
 80455ec:	e062      	b.n	80456b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80455ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80455f0:	2b00      	cmp	r3, #0
 80455f2:	d106      	bne.n	8045602 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80455f4:	f107 0310 	add.w	r3, r7, #16
 80455f8:	4618      	mov	r0, r3
 80455fa:	f000 fe9d 	bl	8046338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80455fe:	2301      	movs	r3, #1
 8045600:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8045602:	f001 fd93 	bl	804712c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8045606:	f000 fc0d 	bl	8045e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 804560a:	f001 fd5d 	bl	80470c8 <vPortEnterCritical>
 804560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8045614:	b25b      	sxtb	r3, r3
 8045616:	f1b3 3fff 	cmp.w	r3, #4294967295
 804561a:	d103      	bne.n	8045624 <xQueueReceive+0x128>
 804561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804561e:	2200      	movs	r2, #0
 8045620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8045624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 804562a:	b25b      	sxtb	r3, r3
 804562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045630:	d103      	bne.n	804563a <xQueueReceive+0x13e>
 8045632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045634:	2200      	movs	r2, #0
 8045636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 804563a:	f001 fd77 	bl	804712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 804563e:	1d3a      	adds	r2, r7, #4
 8045640:	f107 0310 	add.w	r3, r7, #16
 8045644:	4611      	mov	r1, r2
 8045646:	4618      	mov	r0, r3
 8045648:	f000 fe8c 	bl	8046364 <xTaskCheckForTimeOut>
 804564c:	4603      	mov	r3, r0
 804564e:	2b00      	cmp	r3, #0
 8045650:	d123      	bne.n	804569a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8045652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8045654:	f000 f916 	bl	8045884 <prvIsQueueEmpty>
 8045658:	4603      	mov	r3, r0
 804565a:	2b00      	cmp	r3, #0
 804565c:	d017      	beq.n	804568e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 804565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045660:	3324      	adds	r3, #36	@ 0x24
 8045662:	687a      	ldr	r2, [r7, #4]
 8045664:	4611      	mov	r1, r2
 8045666:	4618      	mov	r0, r3
 8045668:	f000 fdb0 	bl	80461cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 804566c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 804566e:	f000 f8b7 	bl	80457e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8045672:	f000 fbe5 	bl	8045e40 <xTaskResumeAll>
 8045676:	4603      	mov	r3, r0
 8045678:	2b00      	cmp	r3, #0
 804567a:	d189      	bne.n	8045590 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 804567c:	4b0f      	ldr	r3, [pc, #60]	@ (80456bc <xQueueReceive+0x1c0>)
 804567e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8045682:	601a      	str	r2, [r3, #0]
 8045684:	f3bf 8f4f 	dsb	sy
 8045688:	f3bf 8f6f 	isb	sy
 804568c:	e780      	b.n	8045590 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 804568e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8045690:	f000 f8a6 	bl	80457e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8045694:	f000 fbd4 	bl	8045e40 <xTaskResumeAll>
 8045698:	e77a      	b.n	8045590 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 804569a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 804569c:	f000 f8a0 	bl	80457e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80456a0:	f000 fbce 	bl	8045e40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80456a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80456a6:	f000 f8ed 	bl	8045884 <prvIsQueueEmpty>
 80456aa:	4603      	mov	r3, r0
 80456ac:	2b00      	cmp	r3, #0
 80456ae:	f43f af6f 	beq.w	8045590 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80456b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80456b4:	4618      	mov	r0, r3
 80456b6:	3730      	adds	r7, #48	@ 0x30
 80456b8:	46bd      	mov	sp, r7
 80456ba:	bd80      	pop	{r7, pc}
 80456bc:	e000ed04 	.word	0xe000ed04

080456c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80456c0:	b580      	push	{r7, lr}
 80456c2:	b086      	sub	sp, #24
 80456c4:	af00      	add	r7, sp, #0
 80456c6:	60f8      	str	r0, [r7, #12]
 80456c8:	60b9      	str	r1, [r7, #8]
 80456ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80456cc:	2300      	movs	r3, #0
 80456ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80456d0:	68fb      	ldr	r3, [r7, #12]
 80456d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80456d6:	68fb      	ldr	r3, [r7, #12]
 80456d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80456da:	2b00      	cmp	r3, #0
 80456dc:	d10d      	bne.n	80456fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80456de:	68fb      	ldr	r3, [r7, #12]
 80456e0:	681b      	ldr	r3, [r3, #0]
 80456e2:	2b00      	cmp	r3, #0
 80456e4:	d14d      	bne.n	8045782 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80456e6:	68fb      	ldr	r3, [r7, #12]
 80456e8:	689b      	ldr	r3, [r3, #8]
 80456ea:	4618      	mov	r0, r3
 80456ec:	f000 ff9e 	bl	804662c <xTaskPriorityDisinherit>
 80456f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80456f2:	68fb      	ldr	r3, [r7, #12]
 80456f4:	2200      	movs	r2, #0
 80456f6:	609a      	str	r2, [r3, #8]
 80456f8:	e043      	b.n	8045782 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80456fa:	687b      	ldr	r3, [r7, #4]
 80456fc:	2b00      	cmp	r3, #0
 80456fe:	d119      	bne.n	8045734 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8045700:	68fb      	ldr	r3, [r7, #12]
 8045702:	6858      	ldr	r0, [r3, #4]
 8045704:	68fb      	ldr	r3, [r7, #12]
 8045706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045708:	461a      	mov	r2, r3
 804570a:	68b9      	ldr	r1, [r7, #8]
 804570c:	f002 f818 	bl	8047740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8045710:	68fb      	ldr	r3, [r7, #12]
 8045712:	685a      	ldr	r2, [r3, #4]
 8045714:	68fb      	ldr	r3, [r7, #12]
 8045716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045718:	441a      	add	r2, r3
 804571a:	68fb      	ldr	r3, [r7, #12]
 804571c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 804571e:	68fb      	ldr	r3, [r7, #12]
 8045720:	685a      	ldr	r2, [r3, #4]
 8045722:	68fb      	ldr	r3, [r7, #12]
 8045724:	689b      	ldr	r3, [r3, #8]
 8045726:	429a      	cmp	r2, r3
 8045728:	d32b      	bcc.n	8045782 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 804572a:	68fb      	ldr	r3, [r7, #12]
 804572c:	681a      	ldr	r2, [r3, #0]
 804572e:	68fb      	ldr	r3, [r7, #12]
 8045730:	605a      	str	r2, [r3, #4]
 8045732:	e026      	b.n	8045782 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8045734:	68fb      	ldr	r3, [r7, #12]
 8045736:	68d8      	ldr	r0, [r3, #12]
 8045738:	68fb      	ldr	r3, [r7, #12]
 804573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804573c:	461a      	mov	r2, r3
 804573e:	68b9      	ldr	r1, [r7, #8]
 8045740:	f001 fffe 	bl	8047740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8045744:	68fb      	ldr	r3, [r7, #12]
 8045746:	68da      	ldr	r2, [r3, #12]
 8045748:	68fb      	ldr	r3, [r7, #12]
 804574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804574c:	425b      	negs	r3, r3
 804574e:	441a      	add	r2, r3
 8045750:	68fb      	ldr	r3, [r7, #12]
 8045752:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8045754:	68fb      	ldr	r3, [r7, #12]
 8045756:	68da      	ldr	r2, [r3, #12]
 8045758:	68fb      	ldr	r3, [r7, #12]
 804575a:	681b      	ldr	r3, [r3, #0]
 804575c:	429a      	cmp	r2, r3
 804575e:	d207      	bcs.n	8045770 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8045760:	68fb      	ldr	r3, [r7, #12]
 8045762:	689a      	ldr	r2, [r3, #8]
 8045764:	68fb      	ldr	r3, [r7, #12]
 8045766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045768:	425b      	negs	r3, r3
 804576a:	441a      	add	r2, r3
 804576c:	68fb      	ldr	r3, [r7, #12]
 804576e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8045770:	687b      	ldr	r3, [r7, #4]
 8045772:	2b02      	cmp	r3, #2
 8045774:	d105      	bne.n	8045782 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8045776:	693b      	ldr	r3, [r7, #16]
 8045778:	2b00      	cmp	r3, #0
 804577a:	d002      	beq.n	8045782 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 804577c:	693b      	ldr	r3, [r7, #16]
 804577e:	3b01      	subs	r3, #1
 8045780:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8045782:	693b      	ldr	r3, [r7, #16]
 8045784:	1c5a      	adds	r2, r3, #1
 8045786:	68fb      	ldr	r3, [r7, #12]
 8045788:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 804578a:	697b      	ldr	r3, [r7, #20]
}
 804578c:	4618      	mov	r0, r3
 804578e:	3718      	adds	r7, #24
 8045790:	46bd      	mov	sp, r7
 8045792:	bd80      	pop	{r7, pc}

08045794 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8045794:	b580      	push	{r7, lr}
 8045796:	b082      	sub	sp, #8
 8045798:	af00      	add	r7, sp, #0
 804579a:	6078      	str	r0, [r7, #4]
 804579c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 804579e:	687b      	ldr	r3, [r7, #4]
 80457a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80457a2:	2b00      	cmp	r3, #0
 80457a4:	d018      	beq.n	80457d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80457a6:	687b      	ldr	r3, [r7, #4]
 80457a8:	68da      	ldr	r2, [r3, #12]
 80457aa:	687b      	ldr	r3, [r7, #4]
 80457ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80457ae:	441a      	add	r2, r3
 80457b0:	687b      	ldr	r3, [r7, #4]
 80457b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80457b4:	687b      	ldr	r3, [r7, #4]
 80457b6:	68da      	ldr	r2, [r3, #12]
 80457b8:	687b      	ldr	r3, [r7, #4]
 80457ba:	689b      	ldr	r3, [r3, #8]
 80457bc:	429a      	cmp	r2, r3
 80457be:	d303      	bcc.n	80457c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80457c0:	687b      	ldr	r3, [r7, #4]
 80457c2:	681a      	ldr	r2, [r3, #0]
 80457c4:	687b      	ldr	r3, [r7, #4]
 80457c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80457c8:	687b      	ldr	r3, [r7, #4]
 80457ca:	68d9      	ldr	r1, [r3, #12]
 80457cc:	687b      	ldr	r3, [r7, #4]
 80457ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80457d0:	461a      	mov	r2, r3
 80457d2:	6838      	ldr	r0, [r7, #0]
 80457d4:	f001 ffb4 	bl	8047740 <memcpy>
	}
}
 80457d8:	bf00      	nop
 80457da:	3708      	adds	r7, #8
 80457dc:	46bd      	mov	sp, r7
 80457de:	bd80      	pop	{r7, pc}

080457e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80457e0:	b580      	push	{r7, lr}
 80457e2:	b084      	sub	sp, #16
 80457e4:	af00      	add	r7, sp, #0
 80457e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80457e8:	f001 fc6e 	bl	80470c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80457ec:	687b      	ldr	r3, [r7, #4]
 80457ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80457f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80457f4:	e011      	b.n	804581a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80457f6:	687b      	ldr	r3, [r7, #4]
 80457f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80457fa:	2b00      	cmp	r3, #0
 80457fc:	d012      	beq.n	8045824 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80457fe:	687b      	ldr	r3, [r7, #4]
 8045800:	3324      	adds	r3, #36	@ 0x24
 8045802:	4618      	mov	r0, r3
 8045804:	f000 fd34 	bl	8046270 <xTaskRemoveFromEventList>
 8045808:	4603      	mov	r3, r0
 804580a:	2b00      	cmp	r3, #0
 804580c:	d001      	beq.n	8045812 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 804580e:	f000 fe0d 	bl	804642c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8045812:	7bfb      	ldrb	r3, [r7, #15]
 8045814:	3b01      	subs	r3, #1
 8045816:	b2db      	uxtb	r3, r3
 8045818:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 804581a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804581e:	2b00      	cmp	r3, #0
 8045820:	dce9      	bgt.n	80457f6 <prvUnlockQueue+0x16>
 8045822:	e000      	b.n	8045826 <prvUnlockQueue+0x46>
					break;
 8045824:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8045826:	687b      	ldr	r3, [r7, #4]
 8045828:	22ff      	movs	r2, #255	@ 0xff
 804582a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 804582e:	f001 fc7d 	bl	804712c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8045832:	f001 fc49 	bl	80470c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8045836:	687b      	ldr	r3, [r7, #4]
 8045838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 804583c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 804583e:	e011      	b.n	8045864 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8045840:	687b      	ldr	r3, [r7, #4]
 8045842:	691b      	ldr	r3, [r3, #16]
 8045844:	2b00      	cmp	r3, #0
 8045846:	d012      	beq.n	804586e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8045848:	687b      	ldr	r3, [r7, #4]
 804584a:	3310      	adds	r3, #16
 804584c:	4618      	mov	r0, r3
 804584e:	f000 fd0f 	bl	8046270 <xTaskRemoveFromEventList>
 8045852:	4603      	mov	r3, r0
 8045854:	2b00      	cmp	r3, #0
 8045856:	d001      	beq.n	804585c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8045858:	f000 fde8 	bl	804642c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 804585c:	7bbb      	ldrb	r3, [r7, #14]
 804585e:	3b01      	subs	r3, #1
 8045860:	b2db      	uxtb	r3, r3
 8045862:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8045864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8045868:	2b00      	cmp	r3, #0
 804586a:	dce9      	bgt.n	8045840 <prvUnlockQueue+0x60>
 804586c:	e000      	b.n	8045870 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 804586e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8045870:	687b      	ldr	r3, [r7, #4]
 8045872:	22ff      	movs	r2, #255	@ 0xff
 8045874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8045878:	f001 fc58 	bl	804712c <vPortExitCritical>
}
 804587c:	bf00      	nop
 804587e:	3710      	adds	r7, #16
 8045880:	46bd      	mov	sp, r7
 8045882:	bd80      	pop	{r7, pc}

08045884 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8045884:	b580      	push	{r7, lr}
 8045886:	b084      	sub	sp, #16
 8045888:	af00      	add	r7, sp, #0
 804588a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 804588c:	f001 fc1c 	bl	80470c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8045890:	687b      	ldr	r3, [r7, #4]
 8045892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045894:	2b00      	cmp	r3, #0
 8045896:	d102      	bne.n	804589e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8045898:	2301      	movs	r3, #1
 804589a:	60fb      	str	r3, [r7, #12]
 804589c:	e001      	b.n	80458a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 804589e:	2300      	movs	r3, #0
 80458a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80458a2:	f001 fc43 	bl	804712c <vPortExitCritical>

	return xReturn;
 80458a6:	68fb      	ldr	r3, [r7, #12]
}
 80458a8:	4618      	mov	r0, r3
 80458aa:	3710      	adds	r7, #16
 80458ac:	46bd      	mov	sp, r7
 80458ae:	bd80      	pop	{r7, pc}

080458b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80458b0:	b580      	push	{r7, lr}
 80458b2:	b084      	sub	sp, #16
 80458b4:	af00      	add	r7, sp, #0
 80458b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80458b8:	f001 fc06 	bl	80470c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80458bc:	687b      	ldr	r3, [r7, #4]
 80458be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80458c0:	687b      	ldr	r3, [r7, #4]
 80458c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80458c4:	429a      	cmp	r2, r3
 80458c6:	d102      	bne.n	80458ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80458c8:	2301      	movs	r3, #1
 80458ca:	60fb      	str	r3, [r7, #12]
 80458cc:	e001      	b.n	80458d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80458ce:	2300      	movs	r3, #0
 80458d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80458d2:	f001 fc2b 	bl	804712c <vPortExitCritical>

	return xReturn;
 80458d6:	68fb      	ldr	r3, [r7, #12]
}
 80458d8:	4618      	mov	r0, r3
 80458da:	3710      	adds	r7, #16
 80458dc:	46bd      	mov	sp, r7
 80458de:	bd80      	pop	{r7, pc}

080458e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80458e0:	b480      	push	{r7}
 80458e2:	b085      	sub	sp, #20
 80458e4:	af00      	add	r7, sp, #0
 80458e6:	6078      	str	r0, [r7, #4]
 80458e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80458ea:	2300      	movs	r3, #0
 80458ec:	60fb      	str	r3, [r7, #12]
 80458ee:	e014      	b.n	804591a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80458f0:	4a0f      	ldr	r2, [pc, #60]	@ (8045930 <vQueueAddToRegistry+0x50>)
 80458f2:	68fb      	ldr	r3, [r7, #12]
 80458f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80458f8:	2b00      	cmp	r3, #0
 80458fa:	d10b      	bne.n	8045914 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80458fc:	490c      	ldr	r1, [pc, #48]	@ (8045930 <vQueueAddToRegistry+0x50>)
 80458fe:	68fb      	ldr	r3, [r7, #12]
 8045900:	683a      	ldr	r2, [r7, #0]
 8045902:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8045906:	4a0a      	ldr	r2, [pc, #40]	@ (8045930 <vQueueAddToRegistry+0x50>)
 8045908:	68fb      	ldr	r3, [r7, #12]
 804590a:	00db      	lsls	r3, r3, #3
 804590c:	4413      	add	r3, r2
 804590e:	687a      	ldr	r2, [r7, #4]
 8045910:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8045912:	e006      	b.n	8045922 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8045914:	68fb      	ldr	r3, [r7, #12]
 8045916:	3301      	adds	r3, #1
 8045918:	60fb      	str	r3, [r7, #12]
 804591a:	68fb      	ldr	r3, [r7, #12]
 804591c:	2b07      	cmp	r3, #7
 804591e:	d9e7      	bls.n	80458f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8045920:	bf00      	nop
 8045922:	bf00      	nop
 8045924:	3714      	adds	r7, #20
 8045926:	46bd      	mov	sp, r7
 8045928:	f85d 7b04 	ldr.w	r7, [sp], #4
 804592c:	4770      	bx	lr
 804592e:	bf00      	nop
 8045930:	240007ec 	.word	0x240007ec

08045934 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8045934:	b580      	push	{r7, lr}
 8045936:	b086      	sub	sp, #24
 8045938:	af00      	add	r7, sp, #0
 804593a:	60f8      	str	r0, [r7, #12]
 804593c:	60b9      	str	r1, [r7, #8]
 804593e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8045940:	68fb      	ldr	r3, [r7, #12]
 8045942:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8045944:	f001 fbc0 	bl	80470c8 <vPortEnterCritical>
 8045948:	697b      	ldr	r3, [r7, #20]
 804594a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 804594e:	b25b      	sxtb	r3, r3
 8045950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045954:	d103      	bne.n	804595e <vQueueWaitForMessageRestricted+0x2a>
 8045956:	697b      	ldr	r3, [r7, #20]
 8045958:	2200      	movs	r2, #0
 804595a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 804595e:	697b      	ldr	r3, [r7, #20]
 8045960:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8045964:	b25b      	sxtb	r3, r3
 8045966:	f1b3 3fff 	cmp.w	r3, #4294967295
 804596a:	d103      	bne.n	8045974 <vQueueWaitForMessageRestricted+0x40>
 804596c:	697b      	ldr	r3, [r7, #20]
 804596e:	2200      	movs	r2, #0
 8045970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8045974:	f001 fbda 	bl	804712c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8045978:	697b      	ldr	r3, [r7, #20]
 804597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804597c:	2b00      	cmp	r3, #0
 804597e:	d106      	bne.n	804598e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8045980:	697b      	ldr	r3, [r7, #20]
 8045982:	3324      	adds	r3, #36	@ 0x24
 8045984:	687a      	ldr	r2, [r7, #4]
 8045986:	68b9      	ldr	r1, [r7, #8]
 8045988:	4618      	mov	r0, r3
 804598a:	f000 fc45 	bl	8046218 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 804598e:	6978      	ldr	r0, [r7, #20]
 8045990:	f7ff ff26 	bl	80457e0 <prvUnlockQueue>
	}
 8045994:	bf00      	nop
 8045996:	3718      	adds	r7, #24
 8045998:	46bd      	mov	sp, r7
 804599a:	bd80      	pop	{r7, pc}

0804599c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 804599c:	b580      	push	{r7, lr}
 804599e:	b08e      	sub	sp, #56	@ 0x38
 80459a0:	af04      	add	r7, sp, #16
 80459a2:	60f8      	str	r0, [r7, #12]
 80459a4:	60b9      	str	r1, [r7, #8]
 80459a6:	607a      	str	r2, [r7, #4]
 80459a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80459aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80459ac:	2b00      	cmp	r3, #0
 80459ae:	d10b      	bne.n	80459c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80459b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80459b4:	f383 8811 	msr	BASEPRI, r3
 80459b8:	f3bf 8f6f 	isb	sy
 80459bc:	f3bf 8f4f 	dsb	sy
 80459c0:	623b      	str	r3, [r7, #32]
}
 80459c2:	bf00      	nop
 80459c4:	bf00      	nop
 80459c6:	e7fd      	b.n	80459c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80459c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80459ca:	2b00      	cmp	r3, #0
 80459cc:	d10b      	bne.n	80459e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80459ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80459d2:	f383 8811 	msr	BASEPRI, r3
 80459d6:	f3bf 8f6f 	isb	sy
 80459da:	f3bf 8f4f 	dsb	sy
 80459de:	61fb      	str	r3, [r7, #28]
}
 80459e0:	bf00      	nop
 80459e2:	bf00      	nop
 80459e4:	e7fd      	b.n	80459e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80459e6:	235c      	movs	r3, #92	@ 0x5c
 80459e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80459ea:	693b      	ldr	r3, [r7, #16]
 80459ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80459ee:	d00b      	beq.n	8045a08 <xTaskCreateStatic+0x6c>
	__asm volatile
 80459f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80459f4:	f383 8811 	msr	BASEPRI, r3
 80459f8:	f3bf 8f6f 	isb	sy
 80459fc:	f3bf 8f4f 	dsb	sy
 8045a00:	61bb      	str	r3, [r7, #24]
}
 8045a02:	bf00      	nop
 8045a04:	bf00      	nop
 8045a06:	e7fd      	b.n	8045a04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8045a08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8045a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045a0c:	2b00      	cmp	r3, #0
 8045a0e:	d01e      	beq.n	8045a4e <xTaskCreateStatic+0xb2>
 8045a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8045a12:	2b00      	cmp	r3, #0
 8045a14:	d01b      	beq.n	8045a4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8045a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8045a18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8045a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8045a1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8045a1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8045a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8045a22:	2202      	movs	r2, #2
 8045a24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8045a28:	2300      	movs	r3, #0
 8045a2a:	9303      	str	r3, [sp, #12]
 8045a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8045a2e:	9302      	str	r3, [sp, #8]
 8045a30:	f107 0314 	add.w	r3, r7, #20
 8045a34:	9301      	str	r3, [sp, #4]
 8045a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045a38:	9300      	str	r3, [sp, #0]
 8045a3a:	683b      	ldr	r3, [r7, #0]
 8045a3c:	687a      	ldr	r2, [r7, #4]
 8045a3e:	68b9      	ldr	r1, [r7, #8]
 8045a40:	68f8      	ldr	r0, [r7, #12]
 8045a42:	f000 f850 	bl	8045ae6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8045a46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8045a48:	f000 f8de 	bl	8045c08 <prvAddNewTaskToReadyList>
 8045a4c:	e001      	b.n	8045a52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8045a4e:	2300      	movs	r3, #0
 8045a50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8045a52:	697b      	ldr	r3, [r7, #20]
	}
 8045a54:	4618      	mov	r0, r3
 8045a56:	3728      	adds	r7, #40	@ 0x28
 8045a58:	46bd      	mov	sp, r7
 8045a5a:	bd80      	pop	{r7, pc}

08045a5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8045a5c:	b580      	push	{r7, lr}
 8045a5e:	b08c      	sub	sp, #48	@ 0x30
 8045a60:	af04      	add	r7, sp, #16
 8045a62:	60f8      	str	r0, [r7, #12]
 8045a64:	60b9      	str	r1, [r7, #8]
 8045a66:	603b      	str	r3, [r7, #0]
 8045a68:	4613      	mov	r3, r2
 8045a6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8045a6c:	88fb      	ldrh	r3, [r7, #6]
 8045a6e:	009b      	lsls	r3, r3, #2
 8045a70:	4618      	mov	r0, r3
 8045a72:	f001 fc4b 	bl	804730c <pvPortMalloc>
 8045a76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8045a78:	697b      	ldr	r3, [r7, #20]
 8045a7a:	2b00      	cmp	r3, #0
 8045a7c:	d00e      	beq.n	8045a9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8045a7e:	205c      	movs	r0, #92	@ 0x5c
 8045a80:	f001 fc44 	bl	804730c <pvPortMalloc>
 8045a84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8045a86:	69fb      	ldr	r3, [r7, #28]
 8045a88:	2b00      	cmp	r3, #0
 8045a8a:	d003      	beq.n	8045a94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8045a8c:	69fb      	ldr	r3, [r7, #28]
 8045a8e:	697a      	ldr	r2, [r7, #20]
 8045a90:	631a      	str	r2, [r3, #48]	@ 0x30
 8045a92:	e005      	b.n	8045aa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8045a94:	6978      	ldr	r0, [r7, #20]
 8045a96:	f001 fd07 	bl	80474a8 <vPortFree>
 8045a9a:	e001      	b.n	8045aa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8045a9c:	2300      	movs	r3, #0
 8045a9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8045aa0:	69fb      	ldr	r3, [r7, #28]
 8045aa2:	2b00      	cmp	r3, #0
 8045aa4:	d017      	beq.n	8045ad6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8045aa6:	69fb      	ldr	r3, [r7, #28]
 8045aa8:	2200      	movs	r2, #0
 8045aaa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8045aae:	88fa      	ldrh	r2, [r7, #6]
 8045ab0:	2300      	movs	r3, #0
 8045ab2:	9303      	str	r3, [sp, #12]
 8045ab4:	69fb      	ldr	r3, [r7, #28]
 8045ab6:	9302      	str	r3, [sp, #8]
 8045ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045aba:	9301      	str	r3, [sp, #4]
 8045abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045abe:	9300      	str	r3, [sp, #0]
 8045ac0:	683b      	ldr	r3, [r7, #0]
 8045ac2:	68b9      	ldr	r1, [r7, #8]
 8045ac4:	68f8      	ldr	r0, [r7, #12]
 8045ac6:	f000 f80e 	bl	8045ae6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8045aca:	69f8      	ldr	r0, [r7, #28]
 8045acc:	f000 f89c 	bl	8045c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8045ad0:	2301      	movs	r3, #1
 8045ad2:	61bb      	str	r3, [r7, #24]
 8045ad4:	e002      	b.n	8045adc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8045ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8045ada:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8045adc:	69bb      	ldr	r3, [r7, #24]
	}
 8045ade:	4618      	mov	r0, r3
 8045ae0:	3720      	adds	r7, #32
 8045ae2:	46bd      	mov	sp, r7
 8045ae4:	bd80      	pop	{r7, pc}

08045ae6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8045ae6:	b580      	push	{r7, lr}
 8045ae8:	b088      	sub	sp, #32
 8045aea:	af00      	add	r7, sp, #0
 8045aec:	60f8      	str	r0, [r7, #12]
 8045aee:	60b9      	str	r1, [r7, #8]
 8045af0:	607a      	str	r2, [r7, #4]
 8045af2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8045af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045af6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8045af8:	687b      	ldr	r3, [r7, #4]
 8045afa:	009b      	lsls	r3, r3, #2
 8045afc:	461a      	mov	r2, r3
 8045afe:	21a5      	movs	r1, #165	@ 0xa5
 8045b00:	f001 fdf2 	bl	80476e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8045b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8045b08:	6879      	ldr	r1, [r7, #4]
 8045b0a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8045b0e:	440b      	add	r3, r1
 8045b10:	009b      	lsls	r3, r3, #2
 8045b12:	4413      	add	r3, r2
 8045b14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8045b16:	69bb      	ldr	r3, [r7, #24]
 8045b18:	f023 0307 	bic.w	r3, r3, #7
 8045b1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8045b1e:	69bb      	ldr	r3, [r7, #24]
 8045b20:	f003 0307 	and.w	r3, r3, #7
 8045b24:	2b00      	cmp	r3, #0
 8045b26:	d00b      	beq.n	8045b40 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8045b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045b2c:	f383 8811 	msr	BASEPRI, r3
 8045b30:	f3bf 8f6f 	isb	sy
 8045b34:	f3bf 8f4f 	dsb	sy
 8045b38:	617b      	str	r3, [r7, #20]
}
 8045b3a:	bf00      	nop
 8045b3c:	bf00      	nop
 8045b3e:	e7fd      	b.n	8045b3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8045b40:	68bb      	ldr	r3, [r7, #8]
 8045b42:	2b00      	cmp	r3, #0
 8045b44:	d01f      	beq.n	8045b86 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8045b46:	2300      	movs	r3, #0
 8045b48:	61fb      	str	r3, [r7, #28]
 8045b4a:	e012      	b.n	8045b72 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8045b4c:	68ba      	ldr	r2, [r7, #8]
 8045b4e:	69fb      	ldr	r3, [r7, #28]
 8045b50:	4413      	add	r3, r2
 8045b52:	7819      	ldrb	r1, [r3, #0]
 8045b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8045b56:	69fb      	ldr	r3, [r7, #28]
 8045b58:	4413      	add	r3, r2
 8045b5a:	3334      	adds	r3, #52	@ 0x34
 8045b5c:	460a      	mov	r2, r1
 8045b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8045b60:	68ba      	ldr	r2, [r7, #8]
 8045b62:	69fb      	ldr	r3, [r7, #28]
 8045b64:	4413      	add	r3, r2
 8045b66:	781b      	ldrb	r3, [r3, #0]
 8045b68:	2b00      	cmp	r3, #0
 8045b6a:	d006      	beq.n	8045b7a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8045b6c:	69fb      	ldr	r3, [r7, #28]
 8045b6e:	3301      	adds	r3, #1
 8045b70:	61fb      	str	r3, [r7, #28]
 8045b72:	69fb      	ldr	r3, [r7, #28]
 8045b74:	2b0f      	cmp	r3, #15
 8045b76:	d9e9      	bls.n	8045b4c <prvInitialiseNewTask+0x66>
 8045b78:	e000      	b.n	8045b7c <prvInitialiseNewTask+0x96>
			{
				break;
 8045b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8045b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045b7e:	2200      	movs	r2, #0
 8045b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8045b84:	e003      	b.n	8045b8e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8045b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045b88:	2200      	movs	r2, #0
 8045b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8045b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045b90:	2b37      	cmp	r3, #55	@ 0x37
 8045b92:	d901      	bls.n	8045b98 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8045b94:	2337      	movs	r3, #55	@ 0x37
 8045b96:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8045b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8045b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8045b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8045ba2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8045ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045ba6:	2200      	movs	r2, #0
 8045ba8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8045baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bac:	3304      	adds	r3, #4
 8045bae:	4618      	mov	r0, r3
 8045bb0:	f7ff f966 	bl	8044e80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8045bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bb6:	3318      	adds	r3, #24
 8045bb8:	4618      	mov	r0, r3
 8045bba:	f7ff f961 	bl	8044e80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8045bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8045bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8045bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8045bc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8045bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8045bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8045bd2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8045bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bd6:	2200      	movs	r2, #0
 8045bd8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8045bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bdc:	2200      	movs	r2, #0
 8045bde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8045be2:	683a      	ldr	r2, [r7, #0]
 8045be4:	68f9      	ldr	r1, [r7, #12]
 8045be6:	69b8      	ldr	r0, [r7, #24]
 8045be8:	f001 f93e 	bl	8046e68 <pxPortInitialiseStack>
 8045bec:	4602      	mov	r2, r0
 8045bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8045bf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8045bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045bf4:	2b00      	cmp	r3, #0
 8045bf6:	d002      	beq.n	8045bfe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8045bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8045bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8045bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8045bfe:	bf00      	nop
 8045c00:	3720      	adds	r7, #32
 8045c02:	46bd      	mov	sp, r7
 8045c04:	bd80      	pop	{r7, pc}
	...

08045c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8045c08:	b580      	push	{r7, lr}
 8045c0a:	b082      	sub	sp, #8
 8045c0c:	af00      	add	r7, sp, #0
 8045c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8045c10:	f001 fa5a 	bl	80470c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8045c14:	4b2d      	ldr	r3, [pc, #180]	@ (8045ccc <prvAddNewTaskToReadyList+0xc4>)
 8045c16:	681b      	ldr	r3, [r3, #0]
 8045c18:	3301      	adds	r3, #1
 8045c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8045ccc <prvAddNewTaskToReadyList+0xc4>)
 8045c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8045c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8045cd0 <prvAddNewTaskToReadyList+0xc8>)
 8045c20:	681b      	ldr	r3, [r3, #0]
 8045c22:	2b00      	cmp	r3, #0
 8045c24:	d109      	bne.n	8045c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8045c26:	4a2a      	ldr	r2, [pc, #168]	@ (8045cd0 <prvAddNewTaskToReadyList+0xc8>)
 8045c28:	687b      	ldr	r3, [r7, #4]
 8045c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8045c2c:	4b27      	ldr	r3, [pc, #156]	@ (8045ccc <prvAddNewTaskToReadyList+0xc4>)
 8045c2e:	681b      	ldr	r3, [r3, #0]
 8045c30:	2b01      	cmp	r3, #1
 8045c32:	d110      	bne.n	8045c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8045c34:	f000 fc1e 	bl	8046474 <prvInitialiseTaskLists>
 8045c38:	e00d      	b.n	8045c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8045c3a:	4b26      	ldr	r3, [pc, #152]	@ (8045cd4 <prvAddNewTaskToReadyList+0xcc>)
 8045c3c:	681b      	ldr	r3, [r3, #0]
 8045c3e:	2b00      	cmp	r3, #0
 8045c40:	d109      	bne.n	8045c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8045c42:	4b23      	ldr	r3, [pc, #140]	@ (8045cd0 <prvAddNewTaskToReadyList+0xc8>)
 8045c44:	681b      	ldr	r3, [r3, #0]
 8045c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045c48:	687b      	ldr	r3, [r7, #4]
 8045c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c4c:	429a      	cmp	r2, r3
 8045c4e:	d802      	bhi.n	8045c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8045c50:	4a1f      	ldr	r2, [pc, #124]	@ (8045cd0 <prvAddNewTaskToReadyList+0xc8>)
 8045c52:	687b      	ldr	r3, [r7, #4]
 8045c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8045c56:	4b20      	ldr	r3, [pc, #128]	@ (8045cd8 <prvAddNewTaskToReadyList+0xd0>)
 8045c58:	681b      	ldr	r3, [r3, #0]
 8045c5a:	3301      	adds	r3, #1
 8045c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8045cd8 <prvAddNewTaskToReadyList+0xd0>)
 8045c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8045c60:	4b1d      	ldr	r3, [pc, #116]	@ (8045cd8 <prvAddNewTaskToReadyList+0xd0>)
 8045c62:	681a      	ldr	r2, [r3, #0]
 8045c64:	687b      	ldr	r3, [r7, #4]
 8045c66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8045c68:	687b      	ldr	r3, [r7, #4]
 8045c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8045cdc <prvAddNewTaskToReadyList+0xd4>)
 8045c6e:	681b      	ldr	r3, [r3, #0]
 8045c70:	429a      	cmp	r2, r3
 8045c72:	d903      	bls.n	8045c7c <prvAddNewTaskToReadyList+0x74>
 8045c74:	687b      	ldr	r3, [r7, #4]
 8045c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c78:	4a18      	ldr	r2, [pc, #96]	@ (8045cdc <prvAddNewTaskToReadyList+0xd4>)
 8045c7a:	6013      	str	r3, [r2, #0]
 8045c7c:	687b      	ldr	r3, [r7, #4]
 8045c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045c80:	4613      	mov	r3, r2
 8045c82:	009b      	lsls	r3, r3, #2
 8045c84:	4413      	add	r3, r2
 8045c86:	009b      	lsls	r3, r3, #2
 8045c88:	4a15      	ldr	r2, [pc, #84]	@ (8045ce0 <prvAddNewTaskToReadyList+0xd8>)
 8045c8a:	441a      	add	r2, r3
 8045c8c:	687b      	ldr	r3, [r7, #4]
 8045c8e:	3304      	adds	r3, #4
 8045c90:	4619      	mov	r1, r3
 8045c92:	4610      	mov	r0, r2
 8045c94:	f7ff f901 	bl	8044e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8045c98:	f001 fa48 	bl	804712c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8045c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8045cd4 <prvAddNewTaskToReadyList+0xcc>)
 8045c9e:	681b      	ldr	r3, [r3, #0]
 8045ca0:	2b00      	cmp	r3, #0
 8045ca2:	d00e      	beq.n	8045cc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8045ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8045cd0 <prvAddNewTaskToReadyList+0xc8>)
 8045ca6:	681b      	ldr	r3, [r3, #0]
 8045ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045caa:	687b      	ldr	r3, [r7, #4]
 8045cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045cae:	429a      	cmp	r2, r3
 8045cb0:	d207      	bcs.n	8045cc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8045cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8045ce4 <prvAddNewTaskToReadyList+0xdc>)
 8045cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8045cb8:	601a      	str	r2, [r3, #0]
 8045cba:	f3bf 8f4f 	dsb	sy
 8045cbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8045cc2:	bf00      	nop
 8045cc4:	3708      	adds	r7, #8
 8045cc6:	46bd      	mov	sp, r7
 8045cc8:	bd80      	pop	{r7, pc}
 8045cca:	bf00      	nop
 8045ccc:	24000d00 	.word	0x24000d00
 8045cd0:	2400082c 	.word	0x2400082c
 8045cd4:	24000d0c 	.word	0x24000d0c
 8045cd8:	24000d1c 	.word	0x24000d1c
 8045cdc:	24000d08 	.word	0x24000d08
 8045ce0:	24000830 	.word	0x24000830
 8045ce4:	e000ed04 	.word	0xe000ed04

08045ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8045ce8:	b580      	push	{r7, lr}
 8045cea:	b084      	sub	sp, #16
 8045cec:	af00      	add	r7, sp, #0
 8045cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8045cf0:	2300      	movs	r3, #0
 8045cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8045cf4:	687b      	ldr	r3, [r7, #4]
 8045cf6:	2b00      	cmp	r3, #0
 8045cf8:	d018      	beq.n	8045d2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8045cfa:	4b14      	ldr	r3, [pc, #80]	@ (8045d4c <vTaskDelay+0x64>)
 8045cfc:	681b      	ldr	r3, [r3, #0]
 8045cfe:	2b00      	cmp	r3, #0
 8045d00:	d00b      	beq.n	8045d1a <vTaskDelay+0x32>
	__asm volatile
 8045d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045d06:	f383 8811 	msr	BASEPRI, r3
 8045d0a:	f3bf 8f6f 	isb	sy
 8045d0e:	f3bf 8f4f 	dsb	sy
 8045d12:	60bb      	str	r3, [r7, #8]
}
 8045d14:	bf00      	nop
 8045d16:	bf00      	nop
 8045d18:	e7fd      	b.n	8045d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8045d1a:	f000 f883 	bl	8045e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8045d1e:	2100      	movs	r1, #0
 8045d20:	6878      	ldr	r0, [r7, #4]
 8045d22:	f000 fcf3 	bl	804670c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8045d26:	f000 f88b 	bl	8045e40 <xTaskResumeAll>
 8045d2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8045d2c:	68fb      	ldr	r3, [r7, #12]
 8045d2e:	2b00      	cmp	r3, #0
 8045d30:	d107      	bne.n	8045d42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8045d32:	4b07      	ldr	r3, [pc, #28]	@ (8045d50 <vTaskDelay+0x68>)
 8045d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8045d38:	601a      	str	r2, [r3, #0]
 8045d3a:	f3bf 8f4f 	dsb	sy
 8045d3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8045d42:	bf00      	nop
 8045d44:	3710      	adds	r7, #16
 8045d46:	46bd      	mov	sp, r7
 8045d48:	bd80      	pop	{r7, pc}
 8045d4a:	bf00      	nop
 8045d4c:	24000d28 	.word	0x24000d28
 8045d50:	e000ed04 	.word	0xe000ed04

08045d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8045d54:	b580      	push	{r7, lr}
 8045d56:	b08a      	sub	sp, #40	@ 0x28
 8045d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8045d5a:	2300      	movs	r3, #0
 8045d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8045d5e:	2300      	movs	r3, #0
 8045d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8045d62:	463a      	mov	r2, r7
 8045d64:	1d39      	adds	r1, r7, #4
 8045d66:	f107 0308 	add.w	r3, r7, #8
 8045d6a:	4618      	mov	r0, r3
 8045d6c:	f7ff f834 	bl	8044dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8045d70:	6839      	ldr	r1, [r7, #0]
 8045d72:	687b      	ldr	r3, [r7, #4]
 8045d74:	68ba      	ldr	r2, [r7, #8]
 8045d76:	9202      	str	r2, [sp, #8]
 8045d78:	9301      	str	r3, [sp, #4]
 8045d7a:	2300      	movs	r3, #0
 8045d7c:	9300      	str	r3, [sp, #0]
 8045d7e:	2300      	movs	r3, #0
 8045d80:	460a      	mov	r2, r1
 8045d82:	4922      	ldr	r1, [pc, #136]	@ (8045e0c <vTaskStartScheduler+0xb8>)
 8045d84:	4822      	ldr	r0, [pc, #136]	@ (8045e10 <vTaskStartScheduler+0xbc>)
 8045d86:	f7ff fe09 	bl	804599c <xTaskCreateStatic>
 8045d8a:	4603      	mov	r3, r0
 8045d8c:	4a21      	ldr	r2, [pc, #132]	@ (8045e14 <vTaskStartScheduler+0xc0>)
 8045d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8045d90:	4b20      	ldr	r3, [pc, #128]	@ (8045e14 <vTaskStartScheduler+0xc0>)
 8045d92:	681b      	ldr	r3, [r3, #0]
 8045d94:	2b00      	cmp	r3, #0
 8045d96:	d002      	beq.n	8045d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8045d98:	2301      	movs	r3, #1
 8045d9a:	617b      	str	r3, [r7, #20]
 8045d9c:	e001      	b.n	8045da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8045d9e:	2300      	movs	r3, #0
 8045da0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8045da2:	697b      	ldr	r3, [r7, #20]
 8045da4:	2b01      	cmp	r3, #1
 8045da6:	d102      	bne.n	8045dae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8045da8:	f000 fd04 	bl	80467b4 <xTimerCreateTimerTask>
 8045dac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8045dae:	697b      	ldr	r3, [r7, #20]
 8045db0:	2b01      	cmp	r3, #1
 8045db2:	d116      	bne.n	8045de2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8045db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045db8:	f383 8811 	msr	BASEPRI, r3
 8045dbc:	f3bf 8f6f 	isb	sy
 8045dc0:	f3bf 8f4f 	dsb	sy
 8045dc4:	613b      	str	r3, [r7, #16]
}
 8045dc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8045dc8:	4b13      	ldr	r3, [pc, #76]	@ (8045e18 <vTaskStartScheduler+0xc4>)
 8045dca:	f04f 32ff 	mov.w	r2, #4294967295
 8045dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8045dd0:	4b12      	ldr	r3, [pc, #72]	@ (8045e1c <vTaskStartScheduler+0xc8>)
 8045dd2:	2201      	movs	r2, #1
 8045dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8045dd6:	4b12      	ldr	r3, [pc, #72]	@ (8045e20 <vTaskStartScheduler+0xcc>)
 8045dd8:	2200      	movs	r2, #0
 8045dda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8045ddc:	f001 f8d0 	bl	8046f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8045de0:	e00f      	b.n	8045e02 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8045de2:	697b      	ldr	r3, [r7, #20]
 8045de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045de8:	d10b      	bne.n	8045e02 <vTaskStartScheduler+0xae>
	__asm volatile
 8045dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045dee:	f383 8811 	msr	BASEPRI, r3
 8045df2:	f3bf 8f6f 	isb	sy
 8045df6:	f3bf 8f4f 	dsb	sy
 8045dfa:	60fb      	str	r3, [r7, #12]
}
 8045dfc:	bf00      	nop
 8045dfe:	bf00      	nop
 8045e00:	e7fd      	b.n	8045dfe <vTaskStartScheduler+0xaa>
}
 8045e02:	bf00      	nop
 8045e04:	3718      	adds	r7, #24
 8045e06:	46bd      	mov	sp, r7
 8045e08:	bd80      	pop	{r7, pc}
 8045e0a:	bf00      	nop
 8045e0c:	080477d4 	.word	0x080477d4
 8045e10:	08046445 	.word	0x08046445
 8045e14:	24000d24 	.word	0x24000d24
 8045e18:	24000d20 	.word	0x24000d20
 8045e1c:	24000d0c 	.word	0x24000d0c
 8045e20:	24000d04 	.word	0x24000d04

08045e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8045e24:	b480      	push	{r7}
 8045e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8045e28:	4b04      	ldr	r3, [pc, #16]	@ (8045e3c <vTaskSuspendAll+0x18>)
 8045e2a:	681b      	ldr	r3, [r3, #0]
 8045e2c:	3301      	adds	r3, #1
 8045e2e:	4a03      	ldr	r2, [pc, #12]	@ (8045e3c <vTaskSuspendAll+0x18>)
 8045e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8045e32:	bf00      	nop
 8045e34:	46bd      	mov	sp, r7
 8045e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e3a:	4770      	bx	lr
 8045e3c:	24000d28 	.word	0x24000d28

08045e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8045e40:	b580      	push	{r7, lr}
 8045e42:	b084      	sub	sp, #16
 8045e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8045e46:	2300      	movs	r3, #0
 8045e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8045e4a:	2300      	movs	r3, #0
 8045e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8045e4e:	4b42      	ldr	r3, [pc, #264]	@ (8045f58 <xTaskResumeAll+0x118>)
 8045e50:	681b      	ldr	r3, [r3, #0]
 8045e52:	2b00      	cmp	r3, #0
 8045e54:	d10b      	bne.n	8045e6e <xTaskResumeAll+0x2e>
	__asm volatile
 8045e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045e5a:	f383 8811 	msr	BASEPRI, r3
 8045e5e:	f3bf 8f6f 	isb	sy
 8045e62:	f3bf 8f4f 	dsb	sy
 8045e66:	603b      	str	r3, [r7, #0]
}
 8045e68:	bf00      	nop
 8045e6a:	bf00      	nop
 8045e6c:	e7fd      	b.n	8045e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8045e6e:	f001 f92b 	bl	80470c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8045e72:	4b39      	ldr	r3, [pc, #228]	@ (8045f58 <xTaskResumeAll+0x118>)
 8045e74:	681b      	ldr	r3, [r3, #0]
 8045e76:	3b01      	subs	r3, #1
 8045e78:	4a37      	ldr	r2, [pc, #220]	@ (8045f58 <xTaskResumeAll+0x118>)
 8045e7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8045e7c:	4b36      	ldr	r3, [pc, #216]	@ (8045f58 <xTaskResumeAll+0x118>)
 8045e7e:	681b      	ldr	r3, [r3, #0]
 8045e80:	2b00      	cmp	r3, #0
 8045e82:	d162      	bne.n	8045f4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8045e84:	4b35      	ldr	r3, [pc, #212]	@ (8045f5c <xTaskResumeAll+0x11c>)
 8045e86:	681b      	ldr	r3, [r3, #0]
 8045e88:	2b00      	cmp	r3, #0
 8045e8a:	d05e      	beq.n	8045f4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8045e8c:	e02f      	b.n	8045eee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8045e8e:	4b34      	ldr	r3, [pc, #208]	@ (8045f60 <xTaskResumeAll+0x120>)
 8045e90:	68db      	ldr	r3, [r3, #12]
 8045e92:	68db      	ldr	r3, [r3, #12]
 8045e94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8045e96:	68fb      	ldr	r3, [r7, #12]
 8045e98:	3318      	adds	r3, #24
 8045e9a:	4618      	mov	r0, r3
 8045e9c:	f7ff f85a 	bl	8044f54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8045ea0:	68fb      	ldr	r3, [r7, #12]
 8045ea2:	3304      	adds	r3, #4
 8045ea4:	4618      	mov	r0, r3
 8045ea6:	f7ff f855 	bl	8044f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8045eaa:	68fb      	ldr	r3, [r7, #12]
 8045eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045eae:	4b2d      	ldr	r3, [pc, #180]	@ (8045f64 <xTaskResumeAll+0x124>)
 8045eb0:	681b      	ldr	r3, [r3, #0]
 8045eb2:	429a      	cmp	r2, r3
 8045eb4:	d903      	bls.n	8045ebe <xTaskResumeAll+0x7e>
 8045eb6:	68fb      	ldr	r3, [r7, #12]
 8045eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045eba:	4a2a      	ldr	r2, [pc, #168]	@ (8045f64 <xTaskResumeAll+0x124>)
 8045ebc:	6013      	str	r3, [r2, #0]
 8045ebe:	68fb      	ldr	r3, [r7, #12]
 8045ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045ec2:	4613      	mov	r3, r2
 8045ec4:	009b      	lsls	r3, r3, #2
 8045ec6:	4413      	add	r3, r2
 8045ec8:	009b      	lsls	r3, r3, #2
 8045eca:	4a27      	ldr	r2, [pc, #156]	@ (8045f68 <xTaskResumeAll+0x128>)
 8045ecc:	441a      	add	r2, r3
 8045ece:	68fb      	ldr	r3, [r7, #12]
 8045ed0:	3304      	adds	r3, #4
 8045ed2:	4619      	mov	r1, r3
 8045ed4:	4610      	mov	r0, r2
 8045ed6:	f7fe ffe0 	bl	8044e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8045eda:	68fb      	ldr	r3, [r7, #12]
 8045edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8045ede:	4b23      	ldr	r3, [pc, #140]	@ (8045f6c <xTaskResumeAll+0x12c>)
 8045ee0:	681b      	ldr	r3, [r3, #0]
 8045ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045ee4:	429a      	cmp	r2, r3
 8045ee6:	d302      	bcc.n	8045eee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8045ee8:	4b21      	ldr	r3, [pc, #132]	@ (8045f70 <xTaskResumeAll+0x130>)
 8045eea:	2201      	movs	r2, #1
 8045eec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8045eee:	4b1c      	ldr	r3, [pc, #112]	@ (8045f60 <xTaskResumeAll+0x120>)
 8045ef0:	681b      	ldr	r3, [r3, #0]
 8045ef2:	2b00      	cmp	r3, #0
 8045ef4:	d1cb      	bne.n	8045e8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8045ef6:	68fb      	ldr	r3, [r7, #12]
 8045ef8:	2b00      	cmp	r3, #0
 8045efa:	d001      	beq.n	8045f00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8045efc:	f000 fb58 	bl	80465b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8045f00:	4b1c      	ldr	r3, [pc, #112]	@ (8045f74 <xTaskResumeAll+0x134>)
 8045f02:	681b      	ldr	r3, [r3, #0]
 8045f04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8045f06:	687b      	ldr	r3, [r7, #4]
 8045f08:	2b00      	cmp	r3, #0
 8045f0a:	d010      	beq.n	8045f2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8045f0c:	f000 f846 	bl	8045f9c <xTaskIncrementTick>
 8045f10:	4603      	mov	r3, r0
 8045f12:	2b00      	cmp	r3, #0
 8045f14:	d002      	beq.n	8045f1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8045f16:	4b16      	ldr	r3, [pc, #88]	@ (8045f70 <xTaskResumeAll+0x130>)
 8045f18:	2201      	movs	r2, #1
 8045f1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8045f1c:	687b      	ldr	r3, [r7, #4]
 8045f1e:	3b01      	subs	r3, #1
 8045f20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8045f22:	687b      	ldr	r3, [r7, #4]
 8045f24:	2b00      	cmp	r3, #0
 8045f26:	d1f1      	bne.n	8045f0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8045f28:	4b12      	ldr	r3, [pc, #72]	@ (8045f74 <xTaskResumeAll+0x134>)
 8045f2a:	2200      	movs	r2, #0
 8045f2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8045f2e:	4b10      	ldr	r3, [pc, #64]	@ (8045f70 <xTaskResumeAll+0x130>)
 8045f30:	681b      	ldr	r3, [r3, #0]
 8045f32:	2b00      	cmp	r3, #0
 8045f34:	d009      	beq.n	8045f4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8045f36:	2301      	movs	r3, #1
 8045f38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8045f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8045f78 <xTaskResumeAll+0x138>)
 8045f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8045f40:	601a      	str	r2, [r3, #0]
 8045f42:	f3bf 8f4f 	dsb	sy
 8045f46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8045f4a:	f001 f8ef 	bl	804712c <vPortExitCritical>

	return xAlreadyYielded;
 8045f4e:	68bb      	ldr	r3, [r7, #8]
}
 8045f50:	4618      	mov	r0, r3
 8045f52:	3710      	adds	r7, #16
 8045f54:	46bd      	mov	sp, r7
 8045f56:	bd80      	pop	{r7, pc}
 8045f58:	24000d28 	.word	0x24000d28
 8045f5c:	24000d00 	.word	0x24000d00
 8045f60:	24000cc0 	.word	0x24000cc0
 8045f64:	24000d08 	.word	0x24000d08
 8045f68:	24000830 	.word	0x24000830
 8045f6c:	2400082c 	.word	0x2400082c
 8045f70:	24000d14 	.word	0x24000d14
 8045f74:	24000d10 	.word	0x24000d10
 8045f78:	e000ed04 	.word	0xe000ed04

08045f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8045f7c:	b480      	push	{r7}
 8045f7e:	b083      	sub	sp, #12
 8045f80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8045f82:	4b05      	ldr	r3, [pc, #20]	@ (8045f98 <xTaskGetTickCount+0x1c>)
 8045f84:	681b      	ldr	r3, [r3, #0]
 8045f86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8045f88:	687b      	ldr	r3, [r7, #4]
}
 8045f8a:	4618      	mov	r0, r3
 8045f8c:	370c      	adds	r7, #12
 8045f8e:	46bd      	mov	sp, r7
 8045f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045f94:	4770      	bx	lr
 8045f96:	bf00      	nop
 8045f98:	24000d04 	.word	0x24000d04

08045f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8045f9c:	b580      	push	{r7, lr}
 8045f9e:	b086      	sub	sp, #24
 8045fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8045fa2:	2300      	movs	r3, #0
 8045fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8045fa6:	4b4f      	ldr	r3, [pc, #316]	@ (80460e4 <xTaskIncrementTick+0x148>)
 8045fa8:	681b      	ldr	r3, [r3, #0]
 8045faa:	2b00      	cmp	r3, #0
 8045fac:	f040 8090 	bne.w	80460d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8045fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80460e8 <xTaskIncrementTick+0x14c>)
 8045fb2:	681b      	ldr	r3, [r3, #0]
 8045fb4:	3301      	adds	r3, #1
 8045fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8045fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80460e8 <xTaskIncrementTick+0x14c>)
 8045fba:	693b      	ldr	r3, [r7, #16]
 8045fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8045fbe:	693b      	ldr	r3, [r7, #16]
 8045fc0:	2b00      	cmp	r3, #0
 8045fc2:	d121      	bne.n	8046008 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8045fc4:	4b49      	ldr	r3, [pc, #292]	@ (80460ec <xTaskIncrementTick+0x150>)
 8045fc6:	681b      	ldr	r3, [r3, #0]
 8045fc8:	681b      	ldr	r3, [r3, #0]
 8045fca:	2b00      	cmp	r3, #0
 8045fcc:	d00b      	beq.n	8045fe6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8045fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8045fd2:	f383 8811 	msr	BASEPRI, r3
 8045fd6:	f3bf 8f6f 	isb	sy
 8045fda:	f3bf 8f4f 	dsb	sy
 8045fde:	603b      	str	r3, [r7, #0]
}
 8045fe0:	bf00      	nop
 8045fe2:	bf00      	nop
 8045fe4:	e7fd      	b.n	8045fe2 <xTaskIncrementTick+0x46>
 8045fe6:	4b41      	ldr	r3, [pc, #260]	@ (80460ec <xTaskIncrementTick+0x150>)
 8045fe8:	681b      	ldr	r3, [r3, #0]
 8045fea:	60fb      	str	r3, [r7, #12]
 8045fec:	4b40      	ldr	r3, [pc, #256]	@ (80460f0 <xTaskIncrementTick+0x154>)
 8045fee:	681b      	ldr	r3, [r3, #0]
 8045ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80460ec <xTaskIncrementTick+0x150>)
 8045ff2:	6013      	str	r3, [r2, #0]
 8045ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80460f0 <xTaskIncrementTick+0x154>)
 8045ff6:	68fb      	ldr	r3, [r7, #12]
 8045ff8:	6013      	str	r3, [r2, #0]
 8045ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80460f4 <xTaskIncrementTick+0x158>)
 8045ffc:	681b      	ldr	r3, [r3, #0]
 8045ffe:	3301      	adds	r3, #1
 8046000:	4a3c      	ldr	r2, [pc, #240]	@ (80460f4 <xTaskIncrementTick+0x158>)
 8046002:	6013      	str	r3, [r2, #0]
 8046004:	f000 fad4 	bl	80465b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8046008:	4b3b      	ldr	r3, [pc, #236]	@ (80460f8 <xTaskIncrementTick+0x15c>)
 804600a:	681b      	ldr	r3, [r3, #0]
 804600c:	693a      	ldr	r2, [r7, #16]
 804600e:	429a      	cmp	r2, r3
 8046010:	d349      	bcc.n	80460a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8046012:	4b36      	ldr	r3, [pc, #216]	@ (80460ec <xTaskIncrementTick+0x150>)
 8046014:	681b      	ldr	r3, [r3, #0]
 8046016:	681b      	ldr	r3, [r3, #0]
 8046018:	2b00      	cmp	r3, #0
 804601a:	d104      	bne.n	8046026 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804601c:	4b36      	ldr	r3, [pc, #216]	@ (80460f8 <xTaskIncrementTick+0x15c>)
 804601e:	f04f 32ff 	mov.w	r2, #4294967295
 8046022:	601a      	str	r2, [r3, #0]
					break;
 8046024:	e03f      	b.n	80460a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046026:	4b31      	ldr	r3, [pc, #196]	@ (80460ec <xTaskIncrementTick+0x150>)
 8046028:	681b      	ldr	r3, [r3, #0]
 804602a:	68db      	ldr	r3, [r3, #12]
 804602c:	68db      	ldr	r3, [r3, #12]
 804602e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8046030:	68bb      	ldr	r3, [r7, #8]
 8046032:	685b      	ldr	r3, [r3, #4]
 8046034:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8046036:	693a      	ldr	r2, [r7, #16]
 8046038:	687b      	ldr	r3, [r7, #4]
 804603a:	429a      	cmp	r2, r3
 804603c:	d203      	bcs.n	8046046 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 804603e:	4a2e      	ldr	r2, [pc, #184]	@ (80460f8 <xTaskIncrementTick+0x15c>)
 8046040:	687b      	ldr	r3, [r7, #4]
 8046042:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8046044:	e02f      	b.n	80460a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8046046:	68bb      	ldr	r3, [r7, #8]
 8046048:	3304      	adds	r3, #4
 804604a:	4618      	mov	r0, r3
 804604c:	f7fe ff82 	bl	8044f54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8046050:	68bb      	ldr	r3, [r7, #8]
 8046052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046054:	2b00      	cmp	r3, #0
 8046056:	d004      	beq.n	8046062 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8046058:	68bb      	ldr	r3, [r7, #8]
 804605a:	3318      	adds	r3, #24
 804605c:	4618      	mov	r0, r3
 804605e:	f7fe ff79 	bl	8044f54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8046062:	68bb      	ldr	r3, [r7, #8]
 8046064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8046066:	4b25      	ldr	r3, [pc, #148]	@ (80460fc <xTaskIncrementTick+0x160>)
 8046068:	681b      	ldr	r3, [r3, #0]
 804606a:	429a      	cmp	r2, r3
 804606c:	d903      	bls.n	8046076 <xTaskIncrementTick+0xda>
 804606e:	68bb      	ldr	r3, [r7, #8]
 8046070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8046072:	4a22      	ldr	r2, [pc, #136]	@ (80460fc <xTaskIncrementTick+0x160>)
 8046074:	6013      	str	r3, [r2, #0]
 8046076:	68bb      	ldr	r3, [r7, #8]
 8046078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 804607a:	4613      	mov	r3, r2
 804607c:	009b      	lsls	r3, r3, #2
 804607e:	4413      	add	r3, r2
 8046080:	009b      	lsls	r3, r3, #2
 8046082:	4a1f      	ldr	r2, [pc, #124]	@ (8046100 <xTaskIncrementTick+0x164>)
 8046084:	441a      	add	r2, r3
 8046086:	68bb      	ldr	r3, [r7, #8]
 8046088:	3304      	adds	r3, #4
 804608a:	4619      	mov	r1, r3
 804608c:	4610      	mov	r0, r2
 804608e:	f7fe ff04 	bl	8044e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8046092:	68bb      	ldr	r3, [r7, #8]
 8046094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8046096:	4b1b      	ldr	r3, [pc, #108]	@ (8046104 <xTaskIncrementTick+0x168>)
 8046098:	681b      	ldr	r3, [r3, #0]
 804609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804609c:	429a      	cmp	r2, r3
 804609e:	d3b8      	bcc.n	8046012 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80460a0:	2301      	movs	r3, #1
 80460a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80460a4:	e7b5      	b.n	8046012 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80460a6:	4b17      	ldr	r3, [pc, #92]	@ (8046104 <xTaskIncrementTick+0x168>)
 80460a8:	681b      	ldr	r3, [r3, #0]
 80460aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80460ac:	4914      	ldr	r1, [pc, #80]	@ (8046100 <xTaskIncrementTick+0x164>)
 80460ae:	4613      	mov	r3, r2
 80460b0:	009b      	lsls	r3, r3, #2
 80460b2:	4413      	add	r3, r2
 80460b4:	009b      	lsls	r3, r3, #2
 80460b6:	440b      	add	r3, r1
 80460b8:	681b      	ldr	r3, [r3, #0]
 80460ba:	2b01      	cmp	r3, #1
 80460bc:	d901      	bls.n	80460c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80460be:	2301      	movs	r3, #1
 80460c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80460c2:	4b11      	ldr	r3, [pc, #68]	@ (8046108 <xTaskIncrementTick+0x16c>)
 80460c4:	681b      	ldr	r3, [r3, #0]
 80460c6:	2b00      	cmp	r3, #0
 80460c8:	d007      	beq.n	80460da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80460ca:	2301      	movs	r3, #1
 80460cc:	617b      	str	r3, [r7, #20]
 80460ce:	e004      	b.n	80460da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80460d0:	4b0e      	ldr	r3, [pc, #56]	@ (804610c <xTaskIncrementTick+0x170>)
 80460d2:	681b      	ldr	r3, [r3, #0]
 80460d4:	3301      	adds	r3, #1
 80460d6:	4a0d      	ldr	r2, [pc, #52]	@ (804610c <xTaskIncrementTick+0x170>)
 80460d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80460da:	697b      	ldr	r3, [r7, #20]
}
 80460dc:	4618      	mov	r0, r3
 80460de:	3718      	adds	r7, #24
 80460e0:	46bd      	mov	sp, r7
 80460e2:	bd80      	pop	{r7, pc}
 80460e4:	24000d28 	.word	0x24000d28
 80460e8:	24000d04 	.word	0x24000d04
 80460ec:	24000cb8 	.word	0x24000cb8
 80460f0:	24000cbc 	.word	0x24000cbc
 80460f4:	24000d18 	.word	0x24000d18
 80460f8:	24000d20 	.word	0x24000d20
 80460fc:	24000d08 	.word	0x24000d08
 8046100:	24000830 	.word	0x24000830
 8046104:	2400082c 	.word	0x2400082c
 8046108:	24000d14 	.word	0x24000d14
 804610c:	24000d10 	.word	0x24000d10

08046110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8046110:	b480      	push	{r7}
 8046112:	b085      	sub	sp, #20
 8046114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8046116:	4b28      	ldr	r3, [pc, #160]	@ (80461b8 <vTaskSwitchContext+0xa8>)
 8046118:	681b      	ldr	r3, [r3, #0]
 804611a:	2b00      	cmp	r3, #0
 804611c:	d003      	beq.n	8046126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 804611e:	4b27      	ldr	r3, [pc, #156]	@ (80461bc <vTaskSwitchContext+0xac>)
 8046120:	2201      	movs	r2, #1
 8046122:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8046124:	e042      	b.n	80461ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8046126:	4b25      	ldr	r3, [pc, #148]	@ (80461bc <vTaskSwitchContext+0xac>)
 8046128:	2200      	movs	r2, #0
 804612a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804612c:	4b24      	ldr	r3, [pc, #144]	@ (80461c0 <vTaskSwitchContext+0xb0>)
 804612e:	681b      	ldr	r3, [r3, #0]
 8046130:	60fb      	str	r3, [r7, #12]
 8046132:	e011      	b.n	8046158 <vTaskSwitchContext+0x48>
 8046134:	68fb      	ldr	r3, [r7, #12]
 8046136:	2b00      	cmp	r3, #0
 8046138:	d10b      	bne.n	8046152 <vTaskSwitchContext+0x42>
	__asm volatile
 804613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804613e:	f383 8811 	msr	BASEPRI, r3
 8046142:	f3bf 8f6f 	isb	sy
 8046146:	f3bf 8f4f 	dsb	sy
 804614a:	607b      	str	r3, [r7, #4]
}
 804614c:	bf00      	nop
 804614e:	bf00      	nop
 8046150:	e7fd      	b.n	804614e <vTaskSwitchContext+0x3e>
 8046152:	68fb      	ldr	r3, [r7, #12]
 8046154:	3b01      	subs	r3, #1
 8046156:	60fb      	str	r3, [r7, #12]
 8046158:	491a      	ldr	r1, [pc, #104]	@ (80461c4 <vTaskSwitchContext+0xb4>)
 804615a:	68fa      	ldr	r2, [r7, #12]
 804615c:	4613      	mov	r3, r2
 804615e:	009b      	lsls	r3, r3, #2
 8046160:	4413      	add	r3, r2
 8046162:	009b      	lsls	r3, r3, #2
 8046164:	440b      	add	r3, r1
 8046166:	681b      	ldr	r3, [r3, #0]
 8046168:	2b00      	cmp	r3, #0
 804616a:	d0e3      	beq.n	8046134 <vTaskSwitchContext+0x24>
 804616c:	68fa      	ldr	r2, [r7, #12]
 804616e:	4613      	mov	r3, r2
 8046170:	009b      	lsls	r3, r3, #2
 8046172:	4413      	add	r3, r2
 8046174:	009b      	lsls	r3, r3, #2
 8046176:	4a13      	ldr	r2, [pc, #76]	@ (80461c4 <vTaskSwitchContext+0xb4>)
 8046178:	4413      	add	r3, r2
 804617a:	60bb      	str	r3, [r7, #8]
 804617c:	68bb      	ldr	r3, [r7, #8]
 804617e:	685b      	ldr	r3, [r3, #4]
 8046180:	685a      	ldr	r2, [r3, #4]
 8046182:	68bb      	ldr	r3, [r7, #8]
 8046184:	605a      	str	r2, [r3, #4]
 8046186:	68bb      	ldr	r3, [r7, #8]
 8046188:	685a      	ldr	r2, [r3, #4]
 804618a:	68bb      	ldr	r3, [r7, #8]
 804618c:	3308      	adds	r3, #8
 804618e:	429a      	cmp	r2, r3
 8046190:	d104      	bne.n	804619c <vTaskSwitchContext+0x8c>
 8046192:	68bb      	ldr	r3, [r7, #8]
 8046194:	685b      	ldr	r3, [r3, #4]
 8046196:	685a      	ldr	r2, [r3, #4]
 8046198:	68bb      	ldr	r3, [r7, #8]
 804619a:	605a      	str	r2, [r3, #4]
 804619c:	68bb      	ldr	r3, [r7, #8]
 804619e:	685b      	ldr	r3, [r3, #4]
 80461a0:	68db      	ldr	r3, [r3, #12]
 80461a2:	4a09      	ldr	r2, [pc, #36]	@ (80461c8 <vTaskSwitchContext+0xb8>)
 80461a4:	6013      	str	r3, [r2, #0]
 80461a6:	4a06      	ldr	r2, [pc, #24]	@ (80461c0 <vTaskSwitchContext+0xb0>)
 80461a8:	68fb      	ldr	r3, [r7, #12]
 80461aa:	6013      	str	r3, [r2, #0]
}
 80461ac:	bf00      	nop
 80461ae:	3714      	adds	r7, #20
 80461b0:	46bd      	mov	sp, r7
 80461b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80461b6:	4770      	bx	lr
 80461b8:	24000d28 	.word	0x24000d28
 80461bc:	24000d14 	.word	0x24000d14
 80461c0:	24000d08 	.word	0x24000d08
 80461c4:	24000830 	.word	0x24000830
 80461c8:	2400082c 	.word	0x2400082c

080461cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80461cc:	b580      	push	{r7, lr}
 80461ce:	b084      	sub	sp, #16
 80461d0:	af00      	add	r7, sp, #0
 80461d2:	6078      	str	r0, [r7, #4]
 80461d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80461d6:	687b      	ldr	r3, [r7, #4]
 80461d8:	2b00      	cmp	r3, #0
 80461da:	d10b      	bne.n	80461f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80461dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80461e0:	f383 8811 	msr	BASEPRI, r3
 80461e4:	f3bf 8f6f 	isb	sy
 80461e8:	f3bf 8f4f 	dsb	sy
 80461ec:	60fb      	str	r3, [r7, #12]
}
 80461ee:	bf00      	nop
 80461f0:	bf00      	nop
 80461f2:	e7fd      	b.n	80461f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80461f4:	4b07      	ldr	r3, [pc, #28]	@ (8046214 <vTaskPlaceOnEventList+0x48>)
 80461f6:	681b      	ldr	r3, [r3, #0]
 80461f8:	3318      	adds	r3, #24
 80461fa:	4619      	mov	r1, r3
 80461fc:	6878      	ldr	r0, [r7, #4]
 80461fe:	f7fe fe70 	bl	8044ee2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8046202:	2101      	movs	r1, #1
 8046204:	6838      	ldr	r0, [r7, #0]
 8046206:	f000 fa81 	bl	804670c <prvAddCurrentTaskToDelayedList>
}
 804620a:	bf00      	nop
 804620c:	3710      	adds	r7, #16
 804620e:	46bd      	mov	sp, r7
 8046210:	bd80      	pop	{r7, pc}
 8046212:	bf00      	nop
 8046214:	2400082c 	.word	0x2400082c

08046218 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8046218:	b580      	push	{r7, lr}
 804621a:	b086      	sub	sp, #24
 804621c:	af00      	add	r7, sp, #0
 804621e:	60f8      	str	r0, [r7, #12]
 8046220:	60b9      	str	r1, [r7, #8]
 8046222:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8046224:	68fb      	ldr	r3, [r7, #12]
 8046226:	2b00      	cmp	r3, #0
 8046228:	d10b      	bne.n	8046242 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 804622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804622e:	f383 8811 	msr	BASEPRI, r3
 8046232:	f3bf 8f6f 	isb	sy
 8046236:	f3bf 8f4f 	dsb	sy
 804623a:	617b      	str	r3, [r7, #20]
}
 804623c:	bf00      	nop
 804623e:	bf00      	nop
 8046240:	e7fd      	b.n	804623e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8046242:	4b0a      	ldr	r3, [pc, #40]	@ (804626c <vTaskPlaceOnEventListRestricted+0x54>)
 8046244:	681b      	ldr	r3, [r3, #0]
 8046246:	3318      	adds	r3, #24
 8046248:	4619      	mov	r1, r3
 804624a:	68f8      	ldr	r0, [r7, #12]
 804624c:	f7fe fe25 	bl	8044e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8046250:	687b      	ldr	r3, [r7, #4]
 8046252:	2b00      	cmp	r3, #0
 8046254:	d002      	beq.n	804625c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8046256:	f04f 33ff 	mov.w	r3, #4294967295
 804625a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 804625c:	6879      	ldr	r1, [r7, #4]
 804625e:	68b8      	ldr	r0, [r7, #8]
 8046260:	f000 fa54 	bl	804670c <prvAddCurrentTaskToDelayedList>
	}
 8046264:	bf00      	nop
 8046266:	3718      	adds	r7, #24
 8046268:	46bd      	mov	sp, r7
 804626a:	bd80      	pop	{r7, pc}
 804626c:	2400082c 	.word	0x2400082c

08046270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8046270:	b580      	push	{r7, lr}
 8046272:	b086      	sub	sp, #24
 8046274:	af00      	add	r7, sp, #0
 8046276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046278:	687b      	ldr	r3, [r7, #4]
 804627a:	68db      	ldr	r3, [r3, #12]
 804627c:	68db      	ldr	r3, [r3, #12]
 804627e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8046280:	693b      	ldr	r3, [r7, #16]
 8046282:	2b00      	cmp	r3, #0
 8046284:	d10b      	bne.n	804629e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8046286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804628a:	f383 8811 	msr	BASEPRI, r3
 804628e:	f3bf 8f6f 	isb	sy
 8046292:	f3bf 8f4f 	dsb	sy
 8046296:	60fb      	str	r3, [r7, #12]
}
 8046298:	bf00      	nop
 804629a:	bf00      	nop
 804629c:	e7fd      	b.n	804629a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 804629e:	693b      	ldr	r3, [r7, #16]
 80462a0:	3318      	adds	r3, #24
 80462a2:	4618      	mov	r0, r3
 80462a4:	f7fe fe56 	bl	8044f54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80462a8:	4b1d      	ldr	r3, [pc, #116]	@ (8046320 <xTaskRemoveFromEventList+0xb0>)
 80462aa:	681b      	ldr	r3, [r3, #0]
 80462ac:	2b00      	cmp	r3, #0
 80462ae:	d11d      	bne.n	80462ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80462b0:	693b      	ldr	r3, [r7, #16]
 80462b2:	3304      	adds	r3, #4
 80462b4:	4618      	mov	r0, r3
 80462b6:	f7fe fe4d 	bl	8044f54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80462ba:	693b      	ldr	r3, [r7, #16]
 80462bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80462be:	4b19      	ldr	r3, [pc, #100]	@ (8046324 <xTaskRemoveFromEventList+0xb4>)
 80462c0:	681b      	ldr	r3, [r3, #0]
 80462c2:	429a      	cmp	r2, r3
 80462c4:	d903      	bls.n	80462ce <xTaskRemoveFromEventList+0x5e>
 80462c6:	693b      	ldr	r3, [r7, #16]
 80462c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80462ca:	4a16      	ldr	r2, [pc, #88]	@ (8046324 <xTaskRemoveFromEventList+0xb4>)
 80462cc:	6013      	str	r3, [r2, #0]
 80462ce:	693b      	ldr	r3, [r7, #16]
 80462d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80462d2:	4613      	mov	r3, r2
 80462d4:	009b      	lsls	r3, r3, #2
 80462d6:	4413      	add	r3, r2
 80462d8:	009b      	lsls	r3, r3, #2
 80462da:	4a13      	ldr	r2, [pc, #76]	@ (8046328 <xTaskRemoveFromEventList+0xb8>)
 80462dc:	441a      	add	r2, r3
 80462de:	693b      	ldr	r3, [r7, #16]
 80462e0:	3304      	adds	r3, #4
 80462e2:	4619      	mov	r1, r3
 80462e4:	4610      	mov	r0, r2
 80462e6:	f7fe fdd8 	bl	8044e9a <vListInsertEnd>
 80462ea:	e005      	b.n	80462f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80462ec:	693b      	ldr	r3, [r7, #16]
 80462ee:	3318      	adds	r3, #24
 80462f0:	4619      	mov	r1, r3
 80462f2:	480e      	ldr	r0, [pc, #56]	@ (804632c <xTaskRemoveFromEventList+0xbc>)
 80462f4:	f7fe fdd1 	bl	8044e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80462f8:	693b      	ldr	r3, [r7, #16]
 80462fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80462fc:	4b0c      	ldr	r3, [pc, #48]	@ (8046330 <xTaskRemoveFromEventList+0xc0>)
 80462fe:	681b      	ldr	r3, [r3, #0]
 8046300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8046302:	429a      	cmp	r2, r3
 8046304:	d905      	bls.n	8046312 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8046306:	2301      	movs	r3, #1
 8046308:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 804630a:	4b0a      	ldr	r3, [pc, #40]	@ (8046334 <xTaskRemoveFromEventList+0xc4>)
 804630c:	2201      	movs	r2, #1
 804630e:	601a      	str	r2, [r3, #0]
 8046310:	e001      	b.n	8046316 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8046312:	2300      	movs	r3, #0
 8046314:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8046316:	697b      	ldr	r3, [r7, #20]
}
 8046318:	4618      	mov	r0, r3
 804631a:	3718      	adds	r7, #24
 804631c:	46bd      	mov	sp, r7
 804631e:	bd80      	pop	{r7, pc}
 8046320:	24000d28 	.word	0x24000d28
 8046324:	24000d08 	.word	0x24000d08
 8046328:	24000830 	.word	0x24000830
 804632c:	24000cc0 	.word	0x24000cc0
 8046330:	2400082c 	.word	0x2400082c
 8046334:	24000d14 	.word	0x24000d14

08046338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8046338:	b480      	push	{r7}
 804633a:	b083      	sub	sp, #12
 804633c:	af00      	add	r7, sp, #0
 804633e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8046340:	4b06      	ldr	r3, [pc, #24]	@ (804635c <vTaskInternalSetTimeOutState+0x24>)
 8046342:	681a      	ldr	r2, [r3, #0]
 8046344:	687b      	ldr	r3, [r7, #4]
 8046346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8046348:	4b05      	ldr	r3, [pc, #20]	@ (8046360 <vTaskInternalSetTimeOutState+0x28>)
 804634a:	681a      	ldr	r2, [r3, #0]
 804634c:	687b      	ldr	r3, [r7, #4]
 804634e:	605a      	str	r2, [r3, #4]
}
 8046350:	bf00      	nop
 8046352:	370c      	adds	r7, #12
 8046354:	46bd      	mov	sp, r7
 8046356:	f85d 7b04 	ldr.w	r7, [sp], #4
 804635a:	4770      	bx	lr
 804635c:	24000d18 	.word	0x24000d18
 8046360:	24000d04 	.word	0x24000d04

08046364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8046364:	b580      	push	{r7, lr}
 8046366:	b088      	sub	sp, #32
 8046368:	af00      	add	r7, sp, #0
 804636a:	6078      	str	r0, [r7, #4]
 804636c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 804636e:	687b      	ldr	r3, [r7, #4]
 8046370:	2b00      	cmp	r3, #0
 8046372:	d10b      	bne.n	804638c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8046374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046378:	f383 8811 	msr	BASEPRI, r3
 804637c:	f3bf 8f6f 	isb	sy
 8046380:	f3bf 8f4f 	dsb	sy
 8046384:	613b      	str	r3, [r7, #16]
}
 8046386:	bf00      	nop
 8046388:	bf00      	nop
 804638a:	e7fd      	b.n	8046388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 804638c:	683b      	ldr	r3, [r7, #0]
 804638e:	2b00      	cmp	r3, #0
 8046390:	d10b      	bne.n	80463aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8046392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046396:	f383 8811 	msr	BASEPRI, r3
 804639a:	f3bf 8f6f 	isb	sy
 804639e:	f3bf 8f4f 	dsb	sy
 80463a2:	60fb      	str	r3, [r7, #12]
}
 80463a4:	bf00      	nop
 80463a6:	bf00      	nop
 80463a8:	e7fd      	b.n	80463a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80463aa:	f000 fe8d 	bl	80470c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80463ae:	4b1d      	ldr	r3, [pc, #116]	@ (8046424 <xTaskCheckForTimeOut+0xc0>)
 80463b0:	681b      	ldr	r3, [r3, #0]
 80463b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80463b4:	687b      	ldr	r3, [r7, #4]
 80463b6:	685b      	ldr	r3, [r3, #4]
 80463b8:	69ba      	ldr	r2, [r7, #24]
 80463ba:	1ad3      	subs	r3, r2, r3
 80463bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80463be:	683b      	ldr	r3, [r7, #0]
 80463c0:	681b      	ldr	r3, [r3, #0]
 80463c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80463c6:	d102      	bne.n	80463ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80463c8:	2300      	movs	r3, #0
 80463ca:	61fb      	str	r3, [r7, #28]
 80463cc:	e023      	b.n	8046416 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80463ce:	687b      	ldr	r3, [r7, #4]
 80463d0:	681a      	ldr	r2, [r3, #0]
 80463d2:	4b15      	ldr	r3, [pc, #84]	@ (8046428 <xTaskCheckForTimeOut+0xc4>)
 80463d4:	681b      	ldr	r3, [r3, #0]
 80463d6:	429a      	cmp	r2, r3
 80463d8:	d007      	beq.n	80463ea <xTaskCheckForTimeOut+0x86>
 80463da:	687b      	ldr	r3, [r7, #4]
 80463dc:	685b      	ldr	r3, [r3, #4]
 80463de:	69ba      	ldr	r2, [r7, #24]
 80463e0:	429a      	cmp	r2, r3
 80463e2:	d302      	bcc.n	80463ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80463e4:	2301      	movs	r3, #1
 80463e6:	61fb      	str	r3, [r7, #28]
 80463e8:	e015      	b.n	8046416 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80463ea:	683b      	ldr	r3, [r7, #0]
 80463ec:	681b      	ldr	r3, [r3, #0]
 80463ee:	697a      	ldr	r2, [r7, #20]
 80463f0:	429a      	cmp	r2, r3
 80463f2:	d20b      	bcs.n	804640c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80463f4:	683b      	ldr	r3, [r7, #0]
 80463f6:	681a      	ldr	r2, [r3, #0]
 80463f8:	697b      	ldr	r3, [r7, #20]
 80463fa:	1ad2      	subs	r2, r2, r3
 80463fc:	683b      	ldr	r3, [r7, #0]
 80463fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8046400:	6878      	ldr	r0, [r7, #4]
 8046402:	f7ff ff99 	bl	8046338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8046406:	2300      	movs	r3, #0
 8046408:	61fb      	str	r3, [r7, #28]
 804640a:	e004      	b.n	8046416 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 804640c:	683b      	ldr	r3, [r7, #0]
 804640e:	2200      	movs	r2, #0
 8046410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8046412:	2301      	movs	r3, #1
 8046414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8046416:	f000 fe89 	bl	804712c <vPortExitCritical>

	return xReturn;
 804641a:	69fb      	ldr	r3, [r7, #28]
}
 804641c:	4618      	mov	r0, r3
 804641e:	3720      	adds	r7, #32
 8046420:	46bd      	mov	sp, r7
 8046422:	bd80      	pop	{r7, pc}
 8046424:	24000d04 	.word	0x24000d04
 8046428:	24000d18 	.word	0x24000d18

0804642c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 804642c:	b480      	push	{r7}
 804642e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8046430:	4b03      	ldr	r3, [pc, #12]	@ (8046440 <vTaskMissedYield+0x14>)
 8046432:	2201      	movs	r2, #1
 8046434:	601a      	str	r2, [r3, #0]
}
 8046436:	bf00      	nop
 8046438:	46bd      	mov	sp, r7
 804643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804643e:	4770      	bx	lr
 8046440:	24000d14 	.word	0x24000d14

08046444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8046444:	b580      	push	{r7, lr}
 8046446:	b082      	sub	sp, #8
 8046448:	af00      	add	r7, sp, #0
 804644a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 804644c:	f000 f852 	bl	80464f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8046450:	4b06      	ldr	r3, [pc, #24]	@ (804646c <prvIdleTask+0x28>)
 8046452:	681b      	ldr	r3, [r3, #0]
 8046454:	2b01      	cmp	r3, #1
 8046456:	d9f9      	bls.n	804644c <prvIdleTask+0x8>
			{
				taskYIELD();
 8046458:	4b05      	ldr	r3, [pc, #20]	@ (8046470 <prvIdleTask+0x2c>)
 804645a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 804645e:	601a      	str	r2, [r3, #0]
 8046460:	f3bf 8f4f 	dsb	sy
 8046464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8046468:	e7f0      	b.n	804644c <prvIdleTask+0x8>
 804646a:	bf00      	nop
 804646c:	24000830 	.word	0x24000830
 8046470:	e000ed04 	.word	0xe000ed04

08046474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8046474:	b580      	push	{r7, lr}
 8046476:	b082      	sub	sp, #8
 8046478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 804647a:	2300      	movs	r3, #0
 804647c:	607b      	str	r3, [r7, #4]
 804647e:	e00c      	b.n	804649a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8046480:	687a      	ldr	r2, [r7, #4]
 8046482:	4613      	mov	r3, r2
 8046484:	009b      	lsls	r3, r3, #2
 8046486:	4413      	add	r3, r2
 8046488:	009b      	lsls	r3, r3, #2
 804648a:	4a12      	ldr	r2, [pc, #72]	@ (80464d4 <prvInitialiseTaskLists+0x60>)
 804648c:	4413      	add	r3, r2
 804648e:	4618      	mov	r0, r3
 8046490:	f7fe fcd6 	bl	8044e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8046494:	687b      	ldr	r3, [r7, #4]
 8046496:	3301      	adds	r3, #1
 8046498:	607b      	str	r3, [r7, #4]
 804649a:	687b      	ldr	r3, [r7, #4]
 804649c:	2b37      	cmp	r3, #55	@ 0x37
 804649e:	d9ef      	bls.n	8046480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80464a0:	480d      	ldr	r0, [pc, #52]	@ (80464d8 <prvInitialiseTaskLists+0x64>)
 80464a2:	f7fe fccd 	bl	8044e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80464a6:	480d      	ldr	r0, [pc, #52]	@ (80464dc <prvInitialiseTaskLists+0x68>)
 80464a8:	f7fe fcca 	bl	8044e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80464ac:	480c      	ldr	r0, [pc, #48]	@ (80464e0 <prvInitialiseTaskLists+0x6c>)
 80464ae:	f7fe fcc7 	bl	8044e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80464b2:	480c      	ldr	r0, [pc, #48]	@ (80464e4 <prvInitialiseTaskLists+0x70>)
 80464b4:	f7fe fcc4 	bl	8044e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80464b8:	480b      	ldr	r0, [pc, #44]	@ (80464e8 <prvInitialiseTaskLists+0x74>)
 80464ba:	f7fe fcc1 	bl	8044e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80464be:	4b0b      	ldr	r3, [pc, #44]	@ (80464ec <prvInitialiseTaskLists+0x78>)
 80464c0:	4a05      	ldr	r2, [pc, #20]	@ (80464d8 <prvInitialiseTaskLists+0x64>)
 80464c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80464c4:	4b0a      	ldr	r3, [pc, #40]	@ (80464f0 <prvInitialiseTaskLists+0x7c>)
 80464c6:	4a05      	ldr	r2, [pc, #20]	@ (80464dc <prvInitialiseTaskLists+0x68>)
 80464c8:	601a      	str	r2, [r3, #0]
}
 80464ca:	bf00      	nop
 80464cc:	3708      	adds	r7, #8
 80464ce:	46bd      	mov	sp, r7
 80464d0:	bd80      	pop	{r7, pc}
 80464d2:	bf00      	nop
 80464d4:	24000830 	.word	0x24000830
 80464d8:	24000c90 	.word	0x24000c90
 80464dc:	24000ca4 	.word	0x24000ca4
 80464e0:	24000cc0 	.word	0x24000cc0
 80464e4:	24000cd4 	.word	0x24000cd4
 80464e8:	24000cec 	.word	0x24000cec
 80464ec:	24000cb8 	.word	0x24000cb8
 80464f0:	24000cbc 	.word	0x24000cbc

080464f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80464f4:	b580      	push	{r7, lr}
 80464f6:	b082      	sub	sp, #8
 80464f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80464fa:	e019      	b.n	8046530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80464fc:	f000 fde4 	bl	80470c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046500:	4b10      	ldr	r3, [pc, #64]	@ (8046544 <prvCheckTasksWaitingTermination+0x50>)
 8046502:	68db      	ldr	r3, [r3, #12]
 8046504:	68db      	ldr	r3, [r3, #12]
 8046506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8046508:	687b      	ldr	r3, [r7, #4]
 804650a:	3304      	adds	r3, #4
 804650c:	4618      	mov	r0, r3
 804650e:	f7fe fd21 	bl	8044f54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8046512:	4b0d      	ldr	r3, [pc, #52]	@ (8046548 <prvCheckTasksWaitingTermination+0x54>)
 8046514:	681b      	ldr	r3, [r3, #0]
 8046516:	3b01      	subs	r3, #1
 8046518:	4a0b      	ldr	r2, [pc, #44]	@ (8046548 <prvCheckTasksWaitingTermination+0x54>)
 804651a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 804651c:	4b0b      	ldr	r3, [pc, #44]	@ (804654c <prvCheckTasksWaitingTermination+0x58>)
 804651e:	681b      	ldr	r3, [r3, #0]
 8046520:	3b01      	subs	r3, #1
 8046522:	4a0a      	ldr	r2, [pc, #40]	@ (804654c <prvCheckTasksWaitingTermination+0x58>)
 8046524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8046526:	f000 fe01 	bl	804712c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 804652a:	6878      	ldr	r0, [r7, #4]
 804652c:	f000 f810 	bl	8046550 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8046530:	4b06      	ldr	r3, [pc, #24]	@ (804654c <prvCheckTasksWaitingTermination+0x58>)
 8046532:	681b      	ldr	r3, [r3, #0]
 8046534:	2b00      	cmp	r3, #0
 8046536:	d1e1      	bne.n	80464fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8046538:	bf00      	nop
 804653a:	bf00      	nop
 804653c:	3708      	adds	r7, #8
 804653e:	46bd      	mov	sp, r7
 8046540:	bd80      	pop	{r7, pc}
 8046542:	bf00      	nop
 8046544:	24000cd4 	.word	0x24000cd4
 8046548:	24000d00 	.word	0x24000d00
 804654c:	24000ce8 	.word	0x24000ce8

08046550 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8046550:	b580      	push	{r7, lr}
 8046552:	b084      	sub	sp, #16
 8046554:	af00      	add	r7, sp, #0
 8046556:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8046558:	687b      	ldr	r3, [r7, #4]
 804655a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 804655e:	2b00      	cmp	r3, #0
 8046560:	d108      	bne.n	8046574 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8046562:	687b      	ldr	r3, [r7, #4]
 8046564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8046566:	4618      	mov	r0, r3
 8046568:	f000 ff9e 	bl	80474a8 <vPortFree>
				vPortFree( pxTCB );
 804656c:	6878      	ldr	r0, [r7, #4]
 804656e:	f000 ff9b 	bl	80474a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8046572:	e019      	b.n	80465a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8046574:	687b      	ldr	r3, [r7, #4]
 8046576:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 804657a:	2b01      	cmp	r3, #1
 804657c:	d103      	bne.n	8046586 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 804657e:	6878      	ldr	r0, [r7, #4]
 8046580:	f000 ff92 	bl	80474a8 <vPortFree>
	}
 8046584:	e010      	b.n	80465a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8046586:	687b      	ldr	r3, [r7, #4]
 8046588:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 804658c:	2b02      	cmp	r3, #2
 804658e:	d00b      	beq.n	80465a8 <prvDeleteTCB+0x58>
	__asm volatile
 8046590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046594:	f383 8811 	msr	BASEPRI, r3
 8046598:	f3bf 8f6f 	isb	sy
 804659c:	f3bf 8f4f 	dsb	sy
 80465a0:	60fb      	str	r3, [r7, #12]
}
 80465a2:	bf00      	nop
 80465a4:	bf00      	nop
 80465a6:	e7fd      	b.n	80465a4 <prvDeleteTCB+0x54>
	}
 80465a8:	bf00      	nop
 80465aa:	3710      	adds	r7, #16
 80465ac:	46bd      	mov	sp, r7
 80465ae:	bd80      	pop	{r7, pc}

080465b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80465b0:	b480      	push	{r7}
 80465b2:	b083      	sub	sp, #12
 80465b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80465b6:	4b0c      	ldr	r3, [pc, #48]	@ (80465e8 <prvResetNextTaskUnblockTime+0x38>)
 80465b8:	681b      	ldr	r3, [r3, #0]
 80465ba:	681b      	ldr	r3, [r3, #0]
 80465bc:	2b00      	cmp	r3, #0
 80465be:	d104      	bne.n	80465ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80465c0:	4b0a      	ldr	r3, [pc, #40]	@ (80465ec <prvResetNextTaskUnblockTime+0x3c>)
 80465c2:	f04f 32ff 	mov.w	r2, #4294967295
 80465c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80465c8:	e008      	b.n	80465dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80465ca:	4b07      	ldr	r3, [pc, #28]	@ (80465e8 <prvResetNextTaskUnblockTime+0x38>)
 80465cc:	681b      	ldr	r3, [r3, #0]
 80465ce:	68db      	ldr	r3, [r3, #12]
 80465d0:	68db      	ldr	r3, [r3, #12]
 80465d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80465d4:	687b      	ldr	r3, [r7, #4]
 80465d6:	685b      	ldr	r3, [r3, #4]
 80465d8:	4a04      	ldr	r2, [pc, #16]	@ (80465ec <prvResetNextTaskUnblockTime+0x3c>)
 80465da:	6013      	str	r3, [r2, #0]
}
 80465dc:	bf00      	nop
 80465de:	370c      	adds	r7, #12
 80465e0:	46bd      	mov	sp, r7
 80465e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80465e6:	4770      	bx	lr
 80465e8:	24000cb8 	.word	0x24000cb8
 80465ec:	24000d20 	.word	0x24000d20

080465f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80465f0:	b480      	push	{r7}
 80465f2:	b083      	sub	sp, #12
 80465f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80465f6:	4b0b      	ldr	r3, [pc, #44]	@ (8046624 <xTaskGetSchedulerState+0x34>)
 80465f8:	681b      	ldr	r3, [r3, #0]
 80465fa:	2b00      	cmp	r3, #0
 80465fc:	d102      	bne.n	8046604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80465fe:	2301      	movs	r3, #1
 8046600:	607b      	str	r3, [r7, #4]
 8046602:	e008      	b.n	8046616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8046604:	4b08      	ldr	r3, [pc, #32]	@ (8046628 <xTaskGetSchedulerState+0x38>)
 8046606:	681b      	ldr	r3, [r3, #0]
 8046608:	2b00      	cmp	r3, #0
 804660a:	d102      	bne.n	8046612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 804660c:	2302      	movs	r3, #2
 804660e:	607b      	str	r3, [r7, #4]
 8046610:	e001      	b.n	8046616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8046612:	2300      	movs	r3, #0
 8046614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8046616:	687b      	ldr	r3, [r7, #4]
	}
 8046618:	4618      	mov	r0, r3
 804661a:	370c      	adds	r7, #12
 804661c:	46bd      	mov	sp, r7
 804661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046622:	4770      	bx	lr
 8046624:	24000d0c 	.word	0x24000d0c
 8046628:	24000d28 	.word	0x24000d28

0804662c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 804662c:	b580      	push	{r7, lr}
 804662e:	b086      	sub	sp, #24
 8046630:	af00      	add	r7, sp, #0
 8046632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8046634:	687b      	ldr	r3, [r7, #4]
 8046636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8046638:	2300      	movs	r3, #0
 804663a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 804663c:	687b      	ldr	r3, [r7, #4]
 804663e:	2b00      	cmp	r3, #0
 8046640:	d058      	beq.n	80466f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8046642:	4b2f      	ldr	r3, [pc, #188]	@ (8046700 <xTaskPriorityDisinherit+0xd4>)
 8046644:	681b      	ldr	r3, [r3, #0]
 8046646:	693a      	ldr	r2, [r7, #16]
 8046648:	429a      	cmp	r2, r3
 804664a:	d00b      	beq.n	8046664 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 804664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046650:	f383 8811 	msr	BASEPRI, r3
 8046654:	f3bf 8f6f 	isb	sy
 8046658:	f3bf 8f4f 	dsb	sy
 804665c:	60fb      	str	r3, [r7, #12]
}
 804665e:	bf00      	nop
 8046660:	bf00      	nop
 8046662:	e7fd      	b.n	8046660 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8046664:	693b      	ldr	r3, [r7, #16]
 8046666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8046668:	2b00      	cmp	r3, #0
 804666a:	d10b      	bne.n	8046684 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 804666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046670:	f383 8811 	msr	BASEPRI, r3
 8046674:	f3bf 8f6f 	isb	sy
 8046678:	f3bf 8f4f 	dsb	sy
 804667c:	60bb      	str	r3, [r7, #8]
}
 804667e:	bf00      	nop
 8046680:	bf00      	nop
 8046682:	e7fd      	b.n	8046680 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8046684:	693b      	ldr	r3, [r7, #16]
 8046686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8046688:	1e5a      	subs	r2, r3, #1
 804668a:	693b      	ldr	r3, [r7, #16]
 804668c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 804668e:	693b      	ldr	r3, [r7, #16]
 8046690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8046692:	693b      	ldr	r3, [r7, #16]
 8046694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8046696:	429a      	cmp	r2, r3
 8046698:	d02c      	beq.n	80466f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 804669a:	693b      	ldr	r3, [r7, #16]
 804669c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804669e:	2b00      	cmp	r3, #0
 80466a0:	d128      	bne.n	80466f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80466a2:	693b      	ldr	r3, [r7, #16]
 80466a4:	3304      	adds	r3, #4
 80466a6:	4618      	mov	r0, r3
 80466a8:	f7fe fc54 	bl	8044f54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80466ac:	693b      	ldr	r3, [r7, #16]
 80466ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80466b0:	693b      	ldr	r3, [r7, #16]
 80466b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80466b4:	693b      	ldr	r3, [r7, #16]
 80466b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80466b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80466bc:	693b      	ldr	r3, [r7, #16]
 80466be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80466c0:	693b      	ldr	r3, [r7, #16]
 80466c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80466c4:	4b0f      	ldr	r3, [pc, #60]	@ (8046704 <xTaskPriorityDisinherit+0xd8>)
 80466c6:	681b      	ldr	r3, [r3, #0]
 80466c8:	429a      	cmp	r2, r3
 80466ca:	d903      	bls.n	80466d4 <xTaskPriorityDisinherit+0xa8>
 80466cc:	693b      	ldr	r3, [r7, #16]
 80466ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80466d0:	4a0c      	ldr	r2, [pc, #48]	@ (8046704 <xTaskPriorityDisinherit+0xd8>)
 80466d2:	6013      	str	r3, [r2, #0]
 80466d4:	693b      	ldr	r3, [r7, #16]
 80466d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80466d8:	4613      	mov	r3, r2
 80466da:	009b      	lsls	r3, r3, #2
 80466dc:	4413      	add	r3, r2
 80466de:	009b      	lsls	r3, r3, #2
 80466e0:	4a09      	ldr	r2, [pc, #36]	@ (8046708 <xTaskPriorityDisinherit+0xdc>)
 80466e2:	441a      	add	r2, r3
 80466e4:	693b      	ldr	r3, [r7, #16]
 80466e6:	3304      	adds	r3, #4
 80466e8:	4619      	mov	r1, r3
 80466ea:	4610      	mov	r0, r2
 80466ec:	f7fe fbd5 	bl	8044e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80466f0:	2301      	movs	r3, #1
 80466f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80466f4:	697b      	ldr	r3, [r7, #20]
	}
 80466f6:	4618      	mov	r0, r3
 80466f8:	3718      	adds	r7, #24
 80466fa:	46bd      	mov	sp, r7
 80466fc:	bd80      	pop	{r7, pc}
 80466fe:	bf00      	nop
 8046700:	2400082c 	.word	0x2400082c
 8046704:	24000d08 	.word	0x24000d08
 8046708:	24000830 	.word	0x24000830

0804670c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 804670c:	b580      	push	{r7, lr}
 804670e:	b084      	sub	sp, #16
 8046710:	af00      	add	r7, sp, #0
 8046712:	6078      	str	r0, [r7, #4]
 8046714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8046716:	4b21      	ldr	r3, [pc, #132]	@ (804679c <prvAddCurrentTaskToDelayedList+0x90>)
 8046718:	681b      	ldr	r3, [r3, #0]
 804671a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804671c:	4b20      	ldr	r3, [pc, #128]	@ (80467a0 <prvAddCurrentTaskToDelayedList+0x94>)
 804671e:	681b      	ldr	r3, [r3, #0]
 8046720:	3304      	adds	r3, #4
 8046722:	4618      	mov	r0, r3
 8046724:	f7fe fc16 	bl	8044f54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8046728:	687b      	ldr	r3, [r7, #4]
 804672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804672e:	d10a      	bne.n	8046746 <prvAddCurrentTaskToDelayedList+0x3a>
 8046730:	683b      	ldr	r3, [r7, #0]
 8046732:	2b00      	cmp	r3, #0
 8046734:	d007      	beq.n	8046746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8046736:	4b1a      	ldr	r3, [pc, #104]	@ (80467a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8046738:	681b      	ldr	r3, [r3, #0]
 804673a:	3304      	adds	r3, #4
 804673c:	4619      	mov	r1, r3
 804673e:	4819      	ldr	r0, [pc, #100]	@ (80467a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8046740:	f7fe fbab 	bl	8044e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8046744:	e026      	b.n	8046794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8046746:	68fa      	ldr	r2, [r7, #12]
 8046748:	687b      	ldr	r3, [r7, #4]
 804674a:	4413      	add	r3, r2
 804674c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 804674e:	4b14      	ldr	r3, [pc, #80]	@ (80467a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8046750:	681b      	ldr	r3, [r3, #0]
 8046752:	68ba      	ldr	r2, [r7, #8]
 8046754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8046756:	68ba      	ldr	r2, [r7, #8]
 8046758:	68fb      	ldr	r3, [r7, #12]
 804675a:	429a      	cmp	r2, r3
 804675c:	d209      	bcs.n	8046772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804675e:	4b12      	ldr	r3, [pc, #72]	@ (80467a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8046760:	681a      	ldr	r2, [r3, #0]
 8046762:	4b0f      	ldr	r3, [pc, #60]	@ (80467a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8046764:	681b      	ldr	r3, [r3, #0]
 8046766:	3304      	adds	r3, #4
 8046768:	4619      	mov	r1, r3
 804676a:	4610      	mov	r0, r2
 804676c:	f7fe fbb9 	bl	8044ee2 <vListInsert>
}
 8046770:	e010      	b.n	8046794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8046772:	4b0e      	ldr	r3, [pc, #56]	@ (80467ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8046774:	681a      	ldr	r2, [r3, #0]
 8046776:	4b0a      	ldr	r3, [pc, #40]	@ (80467a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8046778:	681b      	ldr	r3, [r3, #0]
 804677a:	3304      	adds	r3, #4
 804677c:	4619      	mov	r1, r3
 804677e:	4610      	mov	r0, r2
 8046780:	f7fe fbaf 	bl	8044ee2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8046784:	4b0a      	ldr	r3, [pc, #40]	@ (80467b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8046786:	681b      	ldr	r3, [r3, #0]
 8046788:	68ba      	ldr	r2, [r7, #8]
 804678a:	429a      	cmp	r2, r3
 804678c:	d202      	bcs.n	8046794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 804678e:	4a08      	ldr	r2, [pc, #32]	@ (80467b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8046790:	68bb      	ldr	r3, [r7, #8]
 8046792:	6013      	str	r3, [r2, #0]
}
 8046794:	bf00      	nop
 8046796:	3710      	adds	r7, #16
 8046798:	46bd      	mov	sp, r7
 804679a:	bd80      	pop	{r7, pc}
 804679c:	24000d04 	.word	0x24000d04
 80467a0:	2400082c 	.word	0x2400082c
 80467a4:	24000cec 	.word	0x24000cec
 80467a8:	24000cbc 	.word	0x24000cbc
 80467ac:	24000cb8 	.word	0x24000cb8
 80467b0:	24000d20 	.word	0x24000d20

080467b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80467b4:	b580      	push	{r7, lr}
 80467b6:	b08a      	sub	sp, #40	@ 0x28
 80467b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80467ba:	2300      	movs	r3, #0
 80467bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80467be:	f000 fb13 	bl	8046de8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80467c2:	4b1d      	ldr	r3, [pc, #116]	@ (8046838 <xTimerCreateTimerTask+0x84>)
 80467c4:	681b      	ldr	r3, [r3, #0]
 80467c6:	2b00      	cmp	r3, #0
 80467c8:	d021      	beq.n	804680e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80467ca:	2300      	movs	r3, #0
 80467cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80467ce:	2300      	movs	r3, #0
 80467d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80467d2:	1d3a      	adds	r2, r7, #4
 80467d4:	f107 0108 	add.w	r1, r7, #8
 80467d8:	f107 030c 	add.w	r3, r7, #12
 80467dc:	4618      	mov	r0, r3
 80467de:	f7fe fb15 	bl	8044e0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80467e2:	6879      	ldr	r1, [r7, #4]
 80467e4:	68bb      	ldr	r3, [r7, #8]
 80467e6:	68fa      	ldr	r2, [r7, #12]
 80467e8:	9202      	str	r2, [sp, #8]
 80467ea:	9301      	str	r3, [sp, #4]
 80467ec:	2302      	movs	r3, #2
 80467ee:	9300      	str	r3, [sp, #0]
 80467f0:	2300      	movs	r3, #0
 80467f2:	460a      	mov	r2, r1
 80467f4:	4911      	ldr	r1, [pc, #68]	@ (804683c <xTimerCreateTimerTask+0x88>)
 80467f6:	4812      	ldr	r0, [pc, #72]	@ (8046840 <xTimerCreateTimerTask+0x8c>)
 80467f8:	f7ff f8d0 	bl	804599c <xTaskCreateStatic>
 80467fc:	4603      	mov	r3, r0
 80467fe:	4a11      	ldr	r2, [pc, #68]	@ (8046844 <xTimerCreateTimerTask+0x90>)
 8046800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8046802:	4b10      	ldr	r3, [pc, #64]	@ (8046844 <xTimerCreateTimerTask+0x90>)
 8046804:	681b      	ldr	r3, [r3, #0]
 8046806:	2b00      	cmp	r3, #0
 8046808:	d001      	beq.n	804680e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 804680a:	2301      	movs	r3, #1
 804680c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 804680e:	697b      	ldr	r3, [r7, #20]
 8046810:	2b00      	cmp	r3, #0
 8046812:	d10b      	bne.n	804682c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8046814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046818:	f383 8811 	msr	BASEPRI, r3
 804681c:	f3bf 8f6f 	isb	sy
 8046820:	f3bf 8f4f 	dsb	sy
 8046824:	613b      	str	r3, [r7, #16]
}
 8046826:	bf00      	nop
 8046828:	bf00      	nop
 804682a:	e7fd      	b.n	8046828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 804682c:	697b      	ldr	r3, [r7, #20]
}
 804682e:	4618      	mov	r0, r3
 8046830:	3718      	adds	r7, #24
 8046832:	46bd      	mov	sp, r7
 8046834:	bd80      	pop	{r7, pc}
 8046836:	bf00      	nop
 8046838:	24000d5c 	.word	0x24000d5c
 804683c:	080477dc 	.word	0x080477dc
 8046840:	08046981 	.word	0x08046981
 8046844:	24000d60 	.word	0x24000d60

08046848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8046848:	b580      	push	{r7, lr}
 804684a:	b08a      	sub	sp, #40	@ 0x28
 804684c:	af00      	add	r7, sp, #0
 804684e:	60f8      	str	r0, [r7, #12]
 8046850:	60b9      	str	r1, [r7, #8]
 8046852:	607a      	str	r2, [r7, #4]
 8046854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8046856:	2300      	movs	r3, #0
 8046858:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 804685a:	68fb      	ldr	r3, [r7, #12]
 804685c:	2b00      	cmp	r3, #0
 804685e:	d10b      	bne.n	8046878 <xTimerGenericCommand+0x30>
	__asm volatile
 8046860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046864:	f383 8811 	msr	BASEPRI, r3
 8046868:	f3bf 8f6f 	isb	sy
 804686c:	f3bf 8f4f 	dsb	sy
 8046870:	623b      	str	r3, [r7, #32]
}
 8046872:	bf00      	nop
 8046874:	bf00      	nop
 8046876:	e7fd      	b.n	8046874 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8046878:	4b19      	ldr	r3, [pc, #100]	@ (80468e0 <xTimerGenericCommand+0x98>)
 804687a:	681b      	ldr	r3, [r3, #0]
 804687c:	2b00      	cmp	r3, #0
 804687e:	d02a      	beq.n	80468d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8046880:	68bb      	ldr	r3, [r7, #8]
 8046882:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8046884:	687b      	ldr	r3, [r7, #4]
 8046886:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8046888:	68fb      	ldr	r3, [r7, #12]
 804688a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 804688c:	68bb      	ldr	r3, [r7, #8]
 804688e:	2b05      	cmp	r3, #5
 8046890:	dc18      	bgt.n	80468c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8046892:	f7ff fead 	bl	80465f0 <xTaskGetSchedulerState>
 8046896:	4603      	mov	r3, r0
 8046898:	2b02      	cmp	r3, #2
 804689a:	d109      	bne.n	80468b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 804689c:	4b10      	ldr	r3, [pc, #64]	@ (80468e0 <xTimerGenericCommand+0x98>)
 804689e:	6818      	ldr	r0, [r3, #0]
 80468a0:	f107 0110 	add.w	r1, r7, #16
 80468a4:	2300      	movs	r3, #0
 80468a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80468a8:	f7fe fc88 	bl	80451bc <xQueueGenericSend>
 80468ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80468ae:	e012      	b.n	80468d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80468b0:	4b0b      	ldr	r3, [pc, #44]	@ (80468e0 <xTimerGenericCommand+0x98>)
 80468b2:	6818      	ldr	r0, [r3, #0]
 80468b4:	f107 0110 	add.w	r1, r7, #16
 80468b8:	2300      	movs	r3, #0
 80468ba:	2200      	movs	r2, #0
 80468bc:	f7fe fc7e 	bl	80451bc <xQueueGenericSend>
 80468c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80468c2:	e008      	b.n	80468d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80468c4:	4b06      	ldr	r3, [pc, #24]	@ (80468e0 <xTimerGenericCommand+0x98>)
 80468c6:	6818      	ldr	r0, [r3, #0]
 80468c8:	f107 0110 	add.w	r1, r7, #16
 80468cc:	2300      	movs	r3, #0
 80468ce:	683a      	ldr	r2, [r7, #0]
 80468d0:	f7fe fd76 	bl	80453c0 <xQueueGenericSendFromISR>
 80468d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80468d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80468d8:	4618      	mov	r0, r3
 80468da:	3728      	adds	r7, #40	@ 0x28
 80468dc:	46bd      	mov	sp, r7
 80468de:	bd80      	pop	{r7, pc}
 80468e0:	24000d5c 	.word	0x24000d5c

080468e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80468e4:	b580      	push	{r7, lr}
 80468e6:	b088      	sub	sp, #32
 80468e8:	af02      	add	r7, sp, #8
 80468ea:	6078      	str	r0, [r7, #4]
 80468ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80468ee:	4b23      	ldr	r3, [pc, #140]	@ (804697c <prvProcessExpiredTimer+0x98>)
 80468f0:	681b      	ldr	r3, [r3, #0]
 80468f2:	68db      	ldr	r3, [r3, #12]
 80468f4:	68db      	ldr	r3, [r3, #12]
 80468f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80468f8:	697b      	ldr	r3, [r7, #20]
 80468fa:	3304      	adds	r3, #4
 80468fc:	4618      	mov	r0, r3
 80468fe:	f7fe fb29 	bl	8044f54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8046902:	697b      	ldr	r3, [r7, #20]
 8046904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046908:	f003 0304 	and.w	r3, r3, #4
 804690c:	2b00      	cmp	r3, #0
 804690e:	d023      	beq.n	8046958 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8046910:	697b      	ldr	r3, [r7, #20]
 8046912:	699a      	ldr	r2, [r3, #24]
 8046914:	687b      	ldr	r3, [r7, #4]
 8046916:	18d1      	adds	r1, r2, r3
 8046918:	687b      	ldr	r3, [r7, #4]
 804691a:	683a      	ldr	r2, [r7, #0]
 804691c:	6978      	ldr	r0, [r7, #20]
 804691e:	f000 f8d5 	bl	8046acc <prvInsertTimerInActiveList>
 8046922:	4603      	mov	r3, r0
 8046924:	2b00      	cmp	r3, #0
 8046926:	d020      	beq.n	804696a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8046928:	2300      	movs	r3, #0
 804692a:	9300      	str	r3, [sp, #0]
 804692c:	2300      	movs	r3, #0
 804692e:	687a      	ldr	r2, [r7, #4]
 8046930:	2100      	movs	r1, #0
 8046932:	6978      	ldr	r0, [r7, #20]
 8046934:	f7ff ff88 	bl	8046848 <xTimerGenericCommand>
 8046938:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 804693a:	693b      	ldr	r3, [r7, #16]
 804693c:	2b00      	cmp	r3, #0
 804693e:	d114      	bne.n	804696a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8046940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046944:	f383 8811 	msr	BASEPRI, r3
 8046948:	f3bf 8f6f 	isb	sy
 804694c:	f3bf 8f4f 	dsb	sy
 8046950:	60fb      	str	r3, [r7, #12]
}
 8046952:	bf00      	nop
 8046954:	bf00      	nop
 8046956:	e7fd      	b.n	8046954 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8046958:	697b      	ldr	r3, [r7, #20]
 804695a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 804695e:	f023 0301 	bic.w	r3, r3, #1
 8046962:	b2da      	uxtb	r2, r3
 8046964:	697b      	ldr	r3, [r7, #20]
 8046966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 804696a:	697b      	ldr	r3, [r7, #20]
 804696c:	6a1b      	ldr	r3, [r3, #32]
 804696e:	6978      	ldr	r0, [r7, #20]
 8046970:	4798      	blx	r3
}
 8046972:	bf00      	nop
 8046974:	3718      	adds	r7, #24
 8046976:	46bd      	mov	sp, r7
 8046978:	bd80      	pop	{r7, pc}
 804697a:	bf00      	nop
 804697c:	24000d54 	.word	0x24000d54

08046980 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8046980:	b580      	push	{r7, lr}
 8046982:	b084      	sub	sp, #16
 8046984:	af00      	add	r7, sp, #0
 8046986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8046988:	f107 0308 	add.w	r3, r7, #8
 804698c:	4618      	mov	r0, r3
 804698e:	f000 f859 	bl	8046a44 <prvGetNextExpireTime>
 8046992:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8046994:	68bb      	ldr	r3, [r7, #8]
 8046996:	4619      	mov	r1, r3
 8046998:	68f8      	ldr	r0, [r7, #12]
 804699a:	f000 f805 	bl	80469a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 804699e:	f000 f8d7 	bl	8046b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80469a2:	bf00      	nop
 80469a4:	e7f0      	b.n	8046988 <prvTimerTask+0x8>
	...

080469a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80469a8:	b580      	push	{r7, lr}
 80469aa:	b084      	sub	sp, #16
 80469ac:	af00      	add	r7, sp, #0
 80469ae:	6078      	str	r0, [r7, #4]
 80469b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80469b2:	f7ff fa37 	bl	8045e24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80469b6:	f107 0308 	add.w	r3, r7, #8
 80469ba:	4618      	mov	r0, r3
 80469bc:	f000 f866 	bl	8046a8c <prvSampleTimeNow>
 80469c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80469c2:	68bb      	ldr	r3, [r7, #8]
 80469c4:	2b00      	cmp	r3, #0
 80469c6:	d130      	bne.n	8046a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80469c8:	683b      	ldr	r3, [r7, #0]
 80469ca:	2b00      	cmp	r3, #0
 80469cc:	d10a      	bne.n	80469e4 <prvProcessTimerOrBlockTask+0x3c>
 80469ce:	687a      	ldr	r2, [r7, #4]
 80469d0:	68fb      	ldr	r3, [r7, #12]
 80469d2:	429a      	cmp	r2, r3
 80469d4:	d806      	bhi.n	80469e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80469d6:	f7ff fa33 	bl	8045e40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80469da:	68f9      	ldr	r1, [r7, #12]
 80469dc:	6878      	ldr	r0, [r7, #4]
 80469de:	f7ff ff81 	bl	80468e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80469e2:	e024      	b.n	8046a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80469e4:	683b      	ldr	r3, [r7, #0]
 80469e6:	2b00      	cmp	r3, #0
 80469e8:	d008      	beq.n	80469fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80469ea:	4b13      	ldr	r3, [pc, #76]	@ (8046a38 <prvProcessTimerOrBlockTask+0x90>)
 80469ec:	681b      	ldr	r3, [r3, #0]
 80469ee:	681b      	ldr	r3, [r3, #0]
 80469f0:	2b00      	cmp	r3, #0
 80469f2:	d101      	bne.n	80469f8 <prvProcessTimerOrBlockTask+0x50>
 80469f4:	2301      	movs	r3, #1
 80469f6:	e000      	b.n	80469fa <prvProcessTimerOrBlockTask+0x52>
 80469f8:	2300      	movs	r3, #0
 80469fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80469fc:	4b0f      	ldr	r3, [pc, #60]	@ (8046a3c <prvProcessTimerOrBlockTask+0x94>)
 80469fe:	6818      	ldr	r0, [r3, #0]
 8046a00:	687a      	ldr	r2, [r7, #4]
 8046a02:	68fb      	ldr	r3, [r7, #12]
 8046a04:	1ad3      	subs	r3, r2, r3
 8046a06:	683a      	ldr	r2, [r7, #0]
 8046a08:	4619      	mov	r1, r3
 8046a0a:	f7fe ff93 	bl	8045934 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8046a0e:	f7ff fa17 	bl	8045e40 <xTaskResumeAll>
 8046a12:	4603      	mov	r3, r0
 8046a14:	2b00      	cmp	r3, #0
 8046a16:	d10a      	bne.n	8046a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8046a18:	4b09      	ldr	r3, [pc, #36]	@ (8046a40 <prvProcessTimerOrBlockTask+0x98>)
 8046a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8046a1e:	601a      	str	r2, [r3, #0]
 8046a20:	f3bf 8f4f 	dsb	sy
 8046a24:	f3bf 8f6f 	isb	sy
}
 8046a28:	e001      	b.n	8046a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8046a2a:	f7ff fa09 	bl	8045e40 <xTaskResumeAll>
}
 8046a2e:	bf00      	nop
 8046a30:	3710      	adds	r7, #16
 8046a32:	46bd      	mov	sp, r7
 8046a34:	bd80      	pop	{r7, pc}
 8046a36:	bf00      	nop
 8046a38:	24000d58 	.word	0x24000d58
 8046a3c:	24000d5c 	.word	0x24000d5c
 8046a40:	e000ed04 	.word	0xe000ed04

08046a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8046a44:	b480      	push	{r7}
 8046a46:	b085      	sub	sp, #20
 8046a48:	af00      	add	r7, sp, #0
 8046a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8046a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8046a88 <prvGetNextExpireTime+0x44>)
 8046a4e:	681b      	ldr	r3, [r3, #0]
 8046a50:	681b      	ldr	r3, [r3, #0]
 8046a52:	2b00      	cmp	r3, #0
 8046a54:	d101      	bne.n	8046a5a <prvGetNextExpireTime+0x16>
 8046a56:	2201      	movs	r2, #1
 8046a58:	e000      	b.n	8046a5c <prvGetNextExpireTime+0x18>
 8046a5a:	2200      	movs	r2, #0
 8046a5c:	687b      	ldr	r3, [r7, #4]
 8046a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8046a60:	687b      	ldr	r3, [r7, #4]
 8046a62:	681b      	ldr	r3, [r3, #0]
 8046a64:	2b00      	cmp	r3, #0
 8046a66:	d105      	bne.n	8046a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8046a68:	4b07      	ldr	r3, [pc, #28]	@ (8046a88 <prvGetNextExpireTime+0x44>)
 8046a6a:	681b      	ldr	r3, [r3, #0]
 8046a6c:	68db      	ldr	r3, [r3, #12]
 8046a6e:	681b      	ldr	r3, [r3, #0]
 8046a70:	60fb      	str	r3, [r7, #12]
 8046a72:	e001      	b.n	8046a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8046a74:	2300      	movs	r3, #0
 8046a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8046a78:	68fb      	ldr	r3, [r7, #12]
}
 8046a7a:	4618      	mov	r0, r3
 8046a7c:	3714      	adds	r7, #20
 8046a7e:	46bd      	mov	sp, r7
 8046a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a84:	4770      	bx	lr
 8046a86:	bf00      	nop
 8046a88:	24000d54 	.word	0x24000d54

08046a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8046a8c:	b580      	push	{r7, lr}
 8046a8e:	b084      	sub	sp, #16
 8046a90:	af00      	add	r7, sp, #0
 8046a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8046a94:	f7ff fa72 	bl	8045f7c <xTaskGetTickCount>
 8046a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8046a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8046ac8 <prvSampleTimeNow+0x3c>)
 8046a9c:	681b      	ldr	r3, [r3, #0]
 8046a9e:	68fa      	ldr	r2, [r7, #12]
 8046aa0:	429a      	cmp	r2, r3
 8046aa2:	d205      	bcs.n	8046ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8046aa4:	f000 f93a 	bl	8046d1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8046aa8:	687b      	ldr	r3, [r7, #4]
 8046aaa:	2201      	movs	r2, #1
 8046aac:	601a      	str	r2, [r3, #0]
 8046aae:	e002      	b.n	8046ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8046ab0:	687b      	ldr	r3, [r7, #4]
 8046ab2:	2200      	movs	r2, #0
 8046ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8046ab6:	4a04      	ldr	r2, [pc, #16]	@ (8046ac8 <prvSampleTimeNow+0x3c>)
 8046ab8:	68fb      	ldr	r3, [r7, #12]
 8046aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8046abc:	68fb      	ldr	r3, [r7, #12]
}
 8046abe:	4618      	mov	r0, r3
 8046ac0:	3710      	adds	r7, #16
 8046ac2:	46bd      	mov	sp, r7
 8046ac4:	bd80      	pop	{r7, pc}
 8046ac6:	bf00      	nop
 8046ac8:	24000d64 	.word	0x24000d64

08046acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8046acc:	b580      	push	{r7, lr}
 8046ace:	b086      	sub	sp, #24
 8046ad0:	af00      	add	r7, sp, #0
 8046ad2:	60f8      	str	r0, [r7, #12]
 8046ad4:	60b9      	str	r1, [r7, #8]
 8046ad6:	607a      	str	r2, [r7, #4]
 8046ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8046ada:	2300      	movs	r3, #0
 8046adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8046ade:	68fb      	ldr	r3, [r7, #12]
 8046ae0:	68ba      	ldr	r2, [r7, #8]
 8046ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8046ae4:	68fb      	ldr	r3, [r7, #12]
 8046ae6:	68fa      	ldr	r2, [r7, #12]
 8046ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8046aea:	68ba      	ldr	r2, [r7, #8]
 8046aec:	687b      	ldr	r3, [r7, #4]
 8046aee:	429a      	cmp	r2, r3
 8046af0:	d812      	bhi.n	8046b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8046af2:	687a      	ldr	r2, [r7, #4]
 8046af4:	683b      	ldr	r3, [r7, #0]
 8046af6:	1ad2      	subs	r2, r2, r3
 8046af8:	68fb      	ldr	r3, [r7, #12]
 8046afa:	699b      	ldr	r3, [r3, #24]
 8046afc:	429a      	cmp	r2, r3
 8046afe:	d302      	bcc.n	8046b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8046b00:	2301      	movs	r3, #1
 8046b02:	617b      	str	r3, [r7, #20]
 8046b04:	e01b      	b.n	8046b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8046b06:	4b10      	ldr	r3, [pc, #64]	@ (8046b48 <prvInsertTimerInActiveList+0x7c>)
 8046b08:	681a      	ldr	r2, [r3, #0]
 8046b0a:	68fb      	ldr	r3, [r7, #12]
 8046b0c:	3304      	adds	r3, #4
 8046b0e:	4619      	mov	r1, r3
 8046b10:	4610      	mov	r0, r2
 8046b12:	f7fe f9e6 	bl	8044ee2 <vListInsert>
 8046b16:	e012      	b.n	8046b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8046b18:	687a      	ldr	r2, [r7, #4]
 8046b1a:	683b      	ldr	r3, [r7, #0]
 8046b1c:	429a      	cmp	r2, r3
 8046b1e:	d206      	bcs.n	8046b2e <prvInsertTimerInActiveList+0x62>
 8046b20:	68ba      	ldr	r2, [r7, #8]
 8046b22:	683b      	ldr	r3, [r7, #0]
 8046b24:	429a      	cmp	r2, r3
 8046b26:	d302      	bcc.n	8046b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8046b28:	2301      	movs	r3, #1
 8046b2a:	617b      	str	r3, [r7, #20]
 8046b2c:	e007      	b.n	8046b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8046b2e:	4b07      	ldr	r3, [pc, #28]	@ (8046b4c <prvInsertTimerInActiveList+0x80>)
 8046b30:	681a      	ldr	r2, [r3, #0]
 8046b32:	68fb      	ldr	r3, [r7, #12]
 8046b34:	3304      	adds	r3, #4
 8046b36:	4619      	mov	r1, r3
 8046b38:	4610      	mov	r0, r2
 8046b3a:	f7fe f9d2 	bl	8044ee2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8046b3e:	697b      	ldr	r3, [r7, #20]
}
 8046b40:	4618      	mov	r0, r3
 8046b42:	3718      	adds	r7, #24
 8046b44:	46bd      	mov	sp, r7
 8046b46:	bd80      	pop	{r7, pc}
 8046b48:	24000d58 	.word	0x24000d58
 8046b4c:	24000d54 	.word	0x24000d54

08046b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8046b50:	b580      	push	{r7, lr}
 8046b52:	b08e      	sub	sp, #56	@ 0x38
 8046b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8046b56:	e0ce      	b.n	8046cf6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8046b58:	687b      	ldr	r3, [r7, #4]
 8046b5a:	2b00      	cmp	r3, #0
 8046b5c:	da19      	bge.n	8046b92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8046b5e:	1d3b      	adds	r3, r7, #4
 8046b60:	3304      	adds	r3, #4
 8046b62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8046b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046b66:	2b00      	cmp	r3, #0
 8046b68:	d10b      	bne.n	8046b82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8046b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046b6e:	f383 8811 	msr	BASEPRI, r3
 8046b72:	f3bf 8f6f 	isb	sy
 8046b76:	f3bf 8f4f 	dsb	sy
 8046b7a:	61fb      	str	r3, [r7, #28]
}
 8046b7c:	bf00      	nop
 8046b7e:	bf00      	nop
 8046b80:	e7fd      	b.n	8046b7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8046b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8046b84:	681b      	ldr	r3, [r3, #0]
 8046b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8046b88:	6850      	ldr	r0, [r2, #4]
 8046b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8046b8c:	6892      	ldr	r2, [r2, #8]
 8046b8e:	4611      	mov	r1, r2
 8046b90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8046b92:	687b      	ldr	r3, [r7, #4]
 8046b94:	2b00      	cmp	r3, #0
 8046b96:	f2c0 80ae 	blt.w	8046cf6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8046b9a:	68fb      	ldr	r3, [r7, #12]
 8046b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8046b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046ba0:	695b      	ldr	r3, [r3, #20]
 8046ba2:	2b00      	cmp	r3, #0
 8046ba4:	d004      	beq.n	8046bb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8046ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046ba8:	3304      	adds	r3, #4
 8046baa:	4618      	mov	r0, r3
 8046bac:	f7fe f9d2 	bl	8044f54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8046bb0:	463b      	mov	r3, r7
 8046bb2:	4618      	mov	r0, r3
 8046bb4:	f7ff ff6a 	bl	8046a8c <prvSampleTimeNow>
 8046bb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8046bba:	687b      	ldr	r3, [r7, #4]
 8046bbc:	2b09      	cmp	r3, #9
 8046bbe:	f200 8097 	bhi.w	8046cf0 <prvProcessReceivedCommands+0x1a0>
 8046bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8046bc8 <prvProcessReceivedCommands+0x78>)
 8046bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046bc8:	08046bf1 	.word	0x08046bf1
 8046bcc:	08046bf1 	.word	0x08046bf1
 8046bd0:	08046bf1 	.word	0x08046bf1
 8046bd4:	08046c67 	.word	0x08046c67
 8046bd8:	08046c7b 	.word	0x08046c7b
 8046bdc:	08046cc7 	.word	0x08046cc7
 8046be0:	08046bf1 	.word	0x08046bf1
 8046be4:	08046bf1 	.word	0x08046bf1
 8046be8:	08046c67 	.word	0x08046c67
 8046bec:	08046c7b 	.word	0x08046c7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8046bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046bf6:	f043 0301 	orr.w	r3, r3, #1
 8046bfa:	b2da      	uxtb	r2, r3
 8046bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046bfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8046c02:	68ba      	ldr	r2, [r7, #8]
 8046c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c06:	699b      	ldr	r3, [r3, #24]
 8046c08:	18d1      	adds	r1, r2, r3
 8046c0a:	68bb      	ldr	r3, [r7, #8]
 8046c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8046c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046c10:	f7ff ff5c 	bl	8046acc <prvInsertTimerInActiveList>
 8046c14:	4603      	mov	r3, r0
 8046c16:	2b00      	cmp	r3, #0
 8046c18:	d06c      	beq.n	8046cf4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8046c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c1c:	6a1b      	ldr	r3, [r3, #32]
 8046c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046c20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8046c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046c28:	f003 0304 	and.w	r3, r3, #4
 8046c2c:	2b00      	cmp	r3, #0
 8046c2e:	d061      	beq.n	8046cf4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8046c30:	68ba      	ldr	r2, [r7, #8]
 8046c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c34:	699b      	ldr	r3, [r3, #24]
 8046c36:	441a      	add	r2, r3
 8046c38:	2300      	movs	r3, #0
 8046c3a:	9300      	str	r3, [sp, #0]
 8046c3c:	2300      	movs	r3, #0
 8046c3e:	2100      	movs	r1, #0
 8046c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046c42:	f7ff fe01 	bl	8046848 <xTimerGenericCommand>
 8046c46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8046c48:	6a3b      	ldr	r3, [r7, #32]
 8046c4a:	2b00      	cmp	r3, #0
 8046c4c:	d152      	bne.n	8046cf4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8046c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046c52:	f383 8811 	msr	BASEPRI, r3
 8046c56:	f3bf 8f6f 	isb	sy
 8046c5a:	f3bf 8f4f 	dsb	sy
 8046c5e:	61bb      	str	r3, [r7, #24]
}
 8046c60:	bf00      	nop
 8046c62:	bf00      	nop
 8046c64:	e7fd      	b.n	8046c62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8046c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046c6c:	f023 0301 	bic.w	r3, r3, #1
 8046c70:	b2da      	uxtb	r2, r3
 8046c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8046c78:	e03d      	b.n	8046cf6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8046c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046c80:	f043 0301 	orr.w	r3, r3, #1
 8046c84:	b2da      	uxtb	r2, r3
 8046c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8046c8c:	68ba      	ldr	r2, [r7, #8]
 8046c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8046c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046c94:	699b      	ldr	r3, [r3, #24]
 8046c96:	2b00      	cmp	r3, #0
 8046c98:	d10b      	bne.n	8046cb2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8046c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046c9e:	f383 8811 	msr	BASEPRI, r3
 8046ca2:	f3bf 8f6f 	isb	sy
 8046ca6:	f3bf 8f4f 	dsb	sy
 8046caa:	617b      	str	r3, [r7, #20]
}
 8046cac:	bf00      	nop
 8046cae:	bf00      	nop
 8046cb0:	e7fd      	b.n	8046cae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8046cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046cb4:	699a      	ldr	r2, [r3, #24]
 8046cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046cb8:	18d1      	adds	r1, r2, r3
 8046cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8046cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046cc0:	f7ff ff04 	bl	8046acc <prvInsertTimerInActiveList>
					break;
 8046cc4:	e017      	b.n	8046cf6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8046cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046ccc:	f003 0302 	and.w	r3, r3, #2
 8046cd0:	2b00      	cmp	r3, #0
 8046cd2:	d103      	bne.n	8046cdc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8046cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8046cd6:	f000 fbe7 	bl	80474a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8046cda:	e00c      	b.n	8046cf6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8046cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046ce2:	f023 0301 	bic.w	r3, r3, #1
 8046ce6:	b2da      	uxtb	r2, r3
 8046ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8046cee:	e002      	b.n	8046cf6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8046cf0:	bf00      	nop
 8046cf2:	e000      	b.n	8046cf6 <prvProcessReceivedCommands+0x1a6>
					break;
 8046cf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8046cf6:	4b08      	ldr	r3, [pc, #32]	@ (8046d18 <prvProcessReceivedCommands+0x1c8>)
 8046cf8:	681b      	ldr	r3, [r3, #0]
 8046cfa:	1d39      	adds	r1, r7, #4
 8046cfc:	2200      	movs	r2, #0
 8046cfe:	4618      	mov	r0, r3
 8046d00:	f7fe fbfc 	bl	80454fc <xQueueReceive>
 8046d04:	4603      	mov	r3, r0
 8046d06:	2b00      	cmp	r3, #0
 8046d08:	f47f af26 	bne.w	8046b58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8046d0c:	bf00      	nop
 8046d0e:	bf00      	nop
 8046d10:	3730      	adds	r7, #48	@ 0x30
 8046d12:	46bd      	mov	sp, r7
 8046d14:	bd80      	pop	{r7, pc}
 8046d16:	bf00      	nop
 8046d18:	24000d5c 	.word	0x24000d5c

08046d1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8046d1c:	b580      	push	{r7, lr}
 8046d1e:	b088      	sub	sp, #32
 8046d20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8046d22:	e049      	b.n	8046db8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8046d24:	4b2e      	ldr	r3, [pc, #184]	@ (8046de0 <prvSwitchTimerLists+0xc4>)
 8046d26:	681b      	ldr	r3, [r3, #0]
 8046d28:	68db      	ldr	r3, [r3, #12]
 8046d2a:	681b      	ldr	r3, [r3, #0]
 8046d2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8046d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8046de0 <prvSwitchTimerLists+0xc4>)
 8046d30:	681b      	ldr	r3, [r3, #0]
 8046d32:	68db      	ldr	r3, [r3, #12]
 8046d34:	68db      	ldr	r3, [r3, #12]
 8046d36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8046d38:	68fb      	ldr	r3, [r7, #12]
 8046d3a:	3304      	adds	r3, #4
 8046d3c:	4618      	mov	r0, r3
 8046d3e:	f7fe f909 	bl	8044f54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8046d42:	68fb      	ldr	r3, [r7, #12]
 8046d44:	6a1b      	ldr	r3, [r3, #32]
 8046d46:	68f8      	ldr	r0, [r7, #12]
 8046d48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8046d4a:	68fb      	ldr	r3, [r7, #12]
 8046d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8046d50:	f003 0304 	and.w	r3, r3, #4
 8046d54:	2b00      	cmp	r3, #0
 8046d56:	d02f      	beq.n	8046db8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8046d58:	68fb      	ldr	r3, [r7, #12]
 8046d5a:	699b      	ldr	r3, [r3, #24]
 8046d5c:	693a      	ldr	r2, [r7, #16]
 8046d5e:	4413      	add	r3, r2
 8046d60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8046d62:	68ba      	ldr	r2, [r7, #8]
 8046d64:	693b      	ldr	r3, [r7, #16]
 8046d66:	429a      	cmp	r2, r3
 8046d68:	d90e      	bls.n	8046d88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8046d6a:	68fb      	ldr	r3, [r7, #12]
 8046d6c:	68ba      	ldr	r2, [r7, #8]
 8046d6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8046d70:	68fb      	ldr	r3, [r7, #12]
 8046d72:	68fa      	ldr	r2, [r7, #12]
 8046d74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8046d76:	4b1a      	ldr	r3, [pc, #104]	@ (8046de0 <prvSwitchTimerLists+0xc4>)
 8046d78:	681a      	ldr	r2, [r3, #0]
 8046d7a:	68fb      	ldr	r3, [r7, #12]
 8046d7c:	3304      	adds	r3, #4
 8046d7e:	4619      	mov	r1, r3
 8046d80:	4610      	mov	r0, r2
 8046d82:	f7fe f8ae 	bl	8044ee2 <vListInsert>
 8046d86:	e017      	b.n	8046db8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8046d88:	2300      	movs	r3, #0
 8046d8a:	9300      	str	r3, [sp, #0]
 8046d8c:	2300      	movs	r3, #0
 8046d8e:	693a      	ldr	r2, [r7, #16]
 8046d90:	2100      	movs	r1, #0
 8046d92:	68f8      	ldr	r0, [r7, #12]
 8046d94:	f7ff fd58 	bl	8046848 <xTimerGenericCommand>
 8046d98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8046d9a:	687b      	ldr	r3, [r7, #4]
 8046d9c:	2b00      	cmp	r3, #0
 8046d9e:	d10b      	bne.n	8046db8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8046da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046da4:	f383 8811 	msr	BASEPRI, r3
 8046da8:	f3bf 8f6f 	isb	sy
 8046dac:	f3bf 8f4f 	dsb	sy
 8046db0:	603b      	str	r3, [r7, #0]
}
 8046db2:	bf00      	nop
 8046db4:	bf00      	nop
 8046db6:	e7fd      	b.n	8046db4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8046db8:	4b09      	ldr	r3, [pc, #36]	@ (8046de0 <prvSwitchTimerLists+0xc4>)
 8046dba:	681b      	ldr	r3, [r3, #0]
 8046dbc:	681b      	ldr	r3, [r3, #0]
 8046dbe:	2b00      	cmp	r3, #0
 8046dc0:	d1b0      	bne.n	8046d24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8046dc2:	4b07      	ldr	r3, [pc, #28]	@ (8046de0 <prvSwitchTimerLists+0xc4>)
 8046dc4:	681b      	ldr	r3, [r3, #0]
 8046dc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8046dc8:	4b06      	ldr	r3, [pc, #24]	@ (8046de4 <prvSwitchTimerLists+0xc8>)
 8046dca:	681b      	ldr	r3, [r3, #0]
 8046dcc:	4a04      	ldr	r2, [pc, #16]	@ (8046de0 <prvSwitchTimerLists+0xc4>)
 8046dce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8046dd0:	4a04      	ldr	r2, [pc, #16]	@ (8046de4 <prvSwitchTimerLists+0xc8>)
 8046dd2:	697b      	ldr	r3, [r7, #20]
 8046dd4:	6013      	str	r3, [r2, #0]
}
 8046dd6:	bf00      	nop
 8046dd8:	3718      	adds	r7, #24
 8046dda:	46bd      	mov	sp, r7
 8046ddc:	bd80      	pop	{r7, pc}
 8046dde:	bf00      	nop
 8046de0:	24000d54 	.word	0x24000d54
 8046de4:	24000d58 	.word	0x24000d58

08046de8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8046de8:	b580      	push	{r7, lr}
 8046dea:	b082      	sub	sp, #8
 8046dec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8046dee:	f000 f96b 	bl	80470c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8046df2:	4b15      	ldr	r3, [pc, #84]	@ (8046e48 <prvCheckForValidListAndQueue+0x60>)
 8046df4:	681b      	ldr	r3, [r3, #0]
 8046df6:	2b00      	cmp	r3, #0
 8046df8:	d120      	bne.n	8046e3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8046dfa:	4814      	ldr	r0, [pc, #80]	@ (8046e4c <prvCheckForValidListAndQueue+0x64>)
 8046dfc:	f7fe f820 	bl	8044e40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8046e00:	4813      	ldr	r0, [pc, #76]	@ (8046e50 <prvCheckForValidListAndQueue+0x68>)
 8046e02:	f7fe f81d 	bl	8044e40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8046e06:	4b13      	ldr	r3, [pc, #76]	@ (8046e54 <prvCheckForValidListAndQueue+0x6c>)
 8046e08:	4a10      	ldr	r2, [pc, #64]	@ (8046e4c <prvCheckForValidListAndQueue+0x64>)
 8046e0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8046e0c:	4b12      	ldr	r3, [pc, #72]	@ (8046e58 <prvCheckForValidListAndQueue+0x70>)
 8046e0e:	4a10      	ldr	r2, [pc, #64]	@ (8046e50 <prvCheckForValidListAndQueue+0x68>)
 8046e10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8046e12:	2300      	movs	r3, #0
 8046e14:	9300      	str	r3, [sp, #0]
 8046e16:	4b11      	ldr	r3, [pc, #68]	@ (8046e5c <prvCheckForValidListAndQueue+0x74>)
 8046e18:	4a11      	ldr	r2, [pc, #68]	@ (8046e60 <prvCheckForValidListAndQueue+0x78>)
 8046e1a:	2110      	movs	r1, #16
 8046e1c:	200a      	movs	r0, #10
 8046e1e:	f7fe f92d 	bl	804507c <xQueueGenericCreateStatic>
 8046e22:	4603      	mov	r3, r0
 8046e24:	4a08      	ldr	r2, [pc, #32]	@ (8046e48 <prvCheckForValidListAndQueue+0x60>)
 8046e26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8046e28:	4b07      	ldr	r3, [pc, #28]	@ (8046e48 <prvCheckForValidListAndQueue+0x60>)
 8046e2a:	681b      	ldr	r3, [r3, #0]
 8046e2c:	2b00      	cmp	r3, #0
 8046e2e:	d005      	beq.n	8046e3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8046e30:	4b05      	ldr	r3, [pc, #20]	@ (8046e48 <prvCheckForValidListAndQueue+0x60>)
 8046e32:	681b      	ldr	r3, [r3, #0]
 8046e34:	490b      	ldr	r1, [pc, #44]	@ (8046e64 <prvCheckForValidListAndQueue+0x7c>)
 8046e36:	4618      	mov	r0, r3
 8046e38:	f7fe fd52 	bl	80458e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8046e3c:	f000 f976 	bl	804712c <vPortExitCritical>
}
 8046e40:	bf00      	nop
 8046e42:	46bd      	mov	sp, r7
 8046e44:	bd80      	pop	{r7, pc}
 8046e46:	bf00      	nop
 8046e48:	24000d5c 	.word	0x24000d5c
 8046e4c:	24000d2c 	.word	0x24000d2c
 8046e50:	24000d40 	.word	0x24000d40
 8046e54:	24000d54 	.word	0x24000d54
 8046e58:	24000d58 	.word	0x24000d58
 8046e5c:	24000e08 	.word	0x24000e08
 8046e60:	24000d68 	.word	0x24000d68
 8046e64:	080477e4 	.word	0x080477e4

08046e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8046e68:	b480      	push	{r7}
 8046e6a:	b085      	sub	sp, #20
 8046e6c:	af00      	add	r7, sp, #0
 8046e6e:	60f8      	str	r0, [r7, #12]
 8046e70:	60b9      	str	r1, [r7, #8]
 8046e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8046e74:	68fb      	ldr	r3, [r7, #12]
 8046e76:	3b04      	subs	r3, #4
 8046e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8046e7a:	68fb      	ldr	r3, [r7, #12]
 8046e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8046e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8046e82:	68fb      	ldr	r3, [r7, #12]
 8046e84:	3b04      	subs	r3, #4
 8046e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8046e88:	68bb      	ldr	r3, [r7, #8]
 8046e8a:	f023 0201 	bic.w	r2, r3, #1
 8046e8e:	68fb      	ldr	r3, [r7, #12]
 8046e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8046e92:	68fb      	ldr	r3, [r7, #12]
 8046e94:	3b04      	subs	r3, #4
 8046e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8046e98:	4a0c      	ldr	r2, [pc, #48]	@ (8046ecc <pxPortInitialiseStack+0x64>)
 8046e9a:	68fb      	ldr	r3, [r7, #12]
 8046e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8046e9e:	68fb      	ldr	r3, [r7, #12]
 8046ea0:	3b14      	subs	r3, #20
 8046ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8046ea4:	687a      	ldr	r2, [r7, #4]
 8046ea6:	68fb      	ldr	r3, [r7, #12]
 8046ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8046eaa:	68fb      	ldr	r3, [r7, #12]
 8046eac:	3b04      	subs	r3, #4
 8046eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8046eb0:	68fb      	ldr	r3, [r7, #12]
 8046eb2:	f06f 0202 	mvn.w	r2, #2
 8046eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8046eb8:	68fb      	ldr	r3, [r7, #12]
 8046eba:	3b20      	subs	r3, #32
 8046ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8046ebe:	68fb      	ldr	r3, [r7, #12]
}
 8046ec0:	4618      	mov	r0, r3
 8046ec2:	3714      	adds	r7, #20
 8046ec4:	46bd      	mov	sp, r7
 8046ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046eca:	4770      	bx	lr
 8046ecc:	08046ed1 	.word	0x08046ed1

08046ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8046ed0:	b480      	push	{r7}
 8046ed2:	b085      	sub	sp, #20
 8046ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8046ed6:	2300      	movs	r3, #0
 8046ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8046eda:	4b13      	ldr	r3, [pc, #76]	@ (8046f28 <prvTaskExitError+0x58>)
 8046edc:	681b      	ldr	r3, [r3, #0]
 8046ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046ee2:	d00b      	beq.n	8046efc <prvTaskExitError+0x2c>
	__asm volatile
 8046ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046ee8:	f383 8811 	msr	BASEPRI, r3
 8046eec:	f3bf 8f6f 	isb	sy
 8046ef0:	f3bf 8f4f 	dsb	sy
 8046ef4:	60fb      	str	r3, [r7, #12]
}
 8046ef6:	bf00      	nop
 8046ef8:	bf00      	nop
 8046efa:	e7fd      	b.n	8046ef8 <prvTaskExitError+0x28>
	__asm volatile
 8046efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046f00:	f383 8811 	msr	BASEPRI, r3
 8046f04:	f3bf 8f6f 	isb	sy
 8046f08:	f3bf 8f4f 	dsb	sy
 8046f0c:	60bb      	str	r3, [r7, #8]
}
 8046f0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8046f10:	bf00      	nop
 8046f12:	687b      	ldr	r3, [r7, #4]
 8046f14:	2b00      	cmp	r3, #0
 8046f16:	d0fc      	beq.n	8046f12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8046f18:	bf00      	nop
 8046f1a:	bf00      	nop
 8046f1c:	3714      	adds	r7, #20
 8046f1e:	46bd      	mov	sp, r7
 8046f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f24:	4770      	bx	lr
 8046f26:	bf00      	nop
 8046f28:	24000010 	.word	0x24000010
 8046f2c:	00000000 	.word	0x00000000

08046f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8046f30:	4b07      	ldr	r3, [pc, #28]	@ (8046f50 <pxCurrentTCBConst2>)
 8046f32:	6819      	ldr	r1, [r3, #0]
 8046f34:	6808      	ldr	r0, [r1, #0]
 8046f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046f3a:	f380 8809 	msr	PSP, r0
 8046f3e:	f3bf 8f6f 	isb	sy
 8046f42:	f04f 0000 	mov.w	r0, #0
 8046f46:	f380 8811 	msr	BASEPRI, r0
 8046f4a:	4770      	bx	lr
 8046f4c:	f3af 8000 	nop.w

08046f50 <pxCurrentTCBConst2>:
 8046f50:	2400082c 	.word	0x2400082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8046f54:	bf00      	nop
 8046f56:	bf00      	nop

08046f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8046f58:	4808      	ldr	r0, [pc, #32]	@ (8046f7c <prvPortStartFirstTask+0x24>)
 8046f5a:	6800      	ldr	r0, [r0, #0]
 8046f5c:	6800      	ldr	r0, [r0, #0]
 8046f5e:	f380 8808 	msr	MSP, r0
 8046f62:	f04f 0000 	mov.w	r0, #0
 8046f66:	f380 8814 	msr	CONTROL, r0
 8046f6a:	b662      	cpsie	i
 8046f6c:	b661      	cpsie	f
 8046f6e:	f3bf 8f4f 	dsb	sy
 8046f72:	f3bf 8f6f 	isb	sy
 8046f76:	df00      	svc	0
 8046f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8046f7a:	bf00      	nop
 8046f7c:	e000ed08 	.word	0xe000ed08

08046f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8046f80:	b580      	push	{r7, lr}
 8046f82:	b086      	sub	sp, #24
 8046f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8046f86:	4b47      	ldr	r3, [pc, #284]	@ (80470a4 <xPortStartScheduler+0x124>)
 8046f88:	681b      	ldr	r3, [r3, #0]
 8046f8a:	4a47      	ldr	r2, [pc, #284]	@ (80470a8 <xPortStartScheduler+0x128>)
 8046f8c:	4293      	cmp	r3, r2
 8046f8e:	d10b      	bne.n	8046fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8046f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046f94:	f383 8811 	msr	BASEPRI, r3
 8046f98:	f3bf 8f6f 	isb	sy
 8046f9c:	f3bf 8f4f 	dsb	sy
 8046fa0:	613b      	str	r3, [r7, #16]
}
 8046fa2:	bf00      	nop
 8046fa4:	bf00      	nop
 8046fa6:	e7fd      	b.n	8046fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8046fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80470a4 <xPortStartScheduler+0x124>)
 8046faa:	681b      	ldr	r3, [r3, #0]
 8046fac:	4a3f      	ldr	r2, [pc, #252]	@ (80470ac <xPortStartScheduler+0x12c>)
 8046fae:	4293      	cmp	r3, r2
 8046fb0:	d10b      	bne.n	8046fca <xPortStartScheduler+0x4a>
	__asm volatile
 8046fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8046fb6:	f383 8811 	msr	BASEPRI, r3
 8046fba:	f3bf 8f6f 	isb	sy
 8046fbe:	f3bf 8f4f 	dsb	sy
 8046fc2:	60fb      	str	r3, [r7, #12]
}
 8046fc4:	bf00      	nop
 8046fc6:	bf00      	nop
 8046fc8:	e7fd      	b.n	8046fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8046fca:	4b39      	ldr	r3, [pc, #228]	@ (80470b0 <xPortStartScheduler+0x130>)
 8046fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8046fce:	697b      	ldr	r3, [r7, #20]
 8046fd0:	781b      	ldrb	r3, [r3, #0]
 8046fd2:	b2db      	uxtb	r3, r3
 8046fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8046fd6:	697b      	ldr	r3, [r7, #20]
 8046fd8:	22ff      	movs	r2, #255	@ 0xff
 8046fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8046fdc:	697b      	ldr	r3, [r7, #20]
 8046fde:	781b      	ldrb	r3, [r3, #0]
 8046fe0:	b2db      	uxtb	r3, r3
 8046fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8046fe4:	78fb      	ldrb	r3, [r7, #3]
 8046fe6:	b2db      	uxtb	r3, r3
 8046fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8046fec:	b2da      	uxtb	r2, r3
 8046fee:	4b31      	ldr	r3, [pc, #196]	@ (80470b4 <xPortStartScheduler+0x134>)
 8046ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8046ff2:	4b31      	ldr	r3, [pc, #196]	@ (80470b8 <xPortStartScheduler+0x138>)
 8046ff4:	2207      	movs	r2, #7
 8046ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8046ff8:	e009      	b.n	804700e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8046ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80470b8 <xPortStartScheduler+0x138>)
 8046ffc:	681b      	ldr	r3, [r3, #0]
 8046ffe:	3b01      	subs	r3, #1
 8047000:	4a2d      	ldr	r2, [pc, #180]	@ (80470b8 <xPortStartScheduler+0x138>)
 8047002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8047004:	78fb      	ldrb	r3, [r7, #3]
 8047006:	b2db      	uxtb	r3, r3
 8047008:	005b      	lsls	r3, r3, #1
 804700a:	b2db      	uxtb	r3, r3
 804700c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 804700e:	78fb      	ldrb	r3, [r7, #3]
 8047010:	b2db      	uxtb	r3, r3
 8047012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8047016:	2b80      	cmp	r3, #128	@ 0x80
 8047018:	d0ef      	beq.n	8046ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 804701a:	4b27      	ldr	r3, [pc, #156]	@ (80470b8 <xPortStartScheduler+0x138>)
 804701c:	681b      	ldr	r3, [r3, #0]
 804701e:	f1c3 0307 	rsb	r3, r3, #7
 8047022:	2b04      	cmp	r3, #4
 8047024:	d00b      	beq.n	804703e <xPortStartScheduler+0xbe>
	__asm volatile
 8047026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804702a:	f383 8811 	msr	BASEPRI, r3
 804702e:	f3bf 8f6f 	isb	sy
 8047032:	f3bf 8f4f 	dsb	sy
 8047036:	60bb      	str	r3, [r7, #8]
}
 8047038:	bf00      	nop
 804703a:	bf00      	nop
 804703c:	e7fd      	b.n	804703a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 804703e:	4b1e      	ldr	r3, [pc, #120]	@ (80470b8 <xPortStartScheduler+0x138>)
 8047040:	681b      	ldr	r3, [r3, #0]
 8047042:	021b      	lsls	r3, r3, #8
 8047044:	4a1c      	ldr	r2, [pc, #112]	@ (80470b8 <xPortStartScheduler+0x138>)
 8047046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8047048:	4b1b      	ldr	r3, [pc, #108]	@ (80470b8 <xPortStartScheduler+0x138>)
 804704a:	681b      	ldr	r3, [r3, #0]
 804704c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8047050:	4a19      	ldr	r2, [pc, #100]	@ (80470b8 <xPortStartScheduler+0x138>)
 8047052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8047054:	687b      	ldr	r3, [r7, #4]
 8047056:	b2da      	uxtb	r2, r3
 8047058:	697b      	ldr	r3, [r7, #20]
 804705a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 804705c:	4b17      	ldr	r3, [pc, #92]	@ (80470bc <xPortStartScheduler+0x13c>)
 804705e:	681b      	ldr	r3, [r3, #0]
 8047060:	4a16      	ldr	r2, [pc, #88]	@ (80470bc <xPortStartScheduler+0x13c>)
 8047062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8047066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8047068:	4b14      	ldr	r3, [pc, #80]	@ (80470bc <xPortStartScheduler+0x13c>)
 804706a:	681b      	ldr	r3, [r3, #0]
 804706c:	4a13      	ldr	r2, [pc, #76]	@ (80470bc <xPortStartScheduler+0x13c>)
 804706e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8047072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8047074:	f000 f8da 	bl	804722c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8047078:	4b11      	ldr	r3, [pc, #68]	@ (80470c0 <xPortStartScheduler+0x140>)
 804707a:	2200      	movs	r2, #0
 804707c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 804707e:	f000 f8f9 	bl	8047274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8047082:	4b10      	ldr	r3, [pc, #64]	@ (80470c4 <xPortStartScheduler+0x144>)
 8047084:	681b      	ldr	r3, [r3, #0]
 8047086:	4a0f      	ldr	r2, [pc, #60]	@ (80470c4 <xPortStartScheduler+0x144>)
 8047088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 804708c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 804708e:	f7ff ff63 	bl	8046f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8047092:	f7ff f83d 	bl	8046110 <vTaskSwitchContext>
	prvTaskExitError();
 8047096:	f7ff ff1b 	bl	8046ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 804709a:	2300      	movs	r3, #0
}
 804709c:	4618      	mov	r0, r3
 804709e:	3718      	adds	r7, #24
 80470a0:	46bd      	mov	sp, r7
 80470a2:	bd80      	pop	{r7, pc}
 80470a4:	e000ed00 	.word	0xe000ed00
 80470a8:	410fc271 	.word	0x410fc271
 80470ac:	410fc270 	.word	0x410fc270
 80470b0:	e000e400 	.word	0xe000e400
 80470b4:	24000e58 	.word	0x24000e58
 80470b8:	24000e5c 	.word	0x24000e5c
 80470bc:	e000ed20 	.word	0xe000ed20
 80470c0:	24000010 	.word	0x24000010
 80470c4:	e000ef34 	.word	0xe000ef34

080470c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80470c8:	b480      	push	{r7}
 80470ca:	b083      	sub	sp, #12
 80470cc:	af00      	add	r7, sp, #0
	__asm volatile
 80470ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80470d2:	f383 8811 	msr	BASEPRI, r3
 80470d6:	f3bf 8f6f 	isb	sy
 80470da:	f3bf 8f4f 	dsb	sy
 80470de:	607b      	str	r3, [r7, #4]
}
 80470e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80470e2:	4b10      	ldr	r3, [pc, #64]	@ (8047124 <vPortEnterCritical+0x5c>)
 80470e4:	681b      	ldr	r3, [r3, #0]
 80470e6:	3301      	adds	r3, #1
 80470e8:	4a0e      	ldr	r2, [pc, #56]	@ (8047124 <vPortEnterCritical+0x5c>)
 80470ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80470ec:	4b0d      	ldr	r3, [pc, #52]	@ (8047124 <vPortEnterCritical+0x5c>)
 80470ee:	681b      	ldr	r3, [r3, #0]
 80470f0:	2b01      	cmp	r3, #1
 80470f2:	d110      	bne.n	8047116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80470f4:	4b0c      	ldr	r3, [pc, #48]	@ (8047128 <vPortEnterCritical+0x60>)
 80470f6:	681b      	ldr	r3, [r3, #0]
 80470f8:	b2db      	uxtb	r3, r3
 80470fa:	2b00      	cmp	r3, #0
 80470fc:	d00b      	beq.n	8047116 <vPortEnterCritical+0x4e>
	__asm volatile
 80470fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047102:	f383 8811 	msr	BASEPRI, r3
 8047106:	f3bf 8f6f 	isb	sy
 804710a:	f3bf 8f4f 	dsb	sy
 804710e:	603b      	str	r3, [r7, #0]
}
 8047110:	bf00      	nop
 8047112:	bf00      	nop
 8047114:	e7fd      	b.n	8047112 <vPortEnterCritical+0x4a>
	}
}
 8047116:	bf00      	nop
 8047118:	370c      	adds	r7, #12
 804711a:	46bd      	mov	sp, r7
 804711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047120:	4770      	bx	lr
 8047122:	bf00      	nop
 8047124:	24000010 	.word	0x24000010
 8047128:	e000ed04 	.word	0xe000ed04

0804712c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 804712c:	b480      	push	{r7}
 804712e:	b083      	sub	sp, #12
 8047130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8047132:	4b12      	ldr	r3, [pc, #72]	@ (804717c <vPortExitCritical+0x50>)
 8047134:	681b      	ldr	r3, [r3, #0]
 8047136:	2b00      	cmp	r3, #0
 8047138:	d10b      	bne.n	8047152 <vPortExitCritical+0x26>
	__asm volatile
 804713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 804713e:	f383 8811 	msr	BASEPRI, r3
 8047142:	f3bf 8f6f 	isb	sy
 8047146:	f3bf 8f4f 	dsb	sy
 804714a:	607b      	str	r3, [r7, #4]
}
 804714c:	bf00      	nop
 804714e:	bf00      	nop
 8047150:	e7fd      	b.n	804714e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8047152:	4b0a      	ldr	r3, [pc, #40]	@ (804717c <vPortExitCritical+0x50>)
 8047154:	681b      	ldr	r3, [r3, #0]
 8047156:	3b01      	subs	r3, #1
 8047158:	4a08      	ldr	r2, [pc, #32]	@ (804717c <vPortExitCritical+0x50>)
 804715a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 804715c:	4b07      	ldr	r3, [pc, #28]	@ (804717c <vPortExitCritical+0x50>)
 804715e:	681b      	ldr	r3, [r3, #0]
 8047160:	2b00      	cmp	r3, #0
 8047162:	d105      	bne.n	8047170 <vPortExitCritical+0x44>
 8047164:	2300      	movs	r3, #0
 8047166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8047168:	683b      	ldr	r3, [r7, #0]
 804716a:	f383 8811 	msr	BASEPRI, r3
}
 804716e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8047170:	bf00      	nop
 8047172:	370c      	adds	r7, #12
 8047174:	46bd      	mov	sp, r7
 8047176:	f85d 7b04 	ldr.w	r7, [sp], #4
 804717a:	4770      	bx	lr
 804717c:	24000010 	.word	0x24000010

08047180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8047180:	f3ef 8009 	mrs	r0, PSP
 8047184:	f3bf 8f6f 	isb	sy
 8047188:	4b15      	ldr	r3, [pc, #84]	@ (80471e0 <pxCurrentTCBConst>)
 804718a:	681a      	ldr	r2, [r3, #0]
 804718c:	f01e 0f10 	tst.w	lr, #16
 8047190:	bf08      	it	eq
 8047192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8047196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804719a:	6010      	str	r0, [r2, #0]
 804719c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80471a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80471a4:	f380 8811 	msr	BASEPRI, r0
 80471a8:	f3bf 8f4f 	dsb	sy
 80471ac:	f3bf 8f6f 	isb	sy
 80471b0:	f7fe ffae 	bl	8046110 <vTaskSwitchContext>
 80471b4:	f04f 0000 	mov.w	r0, #0
 80471b8:	f380 8811 	msr	BASEPRI, r0
 80471bc:	bc09      	pop	{r0, r3}
 80471be:	6819      	ldr	r1, [r3, #0]
 80471c0:	6808      	ldr	r0, [r1, #0]
 80471c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80471c6:	f01e 0f10 	tst.w	lr, #16
 80471ca:	bf08      	it	eq
 80471cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80471d0:	f380 8809 	msr	PSP, r0
 80471d4:	f3bf 8f6f 	isb	sy
 80471d8:	4770      	bx	lr
 80471da:	bf00      	nop
 80471dc:	f3af 8000 	nop.w

080471e0 <pxCurrentTCBConst>:
 80471e0:	2400082c 	.word	0x2400082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80471e4:	bf00      	nop
 80471e6:	bf00      	nop

080471e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80471e8:	b580      	push	{r7, lr}
 80471ea:	b082      	sub	sp, #8
 80471ec:	af00      	add	r7, sp, #0
	__asm volatile
 80471ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80471f2:	f383 8811 	msr	BASEPRI, r3
 80471f6:	f3bf 8f6f 	isb	sy
 80471fa:	f3bf 8f4f 	dsb	sy
 80471fe:	607b      	str	r3, [r7, #4]
}
 8047200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8047202:	f7fe fecb 	bl	8045f9c <xTaskIncrementTick>
 8047206:	4603      	mov	r3, r0
 8047208:	2b00      	cmp	r3, #0
 804720a:	d003      	beq.n	8047214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 804720c:	4b06      	ldr	r3, [pc, #24]	@ (8047228 <xPortSysTickHandler+0x40>)
 804720e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8047212:	601a      	str	r2, [r3, #0]
 8047214:	2300      	movs	r3, #0
 8047216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8047218:	683b      	ldr	r3, [r7, #0]
 804721a:	f383 8811 	msr	BASEPRI, r3
}
 804721e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8047220:	bf00      	nop
 8047222:	3708      	adds	r7, #8
 8047224:	46bd      	mov	sp, r7
 8047226:	bd80      	pop	{r7, pc}
 8047228:	e000ed04 	.word	0xe000ed04

0804722c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 804722c:	b480      	push	{r7}
 804722e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8047230:	4b0b      	ldr	r3, [pc, #44]	@ (8047260 <vPortSetupTimerInterrupt+0x34>)
 8047232:	2200      	movs	r2, #0
 8047234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8047236:	4b0b      	ldr	r3, [pc, #44]	@ (8047264 <vPortSetupTimerInterrupt+0x38>)
 8047238:	2200      	movs	r2, #0
 804723a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 804723c:	4b0a      	ldr	r3, [pc, #40]	@ (8047268 <vPortSetupTimerInterrupt+0x3c>)
 804723e:	681b      	ldr	r3, [r3, #0]
 8047240:	4a0a      	ldr	r2, [pc, #40]	@ (804726c <vPortSetupTimerInterrupt+0x40>)
 8047242:	fba2 2303 	umull	r2, r3, r2, r3
 8047246:	099b      	lsrs	r3, r3, #6
 8047248:	4a09      	ldr	r2, [pc, #36]	@ (8047270 <vPortSetupTimerInterrupt+0x44>)
 804724a:	3b01      	subs	r3, #1
 804724c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 804724e:	4b04      	ldr	r3, [pc, #16]	@ (8047260 <vPortSetupTimerInterrupt+0x34>)
 8047250:	2207      	movs	r2, #7
 8047252:	601a      	str	r2, [r3, #0]
}
 8047254:	bf00      	nop
 8047256:	46bd      	mov	sp, r7
 8047258:	f85d 7b04 	ldr.w	r7, [sp], #4
 804725c:	4770      	bx	lr
 804725e:	bf00      	nop
 8047260:	e000e010 	.word	0xe000e010
 8047264:	e000e018 	.word	0xe000e018
 8047268:	24000000 	.word	0x24000000
 804726c:	10624dd3 	.word	0x10624dd3
 8047270:	e000e014 	.word	0xe000e014

08047274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8047274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8047284 <vPortEnableVFP+0x10>
 8047278:	6801      	ldr	r1, [r0, #0]
 804727a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 804727e:	6001      	str	r1, [r0, #0]
 8047280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8047282:	bf00      	nop
 8047284:	e000ed88 	.word	0xe000ed88

08047288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8047288:	b480      	push	{r7}
 804728a:	b085      	sub	sp, #20
 804728c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 804728e:	f3ef 8305 	mrs	r3, IPSR
 8047292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8047294:	68fb      	ldr	r3, [r7, #12]
 8047296:	2b0f      	cmp	r3, #15
 8047298:	d915      	bls.n	80472c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 804729a:	4a18      	ldr	r2, [pc, #96]	@ (80472fc <vPortValidateInterruptPriority+0x74>)
 804729c:	68fb      	ldr	r3, [r7, #12]
 804729e:	4413      	add	r3, r2
 80472a0:	781b      	ldrb	r3, [r3, #0]
 80472a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80472a4:	4b16      	ldr	r3, [pc, #88]	@ (8047300 <vPortValidateInterruptPriority+0x78>)
 80472a6:	781b      	ldrb	r3, [r3, #0]
 80472a8:	7afa      	ldrb	r2, [r7, #11]
 80472aa:	429a      	cmp	r2, r3
 80472ac:	d20b      	bcs.n	80472c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80472ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80472b2:	f383 8811 	msr	BASEPRI, r3
 80472b6:	f3bf 8f6f 	isb	sy
 80472ba:	f3bf 8f4f 	dsb	sy
 80472be:	607b      	str	r3, [r7, #4]
}
 80472c0:	bf00      	nop
 80472c2:	bf00      	nop
 80472c4:	e7fd      	b.n	80472c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80472c6:	4b0f      	ldr	r3, [pc, #60]	@ (8047304 <vPortValidateInterruptPriority+0x7c>)
 80472c8:	681b      	ldr	r3, [r3, #0]
 80472ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80472ce:	4b0e      	ldr	r3, [pc, #56]	@ (8047308 <vPortValidateInterruptPriority+0x80>)
 80472d0:	681b      	ldr	r3, [r3, #0]
 80472d2:	429a      	cmp	r2, r3
 80472d4:	d90b      	bls.n	80472ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80472d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80472da:	f383 8811 	msr	BASEPRI, r3
 80472de:	f3bf 8f6f 	isb	sy
 80472e2:	f3bf 8f4f 	dsb	sy
 80472e6:	603b      	str	r3, [r7, #0]
}
 80472e8:	bf00      	nop
 80472ea:	bf00      	nop
 80472ec:	e7fd      	b.n	80472ea <vPortValidateInterruptPriority+0x62>
	}
 80472ee:	bf00      	nop
 80472f0:	3714      	adds	r7, #20
 80472f2:	46bd      	mov	sp, r7
 80472f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80472f8:	4770      	bx	lr
 80472fa:	bf00      	nop
 80472fc:	e000e3f0 	.word	0xe000e3f0
 8047300:	24000e58 	.word	0x24000e58
 8047304:	e000ed0c 	.word	0xe000ed0c
 8047308:	24000e5c 	.word	0x24000e5c

0804730c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 804730c:	b580      	push	{r7, lr}
 804730e:	b08a      	sub	sp, #40	@ 0x28
 8047310:	af00      	add	r7, sp, #0
 8047312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8047314:	2300      	movs	r3, #0
 8047316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8047318:	f7fe fd84 	bl	8045e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 804731c:	4b5c      	ldr	r3, [pc, #368]	@ (8047490 <pvPortMalloc+0x184>)
 804731e:	681b      	ldr	r3, [r3, #0]
 8047320:	2b00      	cmp	r3, #0
 8047322:	d101      	bne.n	8047328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8047324:	f000 f924 	bl	8047570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8047328:	4b5a      	ldr	r3, [pc, #360]	@ (8047494 <pvPortMalloc+0x188>)
 804732a:	681a      	ldr	r2, [r3, #0]
 804732c:	687b      	ldr	r3, [r7, #4]
 804732e:	4013      	ands	r3, r2
 8047330:	2b00      	cmp	r3, #0
 8047332:	f040 8095 	bne.w	8047460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8047336:	687b      	ldr	r3, [r7, #4]
 8047338:	2b00      	cmp	r3, #0
 804733a:	d01e      	beq.n	804737a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 804733c:	2208      	movs	r2, #8
 804733e:	687b      	ldr	r3, [r7, #4]
 8047340:	4413      	add	r3, r2
 8047342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8047344:	687b      	ldr	r3, [r7, #4]
 8047346:	f003 0307 	and.w	r3, r3, #7
 804734a:	2b00      	cmp	r3, #0
 804734c:	d015      	beq.n	804737a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 804734e:	687b      	ldr	r3, [r7, #4]
 8047350:	f023 0307 	bic.w	r3, r3, #7
 8047354:	3308      	adds	r3, #8
 8047356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8047358:	687b      	ldr	r3, [r7, #4]
 804735a:	f003 0307 	and.w	r3, r3, #7
 804735e:	2b00      	cmp	r3, #0
 8047360:	d00b      	beq.n	804737a <pvPortMalloc+0x6e>
	__asm volatile
 8047362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047366:	f383 8811 	msr	BASEPRI, r3
 804736a:	f3bf 8f6f 	isb	sy
 804736e:	f3bf 8f4f 	dsb	sy
 8047372:	617b      	str	r3, [r7, #20]
}
 8047374:	bf00      	nop
 8047376:	bf00      	nop
 8047378:	e7fd      	b.n	8047376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 804737a:	687b      	ldr	r3, [r7, #4]
 804737c:	2b00      	cmp	r3, #0
 804737e:	d06f      	beq.n	8047460 <pvPortMalloc+0x154>
 8047380:	4b45      	ldr	r3, [pc, #276]	@ (8047498 <pvPortMalloc+0x18c>)
 8047382:	681b      	ldr	r3, [r3, #0]
 8047384:	687a      	ldr	r2, [r7, #4]
 8047386:	429a      	cmp	r2, r3
 8047388:	d86a      	bhi.n	8047460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 804738a:	4b44      	ldr	r3, [pc, #272]	@ (804749c <pvPortMalloc+0x190>)
 804738c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 804738e:	4b43      	ldr	r3, [pc, #268]	@ (804749c <pvPortMalloc+0x190>)
 8047390:	681b      	ldr	r3, [r3, #0]
 8047392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8047394:	e004      	b.n	80473a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8047396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 804739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804739c:	681b      	ldr	r3, [r3, #0]
 804739e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80473a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80473a2:	685b      	ldr	r3, [r3, #4]
 80473a4:	687a      	ldr	r2, [r7, #4]
 80473a6:	429a      	cmp	r2, r3
 80473a8:	d903      	bls.n	80473b2 <pvPortMalloc+0xa6>
 80473aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80473ac:	681b      	ldr	r3, [r3, #0]
 80473ae:	2b00      	cmp	r3, #0
 80473b0:	d1f1      	bne.n	8047396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80473b2:	4b37      	ldr	r3, [pc, #220]	@ (8047490 <pvPortMalloc+0x184>)
 80473b4:	681b      	ldr	r3, [r3, #0]
 80473b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80473b8:	429a      	cmp	r2, r3
 80473ba:	d051      	beq.n	8047460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80473bc:	6a3b      	ldr	r3, [r7, #32]
 80473be:	681b      	ldr	r3, [r3, #0]
 80473c0:	2208      	movs	r2, #8
 80473c2:	4413      	add	r3, r2
 80473c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80473c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80473c8:	681a      	ldr	r2, [r3, #0]
 80473ca:	6a3b      	ldr	r3, [r7, #32]
 80473cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80473ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80473d0:	685a      	ldr	r2, [r3, #4]
 80473d2:	687b      	ldr	r3, [r7, #4]
 80473d4:	1ad2      	subs	r2, r2, r3
 80473d6:	2308      	movs	r3, #8
 80473d8:	005b      	lsls	r3, r3, #1
 80473da:	429a      	cmp	r2, r3
 80473dc:	d920      	bls.n	8047420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80473de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	4413      	add	r3, r2
 80473e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80473e6:	69bb      	ldr	r3, [r7, #24]
 80473e8:	f003 0307 	and.w	r3, r3, #7
 80473ec:	2b00      	cmp	r3, #0
 80473ee:	d00b      	beq.n	8047408 <pvPortMalloc+0xfc>
	__asm volatile
 80473f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80473f4:	f383 8811 	msr	BASEPRI, r3
 80473f8:	f3bf 8f6f 	isb	sy
 80473fc:	f3bf 8f4f 	dsb	sy
 8047400:	613b      	str	r3, [r7, #16]
}
 8047402:	bf00      	nop
 8047404:	bf00      	nop
 8047406:	e7fd      	b.n	8047404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8047408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804740a:	685a      	ldr	r2, [r3, #4]
 804740c:	687b      	ldr	r3, [r7, #4]
 804740e:	1ad2      	subs	r2, r2, r3
 8047410:	69bb      	ldr	r3, [r7, #24]
 8047412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8047414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047416:	687a      	ldr	r2, [r7, #4]
 8047418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 804741a:	69b8      	ldr	r0, [r7, #24]
 804741c:	f000 f90a 	bl	8047634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8047420:	4b1d      	ldr	r3, [pc, #116]	@ (8047498 <pvPortMalloc+0x18c>)
 8047422:	681a      	ldr	r2, [r3, #0]
 8047424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047426:	685b      	ldr	r3, [r3, #4]
 8047428:	1ad3      	subs	r3, r2, r3
 804742a:	4a1b      	ldr	r2, [pc, #108]	@ (8047498 <pvPortMalloc+0x18c>)
 804742c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 804742e:	4b1a      	ldr	r3, [pc, #104]	@ (8047498 <pvPortMalloc+0x18c>)
 8047430:	681a      	ldr	r2, [r3, #0]
 8047432:	4b1b      	ldr	r3, [pc, #108]	@ (80474a0 <pvPortMalloc+0x194>)
 8047434:	681b      	ldr	r3, [r3, #0]
 8047436:	429a      	cmp	r2, r3
 8047438:	d203      	bcs.n	8047442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 804743a:	4b17      	ldr	r3, [pc, #92]	@ (8047498 <pvPortMalloc+0x18c>)
 804743c:	681b      	ldr	r3, [r3, #0]
 804743e:	4a18      	ldr	r2, [pc, #96]	@ (80474a0 <pvPortMalloc+0x194>)
 8047440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8047442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047444:	685a      	ldr	r2, [r3, #4]
 8047446:	4b13      	ldr	r3, [pc, #76]	@ (8047494 <pvPortMalloc+0x188>)
 8047448:	681b      	ldr	r3, [r3, #0]
 804744a:	431a      	orrs	r2, r3
 804744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804744e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8047450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047452:	2200      	movs	r2, #0
 8047454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8047456:	4b13      	ldr	r3, [pc, #76]	@ (80474a4 <pvPortMalloc+0x198>)
 8047458:	681b      	ldr	r3, [r3, #0]
 804745a:	3301      	adds	r3, #1
 804745c:	4a11      	ldr	r2, [pc, #68]	@ (80474a4 <pvPortMalloc+0x198>)
 804745e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8047460:	f7fe fcee 	bl	8045e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8047464:	69fb      	ldr	r3, [r7, #28]
 8047466:	f003 0307 	and.w	r3, r3, #7
 804746a:	2b00      	cmp	r3, #0
 804746c:	d00b      	beq.n	8047486 <pvPortMalloc+0x17a>
	__asm volatile
 804746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8047472:	f383 8811 	msr	BASEPRI, r3
 8047476:	f3bf 8f6f 	isb	sy
 804747a:	f3bf 8f4f 	dsb	sy
 804747e:	60fb      	str	r3, [r7, #12]
}
 8047480:	bf00      	nop
 8047482:	bf00      	nop
 8047484:	e7fd      	b.n	8047482 <pvPortMalloc+0x176>
	return pvReturn;
 8047486:	69fb      	ldr	r3, [r7, #28]
}
 8047488:	4618      	mov	r0, r3
 804748a:	3728      	adds	r7, #40	@ 0x28
 804748c:	46bd      	mov	sp, r7
 804748e:	bd80      	pop	{r7, pc}
 8047490:	24004a68 	.word	0x24004a68
 8047494:	24004a7c 	.word	0x24004a7c
 8047498:	24004a6c 	.word	0x24004a6c
 804749c:	24004a60 	.word	0x24004a60
 80474a0:	24004a70 	.word	0x24004a70
 80474a4:	24004a74 	.word	0x24004a74

080474a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80474a8:	b580      	push	{r7, lr}
 80474aa:	b086      	sub	sp, #24
 80474ac:	af00      	add	r7, sp, #0
 80474ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80474b0:	687b      	ldr	r3, [r7, #4]
 80474b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80474b4:	687b      	ldr	r3, [r7, #4]
 80474b6:	2b00      	cmp	r3, #0
 80474b8:	d04f      	beq.n	804755a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80474ba:	2308      	movs	r3, #8
 80474bc:	425b      	negs	r3, r3
 80474be:	697a      	ldr	r2, [r7, #20]
 80474c0:	4413      	add	r3, r2
 80474c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80474c4:	697b      	ldr	r3, [r7, #20]
 80474c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80474c8:	693b      	ldr	r3, [r7, #16]
 80474ca:	685a      	ldr	r2, [r3, #4]
 80474cc:	4b25      	ldr	r3, [pc, #148]	@ (8047564 <vPortFree+0xbc>)
 80474ce:	681b      	ldr	r3, [r3, #0]
 80474d0:	4013      	ands	r3, r2
 80474d2:	2b00      	cmp	r3, #0
 80474d4:	d10b      	bne.n	80474ee <vPortFree+0x46>
	__asm volatile
 80474d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80474da:	f383 8811 	msr	BASEPRI, r3
 80474de:	f3bf 8f6f 	isb	sy
 80474e2:	f3bf 8f4f 	dsb	sy
 80474e6:	60fb      	str	r3, [r7, #12]
}
 80474e8:	bf00      	nop
 80474ea:	bf00      	nop
 80474ec:	e7fd      	b.n	80474ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80474ee:	693b      	ldr	r3, [r7, #16]
 80474f0:	681b      	ldr	r3, [r3, #0]
 80474f2:	2b00      	cmp	r3, #0
 80474f4:	d00b      	beq.n	804750e <vPortFree+0x66>
	__asm volatile
 80474f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80474fa:	f383 8811 	msr	BASEPRI, r3
 80474fe:	f3bf 8f6f 	isb	sy
 8047502:	f3bf 8f4f 	dsb	sy
 8047506:	60bb      	str	r3, [r7, #8]
}
 8047508:	bf00      	nop
 804750a:	bf00      	nop
 804750c:	e7fd      	b.n	804750a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 804750e:	693b      	ldr	r3, [r7, #16]
 8047510:	685a      	ldr	r2, [r3, #4]
 8047512:	4b14      	ldr	r3, [pc, #80]	@ (8047564 <vPortFree+0xbc>)
 8047514:	681b      	ldr	r3, [r3, #0]
 8047516:	4013      	ands	r3, r2
 8047518:	2b00      	cmp	r3, #0
 804751a:	d01e      	beq.n	804755a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 804751c:	693b      	ldr	r3, [r7, #16]
 804751e:	681b      	ldr	r3, [r3, #0]
 8047520:	2b00      	cmp	r3, #0
 8047522:	d11a      	bne.n	804755a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8047524:	693b      	ldr	r3, [r7, #16]
 8047526:	685a      	ldr	r2, [r3, #4]
 8047528:	4b0e      	ldr	r3, [pc, #56]	@ (8047564 <vPortFree+0xbc>)
 804752a:	681b      	ldr	r3, [r3, #0]
 804752c:	43db      	mvns	r3, r3
 804752e:	401a      	ands	r2, r3
 8047530:	693b      	ldr	r3, [r7, #16]
 8047532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8047534:	f7fe fc76 	bl	8045e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8047538:	693b      	ldr	r3, [r7, #16]
 804753a:	685a      	ldr	r2, [r3, #4]
 804753c:	4b0a      	ldr	r3, [pc, #40]	@ (8047568 <vPortFree+0xc0>)
 804753e:	681b      	ldr	r3, [r3, #0]
 8047540:	4413      	add	r3, r2
 8047542:	4a09      	ldr	r2, [pc, #36]	@ (8047568 <vPortFree+0xc0>)
 8047544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8047546:	6938      	ldr	r0, [r7, #16]
 8047548:	f000 f874 	bl	8047634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 804754c:	4b07      	ldr	r3, [pc, #28]	@ (804756c <vPortFree+0xc4>)
 804754e:	681b      	ldr	r3, [r3, #0]
 8047550:	3301      	adds	r3, #1
 8047552:	4a06      	ldr	r2, [pc, #24]	@ (804756c <vPortFree+0xc4>)
 8047554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8047556:	f7fe fc73 	bl	8045e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 804755a:	bf00      	nop
 804755c:	3718      	adds	r7, #24
 804755e:	46bd      	mov	sp, r7
 8047560:	bd80      	pop	{r7, pc}
 8047562:	bf00      	nop
 8047564:	24004a7c 	.word	0x24004a7c
 8047568:	24004a6c 	.word	0x24004a6c
 804756c:	24004a78 	.word	0x24004a78

08047570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8047570:	b480      	push	{r7}
 8047572:	b085      	sub	sp, #20
 8047574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8047576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 804757a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 804757c:	4b27      	ldr	r3, [pc, #156]	@ (804761c <prvHeapInit+0xac>)
 804757e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8047580:	68fb      	ldr	r3, [r7, #12]
 8047582:	f003 0307 	and.w	r3, r3, #7
 8047586:	2b00      	cmp	r3, #0
 8047588:	d00c      	beq.n	80475a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 804758a:	68fb      	ldr	r3, [r7, #12]
 804758c:	3307      	adds	r3, #7
 804758e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8047590:	68fb      	ldr	r3, [r7, #12]
 8047592:	f023 0307 	bic.w	r3, r3, #7
 8047596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8047598:	68ba      	ldr	r2, [r7, #8]
 804759a:	68fb      	ldr	r3, [r7, #12]
 804759c:	1ad3      	subs	r3, r2, r3
 804759e:	4a1f      	ldr	r2, [pc, #124]	@ (804761c <prvHeapInit+0xac>)
 80475a0:	4413      	add	r3, r2
 80475a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80475a4:	68fb      	ldr	r3, [r7, #12]
 80475a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80475a8:	4a1d      	ldr	r2, [pc, #116]	@ (8047620 <prvHeapInit+0xb0>)
 80475aa:	687b      	ldr	r3, [r7, #4]
 80475ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80475ae:	4b1c      	ldr	r3, [pc, #112]	@ (8047620 <prvHeapInit+0xb0>)
 80475b0:	2200      	movs	r2, #0
 80475b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80475b4:	687b      	ldr	r3, [r7, #4]
 80475b6:	68ba      	ldr	r2, [r7, #8]
 80475b8:	4413      	add	r3, r2
 80475ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80475bc:	2208      	movs	r2, #8
 80475be:	68fb      	ldr	r3, [r7, #12]
 80475c0:	1a9b      	subs	r3, r3, r2
 80475c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80475c4:	68fb      	ldr	r3, [r7, #12]
 80475c6:	f023 0307 	bic.w	r3, r3, #7
 80475ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80475cc:	68fb      	ldr	r3, [r7, #12]
 80475ce:	4a15      	ldr	r2, [pc, #84]	@ (8047624 <prvHeapInit+0xb4>)
 80475d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80475d2:	4b14      	ldr	r3, [pc, #80]	@ (8047624 <prvHeapInit+0xb4>)
 80475d4:	681b      	ldr	r3, [r3, #0]
 80475d6:	2200      	movs	r2, #0
 80475d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80475da:	4b12      	ldr	r3, [pc, #72]	@ (8047624 <prvHeapInit+0xb4>)
 80475dc:	681b      	ldr	r3, [r3, #0]
 80475de:	2200      	movs	r2, #0
 80475e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80475e2:	687b      	ldr	r3, [r7, #4]
 80475e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80475e6:	683b      	ldr	r3, [r7, #0]
 80475e8:	68fa      	ldr	r2, [r7, #12]
 80475ea:	1ad2      	subs	r2, r2, r3
 80475ec:	683b      	ldr	r3, [r7, #0]
 80475ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80475f0:	4b0c      	ldr	r3, [pc, #48]	@ (8047624 <prvHeapInit+0xb4>)
 80475f2:	681a      	ldr	r2, [r3, #0]
 80475f4:	683b      	ldr	r3, [r7, #0]
 80475f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80475f8:	683b      	ldr	r3, [r7, #0]
 80475fa:	685b      	ldr	r3, [r3, #4]
 80475fc:	4a0a      	ldr	r2, [pc, #40]	@ (8047628 <prvHeapInit+0xb8>)
 80475fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8047600:	683b      	ldr	r3, [r7, #0]
 8047602:	685b      	ldr	r3, [r3, #4]
 8047604:	4a09      	ldr	r2, [pc, #36]	@ (804762c <prvHeapInit+0xbc>)
 8047606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8047608:	4b09      	ldr	r3, [pc, #36]	@ (8047630 <prvHeapInit+0xc0>)
 804760a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 804760e:	601a      	str	r2, [r3, #0]
}
 8047610:	bf00      	nop
 8047612:	3714      	adds	r7, #20
 8047614:	46bd      	mov	sp, r7
 8047616:	f85d 7b04 	ldr.w	r7, [sp], #4
 804761a:	4770      	bx	lr
 804761c:	24000e60 	.word	0x24000e60
 8047620:	24004a60 	.word	0x24004a60
 8047624:	24004a68 	.word	0x24004a68
 8047628:	24004a70 	.word	0x24004a70
 804762c:	24004a6c 	.word	0x24004a6c
 8047630:	24004a7c 	.word	0x24004a7c

08047634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8047634:	b480      	push	{r7}
 8047636:	b085      	sub	sp, #20
 8047638:	af00      	add	r7, sp, #0
 804763a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 804763c:	4b28      	ldr	r3, [pc, #160]	@ (80476e0 <prvInsertBlockIntoFreeList+0xac>)
 804763e:	60fb      	str	r3, [r7, #12]
 8047640:	e002      	b.n	8047648 <prvInsertBlockIntoFreeList+0x14>
 8047642:	68fb      	ldr	r3, [r7, #12]
 8047644:	681b      	ldr	r3, [r3, #0]
 8047646:	60fb      	str	r3, [r7, #12]
 8047648:	68fb      	ldr	r3, [r7, #12]
 804764a:	681b      	ldr	r3, [r3, #0]
 804764c:	687a      	ldr	r2, [r7, #4]
 804764e:	429a      	cmp	r2, r3
 8047650:	d8f7      	bhi.n	8047642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8047652:	68fb      	ldr	r3, [r7, #12]
 8047654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8047656:	68fb      	ldr	r3, [r7, #12]
 8047658:	685b      	ldr	r3, [r3, #4]
 804765a:	68ba      	ldr	r2, [r7, #8]
 804765c:	4413      	add	r3, r2
 804765e:	687a      	ldr	r2, [r7, #4]
 8047660:	429a      	cmp	r2, r3
 8047662:	d108      	bne.n	8047676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8047664:	68fb      	ldr	r3, [r7, #12]
 8047666:	685a      	ldr	r2, [r3, #4]
 8047668:	687b      	ldr	r3, [r7, #4]
 804766a:	685b      	ldr	r3, [r3, #4]
 804766c:	441a      	add	r2, r3
 804766e:	68fb      	ldr	r3, [r7, #12]
 8047670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8047672:	68fb      	ldr	r3, [r7, #12]
 8047674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8047676:	687b      	ldr	r3, [r7, #4]
 8047678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 804767a:	687b      	ldr	r3, [r7, #4]
 804767c:	685b      	ldr	r3, [r3, #4]
 804767e:	68ba      	ldr	r2, [r7, #8]
 8047680:	441a      	add	r2, r3
 8047682:	68fb      	ldr	r3, [r7, #12]
 8047684:	681b      	ldr	r3, [r3, #0]
 8047686:	429a      	cmp	r2, r3
 8047688:	d118      	bne.n	80476bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 804768a:	68fb      	ldr	r3, [r7, #12]
 804768c:	681a      	ldr	r2, [r3, #0]
 804768e:	4b15      	ldr	r3, [pc, #84]	@ (80476e4 <prvInsertBlockIntoFreeList+0xb0>)
 8047690:	681b      	ldr	r3, [r3, #0]
 8047692:	429a      	cmp	r2, r3
 8047694:	d00d      	beq.n	80476b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8047696:	687b      	ldr	r3, [r7, #4]
 8047698:	685a      	ldr	r2, [r3, #4]
 804769a:	68fb      	ldr	r3, [r7, #12]
 804769c:	681b      	ldr	r3, [r3, #0]
 804769e:	685b      	ldr	r3, [r3, #4]
 80476a0:	441a      	add	r2, r3
 80476a2:	687b      	ldr	r3, [r7, #4]
 80476a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80476a6:	68fb      	ldr	r3, [r7, #12]
 80476a8:	681b      	ldr	r3, [r3, #0]
 80476aa:	681a      	ldr	r2, [r3, #0]
 80476ac:	687b      	ldr	r3, [r7, #4]
 80476ae:	601a      	str	r2, [r3, #0]
 80476b0:	e008      	b.n	80476c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80476b2:	4b0c      	ldr	r3, [pc, #48]	@ (80476e4 <prvInsertBlockIntoFreeList+0xb0>)
 80476b4:	681a      	ldr	r2, [r3, #0]
 80476b6:	687b      	ldr	r3, [r7, #4]
 80476b8:	601a      	str	r2, [r3, #0]
 80476ba:	e003      	b.n	80476c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80476bc:	68fb      	ldr	r3, [r7, #12]
 80476be:	681a      	ldr	r2, [r3, #0]
 80476c0:	687b      	ldr	r3, [r7, #4]
 80476c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80476c4:	68fa      	ldr	r2, [r7, #12]
 80476c6:	687b      	ldr	r3, [r7, #4]
 80476c8:	429a      	cmp	r2, r3
 80476ca:	d002      	beq.n	80476d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80476cc:	68fb      	ldr	r3, [r7, #12]
 80476ce:	687a      	ldr	r2, [r7, #4]
 80476d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80476d2:	bf00      	nop
 80476d4:	3714      	adds	r7, #20
 80476d6:	46bd      	mov	sp, r7
 80476d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80476dc:	4770      	bx	lr
 80476de:	bf00      	nop
 80476e0:	24004a60 	.word	0x24004a60
 80476e4:	24004a68 	.word	0x24004a68

080476e8 <memset>:
 80476e8:	4402      	add	r2, r0
 80476ea:	4603      	mov	r3, r0
 80476ec:	4293      	cmp	r3, r2
 80476ee:	d100      	bne.n	80476f2 <memset+0xa>
 80476f0:	4770      	bx	lr
 80476f2:	f803 1b01 	strb.w	r1, [r3], #1
 80476f6:	e7f9      	b.n	80476ec <memset+0x4>

080476f8 <__libc_init_array>:
 80476f8:	b570      	push	{r4, r5, r6, lr}
 80476fa:	4d0d      	ldr	r5, [pc, #52]	@ (8047730 <__libc_init_array+0x38>)
 80476fc:	4c0d      	ldr	r4, [pc, #52]	@ (8047734 <__libc_init_array+0x3c>)
 80476fe:	1b64      	subs	r4, r4, r5
 8047700:	10a4      	asrs	r4, r4, #2
 8047702:	2600      	movs	r6, #0
 8047704:	42a6      	cmp	r6, r4
 8047706:	d109      	bne.n	804771c <__libc_init_array+0x24>
 8047708:	4d0b      	ldr	r5, [pc, #44]	@ (8047738 <__libc_init_array+0x40>)
 804770a:	4c0c      	ldr	r4, [pc, #48]	@ (804773c <__libc_init_array+0x44>)
 804770c:	f000 f826 	bl	804775c <_init>
 8047710:	1b64      	subs	r4, r4, r5
 8047712:	10a4      	asrs	r4, r4, #2
 8047714:	2600      	movs	r6, #0
 8047716:	42a6      	cmp	r6, r4
 8047718:	d105      	bne.n	8047726 <__libc_init_array+0x2e>
 804771a:	bd70      	pop	{r4, r5, r6, pc}
 804771c:	f855 3b04 	ldr.w	r3, [r5], #4
 8047720:	4798      	blx	r3
 8047722:	3601      	adds	r6, #1
 8047724:	e7ee      	b.n	8047704 <__libc_init_array+0xc>
 8047726:	f855 3b04 	ldr.w	r3, [r5], #4
 804772a:	4798      	blx	r3
 804772c:	3601      	adds	r6, #1
 804772e:	e7f2      	b.n	8047716 <__libc_init_array+0x1e>
 8047730:	08047854 	.word	0x08047854
 8047734:	08047854 	.word	0x08047854
 8047738:	08047854 	.word	0x08047854
 804773c:	08047858 	.word	0x08047858

08047740 <memcpy>:
 8047740:	440a      	add	r2, r1
 8047742:	4291      	cmp	r1, r2
 8047744:	f100 33ff 	add.w	r3, r0, #4294967295
 8047748:	d100      	bne.n	804774c <memcpy+0xc>
 804774a:	4770      	bx	lr
 804774c:	b510      	push	{r4, lr}
 804774e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8047752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8047756:	4291      	cmp	r1, r2
 8047758:	d1f9      	bne.n	804774e <memcpy+0xe>
 804775a:	bd10      	pop	{r4, pc}

0804775c <_init>:
 804775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804775e:	bf00      	nop
 8047760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8047762:	bc08      	pop	{r3}
 8047764:	469e      	mov	lr, r3
 8047766:	4770      	bx	lr

08047768 <_fini>:
 8047768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804776a:	bf00      	nop
 804776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804776e:	bc08      	pop	{r3}
 8047770:	469e      	mov	lr, r3
 8047772:	4770      	bx	lr
