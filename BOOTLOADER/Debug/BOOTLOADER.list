
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002894  08002894  00003894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002898  08002898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800289c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  080028ac  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  080028ac  0000407c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cf22  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001acf  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bf8  00000000  00000000  00012a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000934  00000000  00000000  00013628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031a6e  00000000  00000000  00013f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000dcdb  00000000  00000000  000459ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001446c1  00000000  00000000  000536a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00197d66  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031bc  00000000  00000000  00197dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004f  00000000  00000000  0019af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800286c 	.word	0x0800286c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800286c 	.word	0x0800286c

0800030c <Jump_App>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void Jump_App(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000312:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <Jump_App+0x54>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	607b      	str	r3, [r7, #4]
//__set_MSP(*(volatile uint32_t*) 0x08040000);
// Turn OFF the Green Led to tell the user that Bootloader is not running
HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET );    //Green LED OFF
 8000318:	2201      	movs	r2, #1
 800031a:	2180      	movs	r1, #128	@ 0x80
 800031c:	4811      	ldr	r0, [pc, #68]	@ (8000364 <Jump_App+0x58>)
 800031e:	f000 fe87 	bl	8001030 <HAL_GPIO_WritePin>
HAL_Delay(3000);
 8000322:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000326:	f000 fb5f 	bl	80009e8 <HAL_Delay>
/* Reset the Clock */
HAL_RCC_DeInit();
 800032a:	f000 fed5 	bl	80010d8 <HAL_RCC_DeInit>
HAL_DeInit();
 800032e:	f000 fad3 	bl	80008d8 <HAL_DeInit>
__set_MSP(*(volatile uint32_t*) 0x08040000);
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <Jump_App+0x5c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f383 8808 	msr	MSP, r3
}
 800033e:	bf00      	nop
SysTick->CTRL = 0;
 8000340:	4b0a      	ldr	r3, [pc, #40]	@ (800036c <Jump_App+0x60>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
SysTick->LOAD = 0;
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <Jump_App+0x60>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
SysTick->VAL = 0;
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <Jump_App+0x60>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
/* Jump to application */
app_reset_handler();    //call the app reset handler
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	08040004 	.word	0x08040004
 8000364:	58020c00 	.word	0x58020c00
 8000368:	08040000 	.word	0x08040000
 800036c:	e000e010 	.word	0xe000e010

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000374:	f000 f89c 	bl	80004b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fa72 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f806 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f862 	bl	8000448 <MX_GPIO_Init>
  Jump_App();
 8000384:	f7ff ffc2 	bl	800030c <Jump_App>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <main+0x18>

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09c      	sub	sp, #112	@ 0x70
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000396:	224c      	movs	r2, #76	@ 0x4c
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fa3a 	bl	8002814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2220      	movs	r2, #32
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fa34 	bl	8002814 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ac:	2002      	movs	r0, #2
 80003ae:	f000 fe59 	bl	8001064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	4b23      	ldr	r3, [pc, #140]	@ (8000444 <SystemClock_Config+0xb8>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003be:	4a21      	ldr	r2, [pc, #132]	@ (8000444 <SystemClock_Config+0xb8>)
 80003c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000444 <SystemClock_Config+0xb8>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d2:	bf00      	nop
 80003d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <SystemClock_Config+0xb8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003e0:	d1f8      	bne.n	80003d4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	2302      	movs	r3, #2
 80003e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003ea:	2340      	movs	r3, #64	@ 0x40
 80003ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 ff98 	bl	800132c <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000402:	f000 f893 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	233f      	movs	r3, #63	@ 0x3f
 8000408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2101      	movs	r1, #1
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fb58 	bl	8001ae0 <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000436:	f000 f879 	bl	800052c <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3770      	adds	r7, #112	@ 0x70
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	58024800 	.word	0x58024800

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_GPIO_Init+0x60>)
 800045e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000462:	4a11      	ldr	r2, [pc, #68]	@ (80004a8 <MX_GPIO_Init+0x60>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800046c:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <MX_GPIO_Init+0x60>)
 800046e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000472:	f003 0308 	and.w	r3, r3, #8
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	480b      	ldr	r0, [pc, #44]	@ (80004ac <MX_GPIO_Init+0x64>)
 8000480:	f000 fdd6 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	4619      	mov	r1, r3
 8000498:	4804      	ldr	r0, [pc, #16]	@ (80004ac <MX_GPIO_Init+0x64>)
 800049a:	f000 fc21 	bl	8000ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049e:	bf00      	nop
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	58024400 	.word	0x58024400
 80004ac:	58020c00 	.word	0x58020c00

080004b0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004b6:	463b      	mov	r3, r7
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004c2:	f000 fb95 	bl	8000bf0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004c6:	2301      	movs	r3, #1
 80004c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004d2:	231f      	movs	r3, #31
 80004d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004d6:	2387      	movs	r3, #135	@ 0x87
 80004d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004da:	2300      	movs	r3, #0
 80004dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004de:	2300      	movs	r3, #0
 80004e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004e6:	2301      	movs	r3, #1
 80004e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004f2:	463b      	mov	r3, r7
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fbb3 	bl	8000c60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004fa:	2004      	movs	r0, #4
 80004fc:	f000 fb90 	bl	8000c20 <HAL_MPU_Enable>

}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d101      	bne.n	800051e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051a:	f000 fa45 	bl	80009a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40001000 	.word	0x40001000

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <Error_Handler+0x8>

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <HAL_MspInit+0x30>)
 8000540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000544:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <HAL_MspInit+0x30>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_MspInit+0x30>)
 8000550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	58024400 	.word	0x58024400

0800056c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b090      	sub	sp, #64	@ 0x40
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d827      	bhi.n	80005ca <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800057a:	2200      	movs	r2, #0
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	2036      	movs	r0, #54	@ 0x36
 8000580:	f000 fb0e 	bl	8000ba0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000584:	2036      	movs	r0, #54	@ 0x36
 8000586:	f000 fb25 	bl	8000bd4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800058a:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <HAL_InitTick+0xc4>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <HAL_InitTick+0xc8>)
 8000592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000596:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <HAL_InitTick+0xc8>)
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <HAL_InitTick+0xc8>)
 80005a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ae:	f107 0210 	add.w	r2, r7, #16
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fe07 	bl	80021cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d106      	bne.n	80005d6 <HAL_InitTick+0x6a>
 80005c8:	e001      	b.n	80005ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e02b      	b.n	8000626 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005ce:	f001 fde7 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80005d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80005d4:	e004      	b.n	80005e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005d6:	f001 fde3 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80005da:	4603      	mov	r3, r0
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005e2:	4a15      	ldr	r2, [pc, #84]	@ (8000638 <HAL_InitTick+0xcc>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	0c9b      	lsrs	r3, r3, #18
 80005ea:	3b01      	subs	r3, #1
 80005ec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <HAL_InitTick+0xd0>)
 80005f0:	4a13      	ldr	r2, [pc, #76]	@ (8000640 <HAL_InitTick+0xd4>)
 80005f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <HAL_InitTick+0xd0>)
 80005f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005fc:	4a0f      	ldr	r2, [pc, #60]	@ (800063c <HAL_InitTick+0xd0>)
 80005fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000600:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <HAL_InitTick+0xd0>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <HAL_InitTick+0xd0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800060e:	480b      	ldr	r0, [pc, #44]	@ (800063c <HAL_InitTick+0xd0>)
 8000610:	f001 fe1e 	bl	8002250 <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d104      	bne.n	8000624 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <HAL_InitTick+0xd0>)
 800061c:	f001 fe7a 	bl	8002314 <HAL_TIM_Base_Start_IT>
 8000620:	4603      	mov	r3, r0
 8000622:	e000      	b.n	8000626 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000624:	2301      	movs	r3, #1
}
 8000626:	4618      	mov	r0, r3
 8000628:	3740      	adds	r7, #64	@ 0x40
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	24000008 	.word	0x24000008
 8000634:	58024400 	.word	0x58024400
 8000638:	431bde83 	.word	0x431bde83
 800063c:	2400002c 	.word	0x2400002c
 8000640:	40001000 	.word	0x40001000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006a8:	4802      	ldr	r0, [pc, #8]	@ (80006b4 <TIM6_DAC_IRQHandler+0x10>)
 80006aa:	f001 feb9 	bl	8002420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2400002c 	.word	0x2400002c

080006b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006bc:	4b3e      	ldr	r3, [pc, #248]	@ (80007b8 <SystemInit+0x100>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c2:	4a3d      	ldr	r2, [pc, #244]	@ (80007b8 <SystemInit+0x100>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b3b      	ldr	r3, [pc, #236]	@ (80007bc <SystemInit+0x104>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b38      	ldr	r3, [pc, #224]	@ (80007bc <SystemInit+0x104>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a36      	ldr	r2, [pc, #216]	@ (80007bc <SystemInit+0x104>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b35      	ldr	r3, [pc, #212]	@ (80007c0 <SystemInit+0x108>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a34      	ldr	r2, [pc, #208]	@ (80007c0 <SystemInit+0x108>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <SystemInit+0x108>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <SystemInit+0x108>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4930      	ldr	r1, [pc, #192]	@ (80007c0 <SystemInit+0x108>)
 8000700:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <SystemInit+0x10c>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <SystemInit+0x104>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <SystemInit+0x104>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <SystemInit+0x104>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <SystemInit+0x108>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <SystemInit+0x108>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <SystemInit+0x108>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <SystemInit+0x108>)
 8000736:	4a24      	ldr	r2, [pc, #144]	@ (80007c8 <SystemInit+0x110>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SystemInit+0x108>)
 800073c:	4a23      	ldr	r2, [pc, #140]	@ (80007cc <SystemInit+0x114>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemInit+0x108>)
 8000742:	4a23      	ldr	r2, [pc, #140]	@ (80007d0 <SystemInit+0x118>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <SystemInit+0x108>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <SystemInit+0x108>)
 800074e:	4a20      	ldr	r2, [pc, #128]	@ (80007d0 <SystemInit+0x118>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <SystemInit+0x108>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <SystemInit+0x108>)
 800075a:	4a1d      	ldr	r2, [pc, #116]	@ (80007d0 <SystemInit+0x118>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <SystemInit+0x108>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <SystemInit+0x108>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <SystemInit+0x108>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <SystemInit+0x108>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <SystemInit+0x108>)
 8000778:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800077c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000780:	2b00      	cmp	r3, #0
 8000782:	d113      	bne.n	80007ac <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <SystemInit+0x108>)
 8000786:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800078a:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <SystemInit+0x108>)
 800078c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000790:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <SystemInit+0x11c>)
 8000796:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800079a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <SystemInit+0x108>)
 800079e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007a2:	4a07      	ldr	r2, [pc, #28]	@ (80007c0 <SystemInit+0x108>)
 80007a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	52002000 	.word	0x52002000
 80007c0:	58024400 	.word	0x58024400
 80007c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c8:	02020200 	.word	0x02020200
 80007cc:	01ff0000 	.word	0x01ff0000
 80007d0:	01010280 	.word	0x01010280
 80007d4:	52004000 	.word	0x52004000

080007d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007e8:	bf00      	nop
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f9      	beq.n	80007ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	58024800 	.word	0x58024800

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000808:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000844 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800080c:	f7ff ffe4 	bl	80007d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000810:	f7ff ff52 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	@ (800084c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	@ (8000858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f001 fff3 	bl	8002824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083e:	f7ff fd97 	bl	8000370 <main>
  bx  lr
 8000842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000844:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800084c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000850:	0800289c 	.word	0x0800289c
  ldr r2, =_sbss
 8000854:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000858:	2400007c 	.word	0x2400007c

0800085c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC3_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000866:	2003      	movs	r0, #3
 8000868:	f000 f98f 	bl	8000b8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800086c:	f001 faee 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8000870:	4602      	mov	r2, r0
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_Init+0x68>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	4913      	ldr	r1, [pc, #76]	@ (80008cc <HAL_Init+0x6c>)
 800087e:	5ccb      	ldrb	r3, [r1, r3]
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	fa22 f303 	lsr.w	r3, r2, r3
 8000888:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <HAL_Init+0x68>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_Init+0x6c>)
 8000894:	5cd3      	ldrb	r3, [r2, r3]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	fa22 f303 	lsr.w	r3, r2, r3
 80008a0:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <HAL_Init+0x70>)
 80008a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008a4:	4a0b      	ldr	r2, [pc, #44]	@ (80008d4 <HAL_Init+0x74>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008aa:	200f      	movs	r0, #15
 80008ac:	f7ff fe5e 	bl	800056c <HAL_InitTick>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e002      	b.n	80008c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ba:	f7ff fe3d 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400
 80008cc:	08002884 	.word	0x08002884
 80008d0:	24000004 	.word	0x24000004
 80008d4:	24000000 	.word	0x24000000

080008d8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <HAL_DeInit+0x9c>)
 80008de:	4a26      	ldr	r2, [pc, #152]	@ (8000978 <HAL_DeInit+0xa0>)
 80008e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <HAL_DeInit+0x9c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <HAL_DeInit+0x9c>)
 80008ea:	4a24      	ldr	r2, [pc, #144]	@ (800097c <HAL_DeInit+0xa4>)
 80008ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 80008f0:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <HAL_DeInit+0x9c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <HAL_DeInit+0x9c>)
 80008fa:	4a21      	ldr	r2, [pc, #132]	@ (8000980 <HAL_DeInit+0xa8>)
 80008fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <HAL_DeInit+0x9c>)
 8000902:	2200      	movs	r2, #0
 8000904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <HAL_DeInit+0x9c>)
 800090a:	4a1e      	ldr	r2, [pc, #120]	@ (8000984 <HAL_DeInit+0xac>)
 800090c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <HAL_DeInit+0x9c>)
 8000912:	2200      	movs	r2, #0
 8000914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_DeInit+0x9c>)
 800091a:	2208      	movs	r2, #8
 800091c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <HAL_DeInit+0x9c>)
 8000922:	2200      	movs	r2, #0
 8000924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_DeInit+0x9c>)
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <HAL_DeInit+0xb0>)
 800092c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8000930:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_DeInit+0x9c>)
 8000932:	2200      	movs	r2, #0
 8000934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <HAL_DeInit+0x9c>)
 800093a:	4a14      	ldr	r2, [pc, #80]	@ (800098c <HAL_DeInit+0xb4>)
 800093c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_DeInit+0x9c>)
 8000942:	2200      	movs	r2, #0
 8000944:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_DeInit+0x9c>)
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <HAL_DeInit+0xb8>)
 800094c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <HAL_DeInit+0x9c>)
 8000952:	2200      	movs	r2, #0
 8000954:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_DeInit+0x9c>)
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_DeInit+0xbc>)
 800095c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <HAL_DeInit+0x9c>)
 8000962:	2200      	movs	r2, #0
 8000964:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000968:	f000 f816 	bl	8000998 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58024400 	.word	0x58024400
 8000978:	00e95011 	.word	0x00e95011
 800097c:	02008023 	.word	0x02008023
 8000980:	00030271 	.word	0x00030271
 8000984:	032806ff 	.word	0x032806ff
 8000988:	eaffc3ff 	.word	0xeaffc3ff
 800098c:	03000136 	.word	0x03000136
 8000990:	405730f3 	.word	0x405730f3
 8000994:	0420deaa 	.word	0x0420deaa

08000998 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2400000c 	.word	0x2400000c
 80009cc:	24000078 	.word	0x24000078

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	24000078 	.word	0x24000078

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff ffee 	bl	80009d0 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffde 	bl	80009d0 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2400000c 	.word	0x2400000c

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x40>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x40>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	05fa0000 	.word	0x05fa0000

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	@ (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	@ (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	@ (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	@ 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff4c 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bae:	f7ff ff63 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	6978      	ldr	r0, [r7, #20]
 8000bba:	f7ff ffb3 	bl	8000b24 <NVIC_EncodePriority>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff82 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff56 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bf4:	f3bf 8f5f 	dmb	sy
}
 8000bf8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_MPU_Disable+0x28>)
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfe:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_MPU_Disable+0x28>)
 8000c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_MPU_Disable+0x2c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	e000ed90 	.word	0xe000ed90

08000c20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c28:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_MPU_Enable+0x38>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_MPU_Enable+0x3c>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <HAL_MPU_Enable+0x3c>)
 8000c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3e:	f3bf 8f4f 	dsb	sy
}
 8000c42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c44:	f3bf 8f6f 	isb	sy
}
 8000c48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed90 	.word	0xe000ed90
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	785a      	ldrb	r2, [r3, #1]
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_MPU_ConfigRegion+0x7c>)
 8000c6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_MPU_ConfigRegion+0x7c>)
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <HAL_MPU_ConfigRegion+0x7c>)
 8000c76:	f023 0301 	bic.w	r3, r3, #1
 8000c7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c7c:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <HAL_MPU_ConfigRegion+0x7c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7b1b      	ldrb	r3, [r3, #12]
 8000c88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7adb      	ldrb	r3, [r3, #11]
 8000c8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a9b      	ldrb	r3, [r3, #10]
 8000c96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7b5b      	ldrb	r3, [r3, #13]
 8000c9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ca0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7b9b      	ldrb	r3, [r3, #14]
 8000ca6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ca8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7bdb      	ldrb	r3, [r3, #15]
 8000cae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7a5b      	ldrb	r3, [r3, #9]
 8000cb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000cc0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ccc:	6113      	str	r3, [r2, #16]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed90 	.word	0xe000ed90

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cee:	4b86      	ldr	r3, [pc, #536]	@ (8000f08 <HAL_GPIO_Init+0x228>)
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cf2:	e18c      	b.n	800100e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 817e 	beq.w	8001008 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x44>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80d8 	beq.w	8001008 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e58:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <HAL_GPIO_Init+0x22c>)
 8000e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f0c <HAL_GPIO_Init+0x22c>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <HAL_GPIO_Init+0x22c>)
 8000e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e76:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <HAL_GPIO_Init+0x230>)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <HAL_GPIO_Init+0x234>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d04a      	beq.n	8000f38 <HAL_GPIO_Init+0x258>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <HAL_GPIO_Init+0x238>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02b      	beq.n	8000f02 <HAL_GPIO_Init+0x222>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <HAL_GPIO_Init+0x23c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x21e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f20 <HAL_GPIO_Init+0x240>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	@ (8000f24 <HAL_GPIO_Init+0x244>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x216>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <HAL_GPIO_Init+0x248>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x212>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_GPIO_Init+0x24c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x20e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <HAL_GPIO_Init+0x250>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x20a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <HAL_GPIO_Init+0x254>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x206>
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	e029      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	e027      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000eea:	2307      	movs	r3, #7
 8000eec:	e025      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e023      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e021      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	e01f      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e01d      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e01b      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e019      	b.n	8000f3a <HAL_GPIO_Init+0x25a>
 8000f06:	bf00      	nop
 8000f08:	58000080 	.word	0x58000080
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58000400 	.word	0x58000400
 8000f14:	58020000 	.word	0x58020000
 8000f18:	58020400 	.word	0x58020400
 8000f1c:	58020800 	.word	0x58020800
 8000f20:	58020c00 	.word	0x58020c00
 8000f24:	58021000 	.word	0x58021000
 8000f28:	58021400 	.word	0x58021400
 8000f2c:	58021800 	.word	0x58021800
 8000f30:	58021c00 	.word	0x58021c00
 8000f34:	58022400 	.word	0x58022400
 8000f38:	2300      	movs	r3, #0
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4a:	4938      	ldr	r1, [pc, #224]	@ (800102c <HAL_GPIO_Init+0x34c>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	f47f ae6b 	bne.w	8000cf4 <HAL_GPIO_Init+0x14>
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3724      	adds	r7, #36	@ 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	58000400 	.word	0x58000400

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <HAL_PWREx_ConfigSupply+0x70>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b04      	cmp	r3, #4
 8001076:	d00a      	beq.n	800108e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <HAL_PWREx_ConfigSupply+0x70>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d001      	beq.n	800108a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e01f      	b.n	80010ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e01d      	b.n	80010ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_PWREx_ConfigSupply+0x70>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f023 0207 	bic.w	r2, r3, #7
 8001096:	490f      	ldr	r1, [pc, #60]	@ (80010d4 <HAL_PWREx_ConfigSupply+0x70>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4313      	orrs	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800109e:	f7ff fc97 	bl	80009d0 <HAL_GetTick>
 80010a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010a4:	e009      	b.n	80010ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010a6:	f7ff fc93 	bl	80009d0 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010b4:	d901      	bls.n	80010ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e007      	b.n	80010ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_PWREx_ConfigSupply+0x70>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010c6:	d1ee      	bne.n	80010a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	58024800 	.word	0x58024800

080010d8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 80010de:	4b89      	ldr	r3, [pc, #548]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d80f      	bhi.n	800110a <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80010ea:	4b86      	ldr	r3, [pc, #536]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 030f 	bic.w	r3, r3, #15
 80010f2:	4a84      	ldr	r2, [pc, #528]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80010f4:	f043 0307 	orr.w	r3, r3, #7
 80010f8:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80010fa:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	2b07      	cmp	r3, #7
 8001104:	d001      	beq.n	800110a <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0f7      	b.n	80012fa <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800110a:	f7ff fc61 	bl	80009d0 <HAL_GetTick>
 800110e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001110:	4b7d      	ldr	r3, [pc, #500]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a7c      	ldr	r2, [pc, #496]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fc57 	bl	80009d0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e0e4      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001130:	4b75      	ldr	r3, [pc, #468]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 800113c:	4b72      	ldr	r3, [pc, #456]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a71      	ldr	r2, [pc, #452]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001142:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001146:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001148:	4b6f      	ldr	r3, [pc, #444]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 800114e:	4b6f      	ldr	r3, [pc, #444]	@ (800130c <HAL_RCC_DeInit+0x234>)
 8001150:	4a6f      	ldr	r2, [pc, #444]	@ (8001310 <HAL_RCC_DeInit+0x238>)
 8001152:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8001154:	4b6f      	ldr	r3, [pc, #444]	@ (8001314 <HAL_RCC_DeInit+0x23c>)
 8001156:	4a6e      	ldr	r2, [pc, #440]	@ (8001310 <HAL_RCC_DeInit+0x238>)
 8001158:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800115a:	4b6f      	ldr	r3, [pc, #444]	@ (8001318 <HAL_RCC_DeInit+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fa04 	bl	800056c <HAL_InitTick>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e0c5      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800116e:	f7ff fc2f 	bl	80009d0 <HAL_GetTick>
 8001172:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001174:	e00a      	b.n	800118c <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001176:	f7ff fc2b 	bl	80009d0 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e0b6      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800118c:	4b5e      	ldr	r3, [pc, #376]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ee      	bne.n	8001176 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001198:	f7ff fc1a 	bl	80009d0 <HAL_GetTick>
 800119c:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 800119e:	4b5a      	ldr	r3, [pc, #360]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4959      	ldr	r1, [pc, #356]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80011a4:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <HAL_RCC_DeInit+0x244>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc10 	bl	80009d0 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e09d      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011be:	4b52      	ldr	r3, [pc, #328]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80011ca:	f7ff fc01 	bl	80009d0 <HAL_GetTick>
 80011ce:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80011d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80011d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011da:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff fbf7 	bl	80009d0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e084      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80011f0:	4b45      	ldr	r3, [pc, #276]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80011fc:	f7ff fbe8 	bl	80009d0 <HAL_GetTick>
 8001200:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8001202:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a40      	ldr	r2, [pc, #256]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001208:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800120c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001210:	f7ff fbde 	bl	80009d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e06b      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8001222:	4b39      	ldr	r3, [pc, #228]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800122e:	f7ff fbcf 	bl	80009d0 <HAL_GetTick>
 8001232:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8001234:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a33      	ldr	r2, [pc, #204]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800123a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fbc5 	bl	80009d0 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e052      	b.n	80012fa <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8001254:	4b2c      	ldr	r3, [pc, #176]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8001272:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001274:	4a2a      	ldr	r2, [pc, #168]	@ (8001320 <HAL_RCC_DeInit+0x248>)
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800127a:	4a2a      	ldr	r2, [pc, #168]	@ (8001324 <HAL_RCC_DeInit+0x24c>)
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001280:	4a29      	ldr	r2, [pc, #164]	@ (8001328 <HAL_RCC_DeInit+0x250>)
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001286:	2200      	movs	r2, #0
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800128c:	4a26      	ldr	r2, [pc, #152]	@ (8001328 <HAL_RCC_DeInit+0x250>)
 800128e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001292:	2200      	movs	r2, #0
 8001294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 8001298:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <HAL_RCC_DeInit+0x250>)
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80012a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80012b6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ba:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80012be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80012c2:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <HAL_RCC_DeInit+0x230>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00f      	beq.n	80012f8 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 030f 	bic.w	r3, r3, #15
 80012e0:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80012e2:	f043 0307 	orr.w	r3, r3, #7
 80012e6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_RCC_DeInit+0x22c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	52002000 	.word	0x52002000
 8001308:	58024400 	.word	0x58024400
 800130c:	24000000 	.word	0x24000000
 8001310:	03d09000 	.word	0x03d09000
 8001314:	24000004 	.word	0x24000004
 8001318:	24000008 	.word	0x24000008
 800131c:	fff6ed45 	.word	0xfff6ed45
 8001320:	02020200 	.word	0x02020200
 8001324:	01ff0000 	.word	0x01ff0000
 8001328:	01010280 	.word	0x01010280

0800132c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	@ 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e3c8      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8087 	beq.w	800145a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134c:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001356:	4b86      	ldr	r3, [pc, #536]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800135c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135e:	2b10      	cmp	r3, #16
 8001360:	d007      	beq.n	8001372 <HAL_RCC_OscConfig+0x46>
 8001362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001364:	2b18      	cmp	r3, #24
 8001366:	d110      	bne.n	800138a <HAL_RCC_OscConfig+0x5e>
 8001368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d10b      	bne.n	800138a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001372:	4b7f      	ldr	r3, [pc, #508]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d06c      	beq.n	8001458 <HAL_RCC_OscConfig+0x12c>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d168      	bne.n	8001458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e3a2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x76>
 8001394:	4b76      	ldr	r3, [pc, #472]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a75      	ldr	r2, [pc, #468]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e02e      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x98>
 80013aa:	4b71      	ldr	r3, [pc, #452]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a70      	ldr	r2, [pc, #448]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e01d      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0xbc>
 80013ce:	4b68      	ldr	r3, [pc, #416]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a67      	ldr	r2, [pc, #412]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b65      	ldr	r3, [pc, #404]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a64      	ldr	r2, [pc, #400]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013e8:	4b61      	ldr	r3, [pc, #388]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fae2 	bl	80009d0 <HAL_GetTick>
 800140c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fade 	bl	80009d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e356      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001422:	4b53      	ldr	r3, [pc, #332]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xe4>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff face 	bl	80009d0 <HAL_GetTick>
 8001434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff faca 	bl	80009d0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e342      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800144a:	4b49      	ldr	r3, [pc, #292]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x10c>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 808c 	beq.w	8001580 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001468:	4b41      	ldr	r3, [pc, #260]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001470:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001472:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001476:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_RCC_OscConfig+0x162>
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	2b18      	cmp	r3, #24
 8001482:	d137      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c8>
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d132      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e314      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014a6:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0219 	bic.w	r2, r3, #25
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	492f      	ldr	r1, [pc, #188]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa8a 	bl	80009d0 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fa86 	bl	80009d0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e2fe      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	4920      	ldr	r1, [pc, #128]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f2:	e045      	b.n	8001580 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d026      	beq.n	800154a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 0219 	bic.w	r2, r3, #25
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4919      	ldr	r1, [pc, #100]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fa5f 	bl	80009d0 <HAL_GetTick>
 8001512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fa5b 	bl	80009d0 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e2d3      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	490b      	ldr	r1, [pc, #44]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e01a      	b.n	8001580 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_RCC_OscConfig+0x244>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fa3b 	bl	80009d0 <HAL_GetTick>
 800155a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fa37 	bl	80009d0 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d903      	bls.n	8001574 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e2af      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
 8001570:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001574:	4b96      	ldr	r3, [pc, #600]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d06a      	beq.n	8001662 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158c:	4b90      	ldr	r3, [pc, #576]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001594:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001596:	4b8e      	ldr	r3, [pc, #568]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d007      	beq.n	80015b2 <HAL_RCC_OscConfig+0x286>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b18      	cmp	r3, #24
 80015a6:	d11b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2b4>
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015b2:	4b87      	ldr	r3, [pc, #540]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x29e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2b80      	cmp	r3, #128	@ 0x80
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e282      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015ca:	4b81      	ldr	r3, [pc, #516]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	497d      	ldr	r1, [pc, #500]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015de:	e040      	b.n	8001662 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015e8:	4b79      	ldr	r3, [pc, #484]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a78      	ldr	r2, [pc, #480]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80015ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff f9ec 	bl	80009d0 <HAL_GetTick>
 80015f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015fc:	f7ff f9e8 	bl	80009d0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e260      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800160e:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800161a:	4b6d      	ldr	r3, [pc, #436]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	061b      	lsls	r3, r3, #24
 8001628:	4969      	ldr	r1, [pc, #420]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	60cb      	str	r3, [r1, #12]
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001630:	4b67      	ldr	r3, [pc, #412]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a66      	ldr	r2, [pc, #408]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff f9c8 	bl	80009d0 <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001644:	f7ff f9c4 	bl	80009d0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e23c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001656:	4b5e      	ldr	r3, [pc, #376]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d036      	beq.n	80016dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167a:	4a55      	ldr	r2, [pc, #340]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff f9a5 	bl	80009d0 <HAL_GetTick>
 8001686:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff f9a1 	bl	80009d0 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e219      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800169c:	4b4c      	ldr	r3, [pc, #304]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800169e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x35e>
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b49      	ldr	r3, [pc, #292]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ae:	4a48      	ldr	r2, [pc, #288]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff f98b 	bl	80009d0 <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff f987 	bl	80009d0 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1ff      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016d0:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d036      	beq.n	8001756 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f0:	4b37      	ldr	r3, [pc, #220]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a36      	ldr	r2, [pc, #216]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80016f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016fc:	f7ff f968 	bl	80009d0 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001704:	f7ff f964 	bl	80009d0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1dc      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001716:	4b2e      	ldr	r3, [pc, #184]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x3d8>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800172a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800172e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001730:	f7ff f94e 	bl	80009d0 <HAL_GetTick>
 8001734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001738:	f7ff f94a 	bl	80009d0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1c2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8086 	beq.w	8001870 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_RCC_OscConfig+0x4a8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_RCC_OscConfig+0x4a8>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001770:	f7ff f92e 	bl	80009d0 <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001778:	f7ff f92a 	bl	80009d0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	@ 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1a2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_RCC_OscConfig+0x4a8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x480>
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017aa:	e032      	b.n	8001812 <HAL_RCC_OscConfig+0x4e6>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4ac>
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a02      	ldr	r2, [pc, #8]	@ (80017d0 <HAL_RCC_OscConfig+0x4a4>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80017cc:	e021      	b.n	8001812 <HAL_RCC_OscConfig+0x4e6>
 80017ce:	bf00      	nop
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58024800 	.word	0x58024800
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x4ce>
 80017e0:	4b83      	ldr	r3, [pc, #524]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e4:	4a82      	ldr	r2, [pc, #520]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ec:	4b80      	ldr	r3, [pc, #512]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	4a7f      	ldr	r2, [pc, #508]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x4e6>
 80017fa:	4b7d      	ldr	r3, [pc, #500]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fe:	4a7c      	ldr	r2, [pc, #496]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	@ 0x70
 8001806:	4b7a      	ldr	r3, [pc, #488]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	4a79      	ldr	r2, [pc, #484]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff f8d9 	bl	80009d0 <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f8d5 	bl	80009d0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e14b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001838:	4b6d      	ldr	r3, [pc, #436]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ee      	beq.n	8001822 <HAL_RCC_OscConfig+0x4f6>
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff f8c3 	bl	80009d0 <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff f8bf 	bl	80009d0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e135      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001864:	4b62      	ldr	r3, [pc, #392]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 812a 	beq.w	8001ace <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800187a:	4b5d      	ldr	r3, [pc, #372]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001882:	2b18      	cmp	r3, #24
 8001884:	f000 80ba 	beq.w	80019fc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	2b02      	cmp	r3, #2
 800188e:	f040 8095 	bne.w	80019bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a56      	ldr	r2, [pc, #344]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff f897 	bl	80009d0 <HAL_GetTick>
 80018a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f893 	bl	80009d0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e10b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018b8:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c4:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80018c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018c8:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <HAL_RCC_OscConfig+0x6c8>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	430a      	orrs	r2, r1
 80018d8:	4945      	ldr	r1, [pc, #276]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ec:	3b01      	subs	r3, #1
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	3b01      	subs	r3, #1
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800190e:	4938      	ldr	r1, [pc, #224]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001914:	4b36      	ldr	r3, [pc, #216]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	4a35      	ldr	r2, [pc, #212]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001920:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001924:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_RCC_OscConfig+0x6cc>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800192c:	00d2      	lsls	r2, r2, #3
 800192e:	4930      	ldr	r1, [pc, #192]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	f023 020c 	bic.w	r2, r3, #12
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	492b      	ldr	r1, [pc, #172]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001946:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	f023 0202 	bic.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4927      	ldr	r1, [pc, #156]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001958:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195c:	4a24      	ldr	r2, [pc, #144]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800195e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	4a1e      	ldr	r2, [pc, #120]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800197a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f81c 	bl	80009d0 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f818 	bl	80009d0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e090      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x670>
 80019ba:	e088      	b.n	8001ace <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80019c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f802 	bl	80009d0 <HAL_GetTick>
 80019cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe fffe 	bl	80009d0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e076      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e2:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_RCC_OscConfig+0x6c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a4>
 80019ee:	e06e      	b.n	8001ace <HAL_RCC_OscConfig+0x7a2>
 80019f0:	58024400 	.word	0x58024400
 80019f4:	fffffc0c 	.word	0xfffffc0c
 80019f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019fc:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a02:	4b35      	ldr	r3, [pc, #212]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d031      	beq.n	8001a74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0203 	and.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d12a      	bne.n	8001a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d122      	bne.n	8001a74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d11a      	bne.n	8001a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	0a5b      	lsrs	r3, r3, #9
 8001a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d111      	bne.n	8001a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d108      	bne.n	8001a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	0e1b      	lsrs	r3, r3, #24
 8001a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e02b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d01f      	beq.n	8001ace <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a9a:	f7fe ff99 	bl	80009d0 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001aa0:	bf00      	nop
 8001aa2:	f7fe ff95 	bl	80009d0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d0f9      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_RCC_OscConfig+0x7b0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aba:	00d2      	lsls	r2, r2, #3
 8001abc:	4906      	ldr	r1, [pc, #24]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_RCC_OscConfig+0x7ac>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3730      	adds	r7, #48	@ 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	ffff0007 	.word	0xffff0007

08001ae0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e19c      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b87      	ldr	r3, [pc, #540]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 020f 	bic.w	r2, r3, #15
 8001b0a:	4985      	ldr	r1, [pc, #532]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b83      	ldr	r3, [pc, #524]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e184      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	4b7b      	ldr	r3, [pc, #492]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d908      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b40:	4b78      	ldr	r3, [pc, #480]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4975      	ldr	r1, [pc, #468]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d010      	beq.n	8001b80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	4b70      	ldr	r3, [pc, #448]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d908      	bls.n	8001b80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	496a      	ldr	r1, [pc, #424]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d908      	bls.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b9c:	4b61      	ldr	r3, [pc, #388]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	495e      	ldr	r1, [pc, #376]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d010      	beq.n	8001bdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	4b59      	ldr	r3, [pc, #356]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d908      	bls.n	8001bdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001bca:	4b56      	ldr	r3, [pc, #344]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4953      	ldr	r1, [pc, #332]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4b4d      	ldr	r3, [pc, #308]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d908      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f023 020f 	bic.w	r2, r3, #15
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4947      	ldr	r1, [pc, #284]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d055      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4940      	ldr	r1, [pc, #256]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c30:	4b3c      	ldr	r3, [pc, #240]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d121      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0f6      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c48:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d115      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0ea      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c60:	4b30      	ldr	r3, [pc, #192]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0de      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c70:	4b2c      	ldr	r3, [pc, #176]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0d6      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c80:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f023 0207 	bic.w	r2, r3, #7
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4925      	ldr	r1, [pc, #148]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c92:	f7fe fe9d 	bl	80009d0 <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7fe fe99 	bl	80009d0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0be      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d1eb      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d010      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d208      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	490e      	ldr	r1, [pc, #56]	@ (8001d24 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d214      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	4906      	ldr	r1, [pc, #24]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <HAL_RCC_ClockConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e086      	b.n	8001e2e <HAL_RCC_ClockConfig+0x34e>
 8001d20:	52002000 	.word	0x52002000
 8001d24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	4b3f      	ldr	r3, [pc, #252]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d208      	bcs.n	8001d56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d44:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4939      	ldr	r1, [pc, #228]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d010      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d208      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d72:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	492e      	ldr	r1, [pc, #184]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d208      	bcs.n	8001db2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4922      	ldr	r1, [pc, #136]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d208      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4917      	ldr	r1, [pc, #92]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001de0:	f000 f834 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	4912      	ldr	r1, [pc, #72]	@ (8001e3c <HAL_RCC_ClockConfig+0x35c>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_RCC_ClockConfig+0x358>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <HAL_RCC_ClockConfig+0x35c>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_RCC_ClockConfig+0x360>)
 8001e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_RCC_ClockConfig+0x364>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_RCC_ClockConfig+0x368>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fba2 	bl	800056c <HAL_InitTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	08002884 	.word	0x08002884
 8001e40:	24000004 	.word	0x24000004
 8001e44:	24000000 	.word	0x24000000
 8001e48:	24000008 	.word	0x24000008

08001e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e52:	4bb3      	ldr	r3, [pc, #716]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e5a:	2b18      	cmp	r3, #24
 8001e5c:	f200 8155 	bhi.w	800210a <HAL_RCC_GetSysClockFreq+0x2be>
 8001e60:	a201      	add	r2, pc, #4	@ (adr r2, 8001e68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001ecd 	.word	0x08001ecd
 8001e6c:	0800210b 	.word	0x0800210b
 8001e70:	0800210b 	.word	0x0800210b
 8001e74:	0800210b 	.word	0x0800210b
 8001e78:	0800210b 	.word	0x0800210b
 8001e7c:	0800210b 	.word	0x0800210b
 8001e80:	0800210b 	.word	0x0800210b
 8001e84:	0800210b 	.word	0x0800210b
 8001e88:	08001ef3 	.word	0x08001ef3
 8001e8c:	0800210b 	.word	0x0800210b
 8001e90:	0800210b 	.word	0x0800210b
 8001e94:	0800210b 	.word	0x0800210b
 8001e98:	0800210b 	.word	0x0800210b
 8001e9c:	0800210b 	.word	0x0800210b
 8001ea0:	0800210b 	.word	0x0800210b
 8001ea4:	0800210b 	.word	0x0800210b
 8001ea8:	08001ef9 	.word	0x08001ef9
 8001eac:	0800210b 	.word	0x0800210b
 8001eb0:	0800210b 	.word	0x0800210b
 8001eb4:	0800210b 	.word	0x0800210b
 8001eb8:	0800210b 	.word	0x0800210b
 8001ebc:	0800210b 	.word	0x0800210b
 8001ec0:	0800210b 	.word	0x0800210b
 8001ec4:	0800210b 	.word	0x0800210b
 8001ec8:	08001eff 	.word	0x08001eff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ecc:	4b94      	ldr	r3, [pc, #592]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ed8:	4b91      	ldr	r3, [pc, #580]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	4a90      	ldr	r2, [pc, #576]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001eea:	e111      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001eec:	4b8d      	ldr	r3, [pc, #564]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eee:	61bb      	str	r3, [r7, #24]
      break;
 8001ef0:	e10e      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ef4:	61bb      	str	r3, [r7, #24]
      break;
 8001ef6:	e10b      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800212c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001efa:	61bb      	str	r3, [r7, #24]
      break;
 8001efc:	e108      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001efe:	4b88      	ldr	r3, [pc, #544]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f08:	4b85      	ldr	r3, [pc, #532]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f14:	4b82      	ldr	r3, [pc, #520]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f1e:	4b80      	ldr	r3, [pc, #512]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80e1 	beq.w	8002104 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f000 8083 	beq.w	8002050 <HAL_RCC_GetSysClockFreq+0x204>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	f200 80a1 	bhi.w	8002094 <HAL_RCC_GetSysClockFreq+0x248>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x114>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d056      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f5e:	e099      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f60:	4b6f      	ldr	r3, [pc, #444]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d02d      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	4a6b      	ldr	r2, [pc, #428]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f96:	4b62      	ldr	r3, [pc, #392]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001faa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002130 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001fc6:	e087      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002134 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fda:	4b51      	ldr	r3, [pc, #324]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002130 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800200a:	e065      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002016:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002138 <HAL_RCC_GetSysClockFreq+0x2ec>
 800201a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800201e:	4b40      	ldr	r3, [pc, #256]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800202e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002032:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002130 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800203a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800203e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800204e:	e043      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800213c <HAL_RCC_GetSysClockFreq+0x2f0>
 800205e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002062:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002072:	ed97 6a02 	vldr	s12, [r7, #8]
 8002076:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800207a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800207e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002092:	e021      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002138 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002130 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	0a5b      	lsrs	r3, r3, #9
 80020de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020e2:	3301      	adds	r3, #1
 80020e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80020f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fc:	ee17 3a90 	vmov	r3, s15
 8002100:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
      break;
 8002108:	e002      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800210c:	61bb      	str	r3, [r7, #24]
      break;
 800210e:	bf00      	nop
  }

  return sysclockfreq;
 8002110:	69bb      	ldr	r3, [r7, #24]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	58024400 	.word	0x58024400
 8002124:	03d09000 	.word	0x03d09000
 8002128:	003d0900 	.word	0x003d0900
 800212c:	017d7840 	.word	0x017d7840
 8002130:	46000000 	.word	0x46000000
 8002134:	4c742400 	.word	0x4c742400
 8002138:	4a742400 	.word	0x4a742400
 800213c:	4bbebc20 	.word	0x4bbebc20

08002140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002146:	f7ff fe81 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_GetHCLKFreq+0x50>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490f      	ldr	r1, [pc, #60]	@ (8002194 <HAL_RCC_GetHCLKFreq+0x54>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_RCC_GetHCLKFreq+0x50>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_RCC_GetHCLKFreq+0x54>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a07      	ldr	r2, [pc, #28]	@ (8002198 <HAL_RCC_GetHCLKFreq+0x58>)
 800217c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800217e:	4a07      	ldr	r2, [pc, #28]	@ (800219c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <HAL_RCC_GetHCLKFreq+0x58>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	58024400 	.word	0x58024400
 8002194:	08002884 	.word	0x08002884
 8002198:	24000004 	.word	0x24000004
 800219c:	24000000 	.word	0x24000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80021a4:	f7ff ffcc 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4904      	ldr	r1, [pc, #16]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	58024400 	.word	0x58024400
 80021c8:	08002884 	.word	0x08002884

080021cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223f      	movs	r2, #63	@ 0x3f
 80021da:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0207 	and.w	r2, r3, #7
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 020f 	and.w	r2, r3, #15
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <HAL_RCC_GetClockConfig+0x7c>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_GetClockConfig+0x80>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	58024400 	.word	0x58024400
 800224c:	52002000 	.word	0x52002000

08002250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e049      	b.n	80022f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f841 	bl	80022fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f000 f9f6 	bl	8002680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d001      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e05e      	b.n	80023ea <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	@ (80023f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02c      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002356:	d027      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a27      	ldr	r2, [pc, #156]	@ (80023fc <HAL_TIM_Base_Start_IT+0xe8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a26      	ldr	r2, [pc, #152]	@ (8002400 <HAL_TIM_Base_Start_IT+0xec>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d01d      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a24      	ldr	r2, [pc, #144]	@ (8002404 <HAL_TIM_Base_Start_IT+0xf0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <HAL_TIM_Base_Start_IT+0xf4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a21      	ldr	r2, [pc, #132]	@ (800240c <HAL_TIM_Base_Start_IT+0xf8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a20      	ldr	r2, [pc, #128]	@ (8002410 <HAL_TIM_Base_Start_IT+0xfc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1e      	ldr	r2, [pc, #120]	@ (8002414 <HAL_TIM_Base_Start_IT+0x100>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x94>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_TIM_Base_Start_IT+0x104>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d115      	bne.n	80023d4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_TIM_Base_Start_IT+0x108>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d015      	beq.n	80023e6 <HAL_TIM_Base_Start_IT+0xd2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c0:	d011      	beq.n	80023e6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d2:	e008      	b.n	80023e6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e000      	b.n	80023e8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40010400 	.word	0x40010400
 800240c:	40001800 	.word	0x40001800
 8002410:	40014000 	.word	0x40014000
 8002414:	4000e000 	.word	0x4000e000
 8002418:	4000e400 	.word	0x4000e400
 800241c:	00010007 	.word	0x00010007

08002420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d020      	beq.n	8002484 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01b      	beq.n	8002484 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0202 	mvn.w	r2, #2
 8002454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8e9 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8db 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8ec 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d020      	beq.n	80024d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0204 	mvn.w	r2, #4
 80024a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f8c3 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8b5 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f8c6 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d020      	beq.n	800251c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0208 	mvn.w	r2, #8
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2204      	movs	r2, #4
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f89d 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f88f 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8a0 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d020      	beq.n	8002568 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0210 	mvn.w	r2, #16
 8002538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2208      	movs	r2, #8
 800253e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f877 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f869 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f87a 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00c      	beq.n	800258c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0201 	mvn.w	r2, #1
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fd ffbe 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00c      	beq.n	80025ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80025b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f919 	bl	80027ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00c      	beq.n	80025de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80025d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f911 	bl	8002800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f834 	bl	800266a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f06f 0220 	mvn.w	r2, #32
 800261e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8d9 	bl	80027d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a47      	ldr	r2, [pc, #284]	@ (80027b0 <TIM_Base_SetConfig+0x130>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800269e:	d00f      	beq.n	80026c0 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a44      	ldr	r2, [pc, #272]	@ (80027b4 <TIM_Base_SetConfig+0x134>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <TIM_Base_SetConfig+0x40>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a43      	ldr	r2, [pc, #268]	@ (80027b8 <TIM_Base_SetConfig+0x138>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a42      	ldr	r2, [pc, #264]	@ (80027bc <TIM_Base_SetConfig+0x13c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a41      	ldr	r2, [pc, #260]	@ (80027c0 <TIM_Base_SetConfig+0x140>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d108      	bne.n	80026d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a36      	ldr	r2, [pc, #216]	@ (80027b0 <TIM_Base_SetConfig+0x130>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e0:	d023      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a33      	ldr	r2, [pc, #204]	@ (80027b4 <TIM_Base_SetConfig+0x134>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01f      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <TIM_Base_SetConfig+0x138>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01b      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <TIM_Base_SetConfig+0x13c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d017      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a30      	ldr	r2, [pc, #192]	@ (80027c0 <TIM_Base_SetConfig+0x140>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2f      	ldr	r2, [pc, #188]	@ (80027c4 <TIM_Base_SetConfig+0x144>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00f      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2e      	ldr	r2, [pc, #184]	@ (80027c8 <TIM_Base_SetConfig+0x148>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00b      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2d      	ldr	r2, [pc, #180]	@ (80027cc <TIM_Base_SetConfig+0x14c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2c      	ldr	r2, [pc, #176]	@ (80027d0 <TIM_Base_SetConfig+0x150>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0xaa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <TIM_Base_SetConfig+0x154>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a14      	ldr	r2, [pc, #80]	@ (80027b0 <TIM_Base_SetConfig+0x130>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00f      	beq.n	8002782 <TIM_Base_SetConfig+0x102>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <TIM_Base_SetConfig+0x140>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0x102>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <TIM_Base_SetConfig+0x144>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0x102>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <TIM_Base_SetConfig+0x148>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0x102>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <TIM_Base_SetConfig+0x14c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d103      	bne.n	800278a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00
 80027c0:	40010400 	.word	0x40010400
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800
 80027d0:	4000e000 	.word	0x4000e000
 80027d4:	4000e400 	.word	0x4000e400

080027d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <memset>:
 8002814:	4402      	add	r2, r0
 8002816:	4603      	mov	r3, r0
 8002818:	4293      	cmp	r3, r2
 800281a:	d100      	bne.n	800281e <memset+0xa>
 800281c:	4770      	bx	lr
 800281e:	f803 1b01 	strb.w	r1, [r3], #1
 8002822:	e7f9      	b.n	8002818 <memset+0x4>

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	4d0d      	ldr	r5, [pc, #52]	@ (800285c <__libc_init_array+0x38>)
 8002828:	4c0d      	ldr	r4, [pc, #52]	@ (8002860 <__libc_init_array+0x3c>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	2600      	movs	r6, #0
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	4d0b      	ldr	r5, [pc, #44]	@ (8002864 <__libc_init_array+0x40>)
 8002836:	4c0c      	ldr	r4, [pc, #48]	@ (8002868 <__libc_init_array+0x44>)
 8002838:	f000 f818 	bl	800286c <_init>
 800283c:	1b64      	subs	r4, r4, r5
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	2600      	movs	r6, #0
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f855 3b04 	ldr.w	r3, [r5], #4
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f855 3b04 	ldr.w	r3, [r5], #4
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	08002894 	.word	0x08002894
 8002860:	08002894 	.word	0x08002894
 8002864:	08002894 	.word	0x08002894
 8002868:	08002898 	.word	0x08002898

0800286c <_init>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr

08002878 <_fini>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr
